name: CI

on:
  push:
    branches: ["*"]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Compute changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
      - name: Determine build plan
        id: plan
        env:
          CHANGED_FILES_JSON: ${{ steps.changed-files.outputs.all_changed_files_json }}
        run: |
          python3 - <<'PY'
          import json
          import os

          frontends = {
              "clike": [
                  "src/clike/**",
                  "Tests/clike/**",
                  "Tests/libs/clike/**",
                  "Tests/run_clike_tests.sh",
                  "Tests/scope_verify/clike/**",
                  "Examples/clike/**",
                  "lib/clike/**",
              ],
              "exsh": [
                  "src/shell/**",
                  "Tests/exsh/**",
                  "Tests/run_shell_tests.sh",
                  "Examples/exsh/**",
              ],
              "pascal": [
                  "src/Pascal/**",
                  "Tests/Pascal/**",
                  "Tests/libs/pascal/**",
                  "Tests/run_pascal_tests.sh",
                  "Tests/scope_verify/pascal/**",
                  "Examples/pascal/**",
                  "lib/pascal/**",
              ],
              "rea": [
                  "src/rea/**",
                  "Tests/rea/**",
                  "Tests/rea_negatives/**",
                  "Tests/libs/rea/**",
                  "Tests/run_rea_tests.sh",
                  "Tests/scope_verify/rea/**",
                  "Examples/rea/**",
                  "lib/rea/**",
              ],
          }

          # Always exercise every frontend. The conditional build plan caused
          # coverage gaps (e.g. exsh sources not being rebuilt after shell
          # lexer changes), so revert to the original "build everything"
          # behaviour to guarantee CI safety.
          run_frontend = {name: True for name in frontends}
          run_ctest = True
          selected_frontends = list(run_frontend.keys())

          build_targets: list[str] = []
          target_mapping = {
              "clike": ["clike"],
              "exsh": ["exsh"],
              "pascal": ["pascal", "pscalvm"],
              "rea": ["rea", "pscalvm"],
          }
          for name in selected_frontends:
              build_targets.extend(target_mapping.get(name, []))

          if run_ctest:
              build_targets.append("pscaljson2bc")
              build_targets.append("pscalvm")

          # Remove duplicates while preserving order
          unique_targets: list[str] = []
          for target in build_targets:
              if target not in unique_targets:
                  unique_targets.append(target)

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"targets={' '.join(unique_targets)}\n")
              fh.write(f"targets_json={json.dumps(unique_targets)}\n")
              fh.write(f"run_ctest={'true' if run_ctest else 'false'}\n")
              for name, should in run_frontend.items():
                  fh.write(f"run_{name}={'true' if should else 'false'}\n")
              fh.write("skip=false\n")

          selected = ", ".join(selected_frontends) if selected_frontends else "(none)"
          print(f"Frontends to exercise: {selected}")
          print(f"cmake targets: {' '.join(unique_targets) if unique_targets else '(none)'}")
          print(f"Run ctest: {run_ctest}")
          PY
      - name: Install dependencies
        if: steps.plan.outputs.skip != 'true'
        run: sudo apt-get update && sudo apt-get install -y build-essential cmake libcurl4-openssl-dev
      - name: Configure
        if: steps.plan.outputs.skip != 'true'
        run: cmake -S . -B build
      - name: Build selected targets
        if: steps.plan.outputs.skip != 'true'
        env:
          TARGETS_JSON: ${{ steps.plan.outputs.targets_json }}
        run: |
          set -e
          python3 - <<'PY'
          import json
          import os
          import subprocess
          import sys

          raw = (os.environ.get("TARGETS_JSON", "").strip() or "[]")
          try:
              targets = json.loads(raw)
          except json.JSONDecodeError:
              print(f"Unable to parse TARGETS_JSON payload: {raw}", file=sys.stderr)
              targets = []

          if not targets:
              print("No explicit targets provided; building default target.")
              subprocess.check_call(["cmake", "--build", "build"])
          else:
              for target in targets:
                  target = target.strip()
                  if not target:
                      continue
                  print(f"Building target {target}")
                  subprocess.check_call(["cmake", "--build", "build", "--target", target])
          PY
      - name: CTest
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_ctest == 'true'
        run: cd build && ctest --output-on-failure
      - name: Run CLike tests
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_clike == 'true'
        run: Tests/run_clike_tests.sh
      - name: Run exsh tests
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_exsh == 'true'
        run: Tests/run_shell_tests.sh
      - name: Run Pascal tests
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_pascal == 'true'
        run: Tests/run_pascal_tests.sh
      - name: Run Rea tests
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_rea == 'true'
        env:
          REA_SKIP_TESTS: "constructor_init field_access_assign field_access_read method_this_assign new_alloc new_assign_ptr"
        run: Tests/run_rea_tests.sh
      - name: Run CLike scope tests
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_clike == 'true'
        run: python3 Tests/scope_verify/clike/clike_scope_test_harness.py --manifest Tests/scope_verify/clike/tests/manifest.json
      - name: Run Pascal scope tests
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_pascal == 'true'
        run: python3 Tests/scope_verify/pascal/pascal_scope_test_harness.py --manifest Tests/scope_verify/pascal/tests/manifest.json
      - name: Run Rea scope tests
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_rea == 'true'
        run: python3 Tests/scope_verify/rea/rea_scope_test_harness.py --manifest Tests/scope_verify/rea/tests/manifest.json
      - name: Compile CLike examples (dump-only)
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_clike == 'true'
        run: |
          set -e
          export SDL_VIDEODRIVER=dummy SDL_AUDIODRIVER=dummy
          export CLIKE_LIB_DIR="$GITHUB_WORKSPACE/Examples/clike"
          for f in Examples/clike/*; do
            bn=$(basename "$f");
            case "$bn" in README.md|builtins.h|mbt.save|typescript) continue;; esac
            if [ -f "$f" ]; then
              echo "CLike example: $bn"
              build/bin/clike --dump-bytecode-only "$f" >/dev/null
            fi
          done
      - name: Compile exsh examples (dump-only)
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_exsh == 'true'
        run: |
          set -e
          for f in Examples/exsh/*.psh; do
            if [ -f "$f" ]; then
              bn=$(basename "$f")
              echo "exsh example: $bn"
              build/bin/exsh --dump-bytecode-only "$f" >/dev/null
            fi
          done
      - name: Compile Pascal examples (dump-only)
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_pascal == 'true'
        run: |
          set -e
          export SDL_VIDEODRIVER=dummy SDL_AUDIODRIVER=dummy
          export PASCAL_LIB_DIR="$GITHUB_WORKSPACE/lib/pascal"
          SDL_ENABLED=$(grep -q '^SDL:BOOL=ON$' build/CMakeCache.txt && echo 1 || echo 0)
          for f in Examples/Pascal/*; do
            bn=$(basename "$f")
            if [ -f "$f" ]; then
              # Skip SDL-dependent examples when SDL is not enabled in the build
              if [ "$SDL_ENABLED" -ne 1 ]; then
                # Heuristic: skip if the name suggests SDL, or if the file references SDL graphics/sound builtins
                if echo "$bn" | grep -qiE '(^SDL|SDL|mandoSDL)'; then
                  echo "Skipping SDL example (SDL disabled): $bn"
                  continue
                fi
                if grep -qiE '(initsoundsystem|loadsound|playsound|issoundplaying|freesound|quitsoundsystem|initgraph|closegraph|updatescreen|rendercopyex|outtextxy|setrgbcolor|drawline|fillrect|fillcircle|inittextsystem|graphloop|createtexture|destroytexture|updatetexture)' "$f"; then
                  echo "Skipping SDL-dependent example (SDL disabled): $bn"
                  continue
                fi
              fi
              echo "Pascal example: $bn"
              build/bin/pascal --dump-bytecode-only "$f" >/dev/null
            fi
          done
      - name: Compile Rea examples (dump-only)
        if: steps.plan.outputs.skip != 'true' && steps.plan.outputs.run_rea == 'true'
        run: |
          set -e
          export SDL_VIDEODRIVER=dummy SDL_AUDIODRIVER=dummy
          export REA_LIB_DIR="$GITHUB_WORKSPACE/lib/rea"
          export PASCAL_LIB_DIR="$GITHUB_WORKSPACE/lib/pascal"
          SDL_ENABLED=$(grep -q '^SDL:BOOL=ON$' build/CMakeCache.txt && echo 1 || echo 0)
          for f in Examples/rea/*.rea; do
            bn=$(basename "$f")
            if [ -f "$f" ]; then
              # Skip SDL-dependent examples when SDL is not enabled in the build
              if [ "$SDL_ENABLED" -ne 1 ]; then
                if echo "$bn" | grep -qiE '^sdl'; then
                  echo "Skipping SDL example (SDL disabled): $bn"
                  continue
                fi
              fi
              echo "Rea example: $bn"
              build/bin/rea --dump-bytecode-only "$f" >/dev/null
            fi
          done
