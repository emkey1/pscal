program TestFileOperations;
{---------------------------------------------------------------------
  TestFileOperations

  A focused test suite for pscal file I/O operations, extracted
  from the larger TestSuite.pas. Tests assign, rewrite, writeln to file,
  close, reset, readln from file, and ioresult.
---------------------------------------------------------------------}

uses
  Crt; // Needed for WriteLn, Write

var
  f: file;        // File variable for testing
  tmp: string;    // Temporary string for reading data
  i: integer;     // For ioresult check

{---------------------------------------------------------------------
  Assertion Procedures (Copied from TestSuite for completeness)
---------------------------------------------------------------------}

procedure AssertEqualInt(expected, actual: integer; testName: string);
begin
  write('START: ', testName, ': ');
  if expected = actual then
    writeln('PASS')
  else
    writeln('FAIL (expected: ', expected, ', got: ', actual, ')');
end;

procedure AssertEqualStr(expected, actual: string; testName: string);
begin
  write('START: ', testName, ': ');
  if expected = actual then
    writeln('PASS')
  else
    writeln('FAIL (expected: ', expected, ', got: ', actual, ')');
end;

procedure AssertEqualBool(expected, actual: boolean; testName: string);
begin
  write('START: ', testName, ': ');
  if expected = actual then
    writeln('PASS')
  else
    writeln('FAIL (expected: ', expected, ', got: ', actual, ')');
end;

procedure AssertEqualReal(expected, actual: real; testName: string);
begin
  write('START: ', testName, ': ');
  if abs(expected - actual) < 0.0001 then
    writeln('PASS')
  else
    writeln('FAIL (expected: ', expected:0:4, ', got: ', actual:0:4, ')');
end;


{---------------------------------------------------------------------
  Combined File I/O Test Procedure
---------------------------------------------------------------------}

procedure RunFileIOTests;
begin
  writeln('--- Testing Basic File Read/Write ---');
  assign(f, '/tmp/pscal_testfile.txt'); // Use a specific name
  rewrite(f);                          // Open for writing (create/truncate)
  // Check IOResult after rewrite (should be 0 on success)
  i := ioresult;
  AssertEqualInt(0, i, 'IOResult after successful rewrite');

  writeln(f, 'File Test Line 1');      // Write to the file
  writeln(f, 'Another Line');
  // Check IOResult after writeln (should still be 0) - Note: TP didn't always guarantee this reset
  i := ioresult;
  AssertEqualInt(0, i, 'IOResult after successful writeln');
  close(f);                            // Close the file

  // Check IOResult after close (should be 0)
  i := ioresult;
  AssertEqualInt(0, i, 'IOResult after successful close');


  writeln('--- Testing File Read ---');
  assign(f, '/tmp/pscal_testfile.txt'); // Assign same file
  reset(f);                            // Open for reading
  i := ioresult;
  AssertEqualInt(0, i, 'IOResult after successful reset');

  readln(f, tmp);                        // Read the first line
  i := ioresult;
  AssertEqualInt(0, i, 'IOResult after successful readln 1');
  AssertEqualStr('File Test Line 1', tmp, 'File Read Test (Line 1)');

  readln(f, tmp);                        // Read the second line
  i := ioresult;
  AssertEqualInt(0, i, 'IOResult after successful readln 2');
  AssertEqualStr('Another Line', tmp, 'File Read Test (Line 2)');

  // Check EOF (optional, if EOF built-in exists)
  // AssertEqualBool(true, eof(f), 'EOF check after reading all lines');

  close(f);                            // Close the file
  i := ioresult;
  AssertEqualInt(0, i, 'IOResult after successful close (read)');


  writeln('--- Testing IOResult on Error ---');
  assign(f, '/tmp/pscal_nonexistent_file.txt'); // Assign a non-existent file
  reset(f);                                    // Attempt to open for reading (should fail)
  i := ioresult;                               // Get the result code

  // Assert that ioresult returned non-zero
  write('START: IOResult Error Test: ');
  if i <> 0 then
    writeln('PASS')
  else
    writeln('FAIL (expected non-zero error code, got 0)');
  // No need to close 'f' here as reset failed to open it.

end;

{---------------------------------------------------------------------
  Main Program
---------------------------------------------------------------------}
begin
  writeln('Running pscal File I/O Test Suite...');
  RunFileIOTests; // Call the test procedure
  writeln('---');
  writeln('File I/O Tests Completed.');
end.
