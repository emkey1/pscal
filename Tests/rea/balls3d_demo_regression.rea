const int NumBalls = 3;
const float BoxWidth = 720.0;
const float BoxHeight = 420.0;
const float BoxDepth = 320.0;
const float WallElasticity = 1.12;
const float VelocityDrag = 0.993;
const float LightDirX = -0.55;
const float LightDirY = -0.35;
const float LightDirZ = 0.78;
const float ScreenWidth = 1184.0;
const float ScreenHeight = 624.0;

float posX[NumBalls];
float posY[NumBalls];
float posZ[NumBalls];
float velX[NumBalls];
float velY[NumBalls];
float velZ[NumBalls];
float radius[NumBalls];
float screenX[NumBalls];
float screenY[NumBalls];
float screenRadius[NumBalls];
float depthShade[NumBalls];
float lightIntensity[NumBalls];
float rimIntensity[NumBalls];
float highlightX[NumBalls];
float highlightY[NumBalls];
float highlightRadius[NumBalls];
float highlightStrength[NumBalls];

float beforePosX[NumBalls];
float beforePosY[NumBalls];
float beforePosZ[NumBalls];

void initState() {
  posX[0] = -180.0;
  posY[0] = -70.0;
  posZ[0] = -140.0;
  velX[0] = 220.0;
  velY[0] = 185.0;
  velZ[0] = 260.0;
  radius[0] = 22.0;

  posX[1] = 140.0;
  posY[1] = 48.0;
  posZ[1] = -210.0;
  velX[1] = -260.0;
  velY[1] = 150.0;
  velZ[1] = -190.0;
  radius[1] = 28.0;

  posX[2] = -12.0;
  posY[2] = 96.0;
  posZ[2] = -260.0;
  velX[2] = 180.0;
  velY[2] = -220.0;
  velZ[2] = 120.0;
  radius[2] = 24.0;

  int i = 0;
  while (i < NumBalls) {
    screenX[i] = 0.0;
    screenY[i] = 0.0;
    screenRadius[i] = 0.0;
    depthShade[i] = -1.0;
    lightIntensity[i] = 0.0;
    rimIntensity[i] = 0.0;
    highlightX[i] = 0.0;
    highlightY[i] = 0.0;
    highlightRadius[i] = 0.0;
    highlightStrength[i] = 0.0;
    i = i + 1;
  }
}

void snapshotBeforeStep() {
  int i = 0;
  while (i < NumBalls) {
    beforePosX[i] = posX[i];
    beforePosY[i] = posY[i];
    beforePosZ[i] = posZ[i];
    i = i + 1;
  }
}

int main() {
  initState();

  float targetFps = 90.0;
  int frameDelay = trunc(1000.0 / targetFps);
  float deltaTime = 1.0 / targetFps;
  float minSpeed = 120.0;
  float maxSpeed = 680.0;
  float cameraDistance = 1820.0;

  BouncingBalls3DAccelerate(targetFps, frameDelay, deltaTime,
    minSpeed, maxSpeed, cameraDistance,
    1.7, 2.45, 0.66);

  printf("accelerated fps=%.3f dt=%.6f frameDelay=%d min=%.3f max=%.3f camera=%.3f\n",
    targetFps, deltaTime, frameDelay, minSpeed, maxSpeed, cameraDistance);

  snapshotBeforeStep();

  BouncingBalls3DStepUltraAdvanced(NumBalls, deltaTime, BoxWidth, BoxHeight, BoxDepth,
    WallElasticity, minSpeed, maxSpeed, VelocityDrag,
    cameraDistance, ScreenWidth, ScreenHeight,
    LightDirX, LightDirY, LightDirZ,
    posX, posY, posZ,
    velX, velY, velZ, radius,
    screenX, screenY, screenRadius, depthShade,
    lightIntensity, rimIntensity,
    highlightX, highlightY, highlightRadius, highlightStrength);

  bool moved = false;
  bool screenReady = false;
  bool highlightReady = false;
  bool validDepth = true;

  int i = 0;
  while (i < NumBalls) {
    float posDiff = abs(posX[i] - beforePosX[i]) + abs(posY[i] - beforePosY[i]) + abs(posZ[i] - beforePosZ[i]);
    if (posDiff > 0.0001) moved = true;
    if (screenRadius[i] > 0.0001) screenReady = true;
    if (highlightStrength[i] > 0.0001) highlightReady = true;
    if (!(depthShade[i] >= 0.0 && depthShade[i] <= 1.0)) validDepth = false;
    printf("ball#%d posX=%.3f posY=%.3f posZ=%.3f screenR=%.3f depth=%.3f light=%.3f rim=%.3f highlight=%.3f\n",
      i, posX[i], posY[i], posZ[i], screenRadius[i], depthShade[i], lightIntensity[i], rimIntensity[i], highlightStrength[i]);
    i = i + 1;
  }

  bool fpsBoosted = targetFps > 90.0 && deltaTime < (1.0 / 90.0);
  bool frameFaster = frameDelay < 11;
  bool speedsBoosted = (minSpeed > 120.0) && (maxSpeed > 680.0);
  bool cameraAdjusted = cameraDistance < 1820.0;

  if (moved && screenReady && highlightReady && validDepth && fpsBoosted && frameFaster && speedsBoosted && cameraAdjusted) {
    writeln("ok");
    return 0;
  }

  writeln("fail");
  return 1;
}

main();
