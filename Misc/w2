program DisplayWeather;

uses CRT, SysUtils; // Using CRT for ClrScr, SysUtils for ParamCount/ParamStr (may vary by Pascal dialect)

const
  API_KEY = '633f6c95d5d54b8a6a96d3e365ffcfb8'; // Replace if needed
  // ZIPCODE = '98672'; // No longer needed as a constant
  MAX_SUBSTR_LEN = 1024; // Max length for copy/pos substrings
  DEFAULT_ZIPCODE = '98672'; // Define a default if no argument is given

type
  // No specific types needed here now

var
  response: string;      // Holds the raw JSON response
  ms: memorystream;      // Holds the memory stream handle
  url: string;           // API request URL
  location, description, tempStr, humidityStr, windStr: string; // Extracted values
  startPos, endPos, searchPos: integer; // Helper variables for parsing
  currentZipCode : string; // Variable to hold the zip code to use

// --- Min function MOVED TO GLOBAL SCOPE ---
function Min(a, b: integer): integer;
begin
  if a < b then Min := a else Min := b;
end;

// --- Helper function to extract a string value associated with a key ---
function ExtractStringValue(jsonString: string; key: string; startSearchPos: integer): string;
var
  keyPos, valueStartPos, valueEndPos, relEndPos : integer;
  searchPattern, subStr, debugSubStr : string;
begin
  ExtractStringValue := '';
  searchPattern := '"' + key + '":"';
  subStr := copy(jsonString, startSearchPos, MAX_SUBSTR_LEN);
  keyPos := pos(searchPattern, subStr);

  if keyPos > 0 then
  begin
    valueStartPos := startSearchPos + keyPos + length(searchPattern) - 1;
    debugSubStr := copy(jsonString, valueStartPos, MAX_SUBSTR_LEN);
    relEndPos := pos('"', debugSubStr);
    if relEndPos > 0 then
    begin
      valueEndPos := valueStartPos + relEndPos - 1;
      ExtractStringValue := copy(jsonString, valueStartPos, valueEndPos - valueStartPos);
    end;
  end;
  // Removed debug writelns for cleaner code
end;

// --- Helper function to extract a numeric value (as string) ---
function ExtractNumericValueStr(jsonString: string; key: string; startSearchPos: integer): string;
var
  keyPos, valueStartPos, relCommaPos, relBracePos, relEndPos : integer; // Removed absEndPos
  searchPattern, subStr, tempResult : string;
  // i: integer; // Removed unused loop counter
begin
  ExtractNumericValueStr := ''; // Default
  searchPattern := '"' + key + '":';
  subStr := copy(jsonString, startSearchPos, MAX_SUBSTR_LEN); // Search in substring
  keyPos := pos(searchPattern, subStr);

  if keyPos > 0 then
  begin
    valueStartPos := startSearchPos + keyPos + length(searchPattern) - 1;
    while (valueStartPos <= length(jsonString)) and (jsonString[valueStartPos] = ' ') do
    begin
       inc(valueStartPos);
    end;

    subStr := copy(jsonString, valueStartPos, MAX_SUBSTR_LEN);
    relCommaPos := pos(',', subStr);
    relBracePos := pos('}', subStr);

    if (relCommaPos > 0) and (relBracePos > 0) then
         relEndPos := Min(relCommaPos, relBracePos)
    else if relCommaPos > 0 then
         relEndPos := relCommaPos
    else if relBracePos > 0 then
         relEndPos := relBracePos
    else
         relEndPos := length(subStr) + 1;

    tempResult := copy(subStr, 1, relEndPos - 1);
    ExtractNumericValueStr := tempResult;
  end;
end;

// --- Main Program ---
begin
  ClrScr;

  // --- Check for command-line argument ---
  if ParamCount >= 1 then
  begin
    currentZipCode := ParamStr(1); // Use the first argument
    writeln('Using Zip Code from command line: ', currentZipCode);
  end
  else
  begin
    currentZipCode := DEFAULT_ZIPCODE; // Use the default
    writeln('Using default Zip Code: ', currentZipCode);
  end;
  // ---------------------------------------

  writeln('Fetching weather data...');
  writeln;

  // Construct the request URL using the currentZipCode variable
  url := 'http://api.openweathermap.org/data/2.5/weather?zip=' + currentZipCode + ',us&appid=' + API_KEY + '&units=metric';

  // Perform the API call
  ms := apiSend(url, '');

  // Convert the memory stream response to a string
  response := apiReceive(ms);

  // Free the memory stream - IMPORTANT if 'memorystreamfree' exists
  // memorystreamfree(ms);

  writeln('--- Current Weather ---');

  // Extract Location - Search from beginning
  location := ExtractStringValue(response, 'name', 1);
  if location <> '' then
    writeln('Location:      ', location)
  else
    writeln('Location:      Not Found');

  // Extract Description (nested)
  description := '';
  searchPos := pos('"weather":[{', response); // Find start of weather array object
  if searchPos > 0 then
  begin
     description := ExtractStringValue(response, 'description', searchPos);
  end;

  if description <> '' then
     writeln('Conditions:    ', description)
  else
     writeln('Conditions:    Not Found');

  // Extract Temperature (nested in "main")
  tempStr := '';
  searchPos := pos('"main":{', response); // Find start of main object
  if searchPos > 0 then
  begin
     tempStr := ExtractNumericValueStr(response, 'temp', searchPos);
  end;

  if tempStr <> '' then
    writeln('Temperature:   ', tempStr, ' C')
  else
    writeln('Temperature:   Not Found');

  // Extract Humidity (nested in "main")
  humidityStr := '';
  if searchPos > 0 then // Reuse searchPos from temp search
  begin
      humidityStr := ExtractNumericValueStr(response, 'humidity', searchPos);
  end;

  if humidityStr <> '' then
    writeln('Humidity:      ', humidityStr, '%')
  else
    writeln('Humidity:      Not Found');

  // Extract Wind Speed (nested in "wind")
  windStr := '';
  searchPos := pos('"wind":{', response); // Find start of wind object
  if searchPos > 0 then
  begin
      windStr := ExtractNumericValueStr(response, 'speed', searchPos);
  end;

  if windStr <> '' then
     writeln('Wind Speed:    ', windStr, ' m/s') // Metric units
  else
     writeln('Wind Speed:    Not Found');

  writeln;
  writeln('Raw JSON response length: ', length(response));

end.
