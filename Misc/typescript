Script started on Fri Apr 18 09:17:44 2025
[1m[7m%[27m[1m[0m                                                                                                                                                                                                                      ]7;file://MacBook-Pro-M1.local/Users/mke/Dropbox/Psc_Build/Build/int_pscal/int_pscal[0m[27m[24m[Jmke@MacBook-Pro-M1 int_pscal % [K[?2004h../dscal tac[?2004l
dscal(86280,0x1eb808840) malloc: nano zone abandoned due to inability to reserve vm space.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="cos", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'cos' (original: 'cos') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="sin", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'sin' (original: 'sin') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="tan", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'tan' (original: 'tan') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="sqrt", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'sqrt' (original: 'sqrt') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="ln", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'ln' (original: 'ln') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="exp", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'exp' (original: 'exp') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="abs", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'abs' (original: 'abs') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="assign", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'assign' (original: 'assign') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="pos", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'pos' (original: 'pos') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="close", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'close' (original: 'close') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="copy", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'copy' (original: 'copy') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="halt", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'halt' (original: 'halt') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="inc", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'inc' (original: 'inc') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="ioresult", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'ioresult' (original: 'ioresult') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="length", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'length' (original: 'length') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="randomize", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'randomize' (original: 'randomize') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="random", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'random' (original: 'random') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="reset", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'reset' (original: 'reset') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="rewrite", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'rewrite' (original: 'rewrite') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="trunc", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'trunc' (original: 'trunc') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="chr", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from VOID to INTEGER
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="_chr_arg", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="char", var_type=VOID)
Changing type of AST node from VOID to CHAR
[DEBUG] addProcedure: Added procedure 'chr' (original: 'chr') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="ord", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from VOID to CHAR
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="_ord_arg", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] addProcedure: Added procedure 'ord' (original: 'ord') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="upcase", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'upcase' (original: 'upcase') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="memorystreamcreate", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'memorystreamcreate' (original: 'memorystreamcreate') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="memorystreamloadfromfile", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'memorystreamloadfromfile' (original: 'memorystreamloadfromfile') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="memorystreamsavetofile", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'memorystreamsavetofile' (original: 'memorystreamsavetofile') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="memorystreamfree", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'memorystreamfree' (original: 'memorystreamfree') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="api_send", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="memorystream", var_type=VOID)
Changing type of AST node from VOID to MEMORY_STREAM
[DEBUG] addProcedure: Added procedure 'api_send' (original: 'api_send') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="api_receive", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="string", var_type=VOID)
Changing type of AST node from VOID to STRING
[DEBUG] addProcedure: Added procedure 'api_receive' (original: 'api_receive') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="paramcount", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'paramcount' (original: 'paramcount') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="paramstr", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'paramstr' (original: 'paramstr') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="readkey", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'readkey' (original: 'readkey') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="delay", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'delay' (original: 'delay') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="keypressed", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="boolean", var_type=VOID)
Changing type of AST node from VOID to BOOLEAN
[DEBUG] addProcedure: Added procedure 'keypressed' (original: 'keypressed') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="low", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'low' (original: 'low') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="high", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'high' (original: 'high') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="succ", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'succ' (original: 'succ') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="inttostr", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="string", var_type=VOID)
Changing type of AST node from VOID to STRING
[DEBUG] addProcedure: Added procedure 'inttostr' (original: 'inttostr') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="screencols", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] addProcedure: Added procedure 'screencols' (original: 'screencols') to table.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="screenrows", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] addProcedure: Added procedure 'screenrows' (original: 'screenrows') to table.

--- Build AST Before Execution START---
[DEBUG] eat(): Called from buildProgramAST() - Expecting: PROGRAM, Got: PROGRAM ('program') at Line 1, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="testarrayconst", var_type=VOID)
[DEBUG] eat(): Called from buildProgramAST() - Expecting: IDENTIFIER, Got: IDENTIFIER ('testarrayconst') at Line 1, Col 23
[DEBUG] eat(): Called from buildProgramAST() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 1, Col 24
Lexer: Tokenized 'uses' as TOKEN_USES
[DEBUG] eat(): Called from buildProgramAST() - Expecting: USES, Got: USES ('uses') at Line 2, Col 5
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=USES_CLAUSE, var_type=VOID)
[DEBUG] eat(): Called from buildProgramAST() - Expecting: IDENTIFIER, Got: IDENTIFIER ('crt') at Line 2, Col 9
[DEBUG] eat(): Called from buildProgramAST() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 2, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=LIST, var_type=VOID)
Lexer: Tokenized 'uses' as TOKEN_UNIT
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=UNIT, token="unit", var_type=VOID)
[DEBUG] eat(): Called from unitParser() - Expecting: UNIT, Got: UNIT ('unit') at Line 1, Col 5
[DEBUG] eat(): Called from unitParser() - Expecting: IDENTIFIER, Got: IDENTIFIER ('crt') at Line 1, Col 9
[DEBUG] eat(): Called from unitParser() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 1, Col 10
[DEBUG] eat(): Called from unitParser() - Expecting: INTERFACE, Got: INTERFACE ('interface') at Line 3, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from declarations() - Expecting: CONST, Got: CONST ('const') at Line 5, Col 6
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 6, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="esc", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 6, Col 8
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('chr')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_CALL, token="chr", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: IDENTIFIER, Got: IDENTIFIER ('chr') at Line 6, Col 12
[DEBUG] eat(): Called from procedureCall() - Expecting: LPAREN, Got: LPAREN ('(') at Line 6, Col 13
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('27')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('27') at Line 6, Col 15
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="27", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=NUMBER, token="27", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="27", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: RPAREN, Got: RPAREN (')') at Line 6, Col 16
Node(type=PROCEDURE_CALL, token="chr", var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="27", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=PROCEDURE_CALL, token="chr", var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="27", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 6, Col 17
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('black') at Line 8, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="black", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 8, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('0')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('0') at Line 8, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 8, Col 20
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('blue') at Line 9, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="blue", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 9, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 9, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 9, Col 20
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('green') at Line 10, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="green", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 10, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('2')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('2') at Line 10, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="2", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="2", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 10, Col 20
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('cyan') at Line 11, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="cyan", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 11, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('3')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('3') at Line 11, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="3", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="3", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 11, Col 20
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('red') at Line 12, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="red", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 12, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('4')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('4') at Line 12, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 12, Col 20
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('magenta') at Line 13, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="magenta", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 13, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('5')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('5') at Line 13, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="5", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="5", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 13, Col 20
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('brown') at Line 14, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="brown", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 14, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('6')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('6') at Line 14, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="6", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="6", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 14, Col 20
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('lightgray') at Line 15, Col 12
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="lightgray", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 15, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('7')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('7') at Line 15, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="7", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="7", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 15, Col 20
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('darkgray') at Line 16, Col 11
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="darkgray", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 16, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('8')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('8') at Line 16, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="8", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="8", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 16, Col 20
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('lightblue') at Line 17, Col 12
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="lightblue", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 17, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('9')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('9') at Line 17, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="9", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="9", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 17, Col 20
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('lightgreen') at Line 18, Col 13
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="lightgreen", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 18, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('10')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('10') at Line 18, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 18, Col 21
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('lightcyan') at Line 19, Col 12
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="lightcyan", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 19, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('11')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('11') at Line 19, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="11", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="11", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 19, Col 21
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('lightred') at Line 20, Col 11
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="lightred", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 20, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('12')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('12') at Line 20, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="12", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="12", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 20, Col 21
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('lightmagenta') at Line 21, Col 15
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="lightmagenta", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 21, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('13')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('13') at Line 21, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="13", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="13", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 21, Col 21
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('yellow') at Line 22, Col 9
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="yellow", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 22, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('14')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('14') at Line 22, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="14", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="14", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 22, Col 21
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('white') at Line 23, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="white", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 23, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('15')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('15') at Line 23, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="15", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="15", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 23, Col 21
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('blink') at Line 24, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="blink", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 24, Col 17
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('128')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('128') at Line 24, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="128", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="128", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 24, Col 22
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 27, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('clrscr') at Line 27, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="clrscr", var_type=VOID)
Node(type=PROCEDURE_DECL, token="clrscr", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'clrscr' (original: 'clrscr') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 27, Col 18
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 28, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('gotoxy') at Line 28, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="gotoxy", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 28, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x') at Line 28, Col 19
[DEBUG] eat(): Called from paramList() - Expecting: COMMA, Got: COMMA (',') at Line 28, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y') at Line 28, Col 22
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 28, Col 23
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 28, Col 31
Changing type of AST node from VOID to INTEGER
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (2):
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 28, Col 32
Node(type=PROCEDURE_DECL, token="gotoxy", var_type=VOID)
  Children (2):
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'gotoxy' (original: 'gotoxy') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 28, Col 33
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 29, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('clreol') at Line 29, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="clreol", var_type=VOID)
Node(type=PROCEDURE_DECL, token="clreol", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'clreol' (original: 'clreol') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 29, Col 18
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 30, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('textcolor') at Line 30, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="textcolor", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 30, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 30, Col 26
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 30, Col 27
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="byte", var_type=VOID)
Changing type of AST node from VOID to BYTE
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('byte') at Line 30, Col 32
Changing type of AST node from VOID to BYTE
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 30, Col 33
Node(type=PROCEDURE_DECL, token="textcolor", var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'textcolor' (original: 'textcolor') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 30, Col 34
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 31, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('textbackground') at Line 31, Col 25
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="textbackground", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 31, Col 26
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 31, Col 31
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 31, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="byte", var_type=VOID)
Changing type of AST node from VOID to BYTE
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('byte') at Line 31, Col 37
Changing type of AST node from VOID to BYTE
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 31, Col 38
Node(type=PROCEDURE_DECL, token="textbackground", var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'textbackground' (original: 'textbackground') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 31, Col 39
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 32, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('delay') at Line 32, Col 16
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="delay", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 32, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="ms", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('ms') at Line 32, Col 19
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 32, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="word", var_type=VOID)
Changing type of AST node from VOID to WORD
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('word') at Line 32, Col 25
Changing type of AST node from VOID to WORD
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="ms", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=WORD)
      Children (1):
        Node(type=VARIABLE, token="ms", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 32, Col 26
Node(type=PROCEDURE_DECL, token="delay", var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=WORD)
      Children (1):
        Node(type=VARIABLE, token="ms", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'delay' (original: 'delay') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 32, Col 27
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 33, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('hidecursor') at Line 33, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="hidecursor", var_type=VOID)
Node(type=PROCEDURE_DECL, token="hidecursor", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'hidecursor' (original: 'hidecursor') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 33, Col 22
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 34, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('showcursor') at Line 34, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="showcursor", var_type=VOID)
Node(type=PROCEDURE_DECL, token="showcursor", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'showcursor' (original: 'showcursor') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 34, Col 22
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 35, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('delline') at Line 35, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="delline", var_type=VOID)
Node(type=PROCEDURE_DECL, token="delline", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'delline' (original: 'delline') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 35, Col 19
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 36, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('insline') at Line 36, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="insline", var_type=VOID)
Node(type=PROCEDURE_DECL, token="insline", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'insline' (original: 'insline') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 36, Col 19
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 37, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('beep') at Line 37, Col 15
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="beep", var_type=VOID)
Node(type=PROCEDURE_DECL, token="beep", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'beep' (original: 'beep') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 37, Col 16
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 38, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('normvideo') at Line 38, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="normvideo", var_type=VOID)
Node(type=PROCEDURE_DECL, token="normvideo", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'normvideo' (original: 'normvideo') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 38, Col 21
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 39, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('highvideo') at Line 39, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="highvideo", var_type=VOID)
Node(type=PROCEDURE_DECL, token="highvideo", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'highvideo' (original: 'highvideo') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 39, Col 21
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 40, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('lowvideo') at Line 40, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="lowvideo", var_type=VOID)
Node(type=PROCEDURE_DECL, token="lowvideo", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'lowvideo' (original: 'lowvideo') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 40, Col 20
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 41, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('window') at Line 41, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="window", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 41, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x1", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x1') at Line 41, Col 20
[DEBUG] eat(): Called from paramList() - Expecting: COMMA, Got: COMMA (',') at Line 41, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y1", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y1') at Line 41, Col 24
[DEBUG] eat(): Called from paramList() - Expecting: COMMA, Got: COMMA (',') at Line 41, Col 25
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x2", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x2') at Line 41, Col 28
[DEBUG] eat(): Called from paramList() - Expecting: COMMA, Got: COMMA (',') at Line 41, Col 29
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y2", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y2') at Line 41, Col 32
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 41, Col 33
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 41, Col 41
Changing type of AST node from VOID to INTEGER
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x2", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y2", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (4):
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x1", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y1", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x2", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y2", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 41, Col 42
Node(type=PROCEDURE_DECL, token="window", var_type=VOID)
  Children (4):
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x1", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y1", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x2", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y2", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'window' (original: 'window') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 41, Col 43
[DEBUG] eat(): Called from functionDeclaration() - Expecting: FUNCTION, Got: FUNCTION ('function') at Line 42, Col 9
[DEBUG] eat(): Called from functionDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wherex') at Line 42, Col 16
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="wherex", var_type=VOID)
[DEBUG] eat(): Called from functionDeclaration() - Expecting: COLON, Got: COLON (':') at Line 42, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 42, Col 25
Node(type=FUNCTION_DECL, token="wherex", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="integer", var_type=INTEGER)
[DEBUG] addProcedure: Added procedure 'wherex' (original: 'wherex') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 42, Col 26
[DEBUG] eat(): Called from functionDeclaration() - Expecting: FUNCTION, Got: FUNCTION ('function') at Line 43, Col 9
[DEBUG] eat(): Called from functionDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wherey') at Line 43, Col 16
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="wherey", var_type=VOID)
[DEBUG] eat(): Called from functionDeclaration() - Expecting: COLON, Got: COLON (':') at Line 43, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 43, Col 25
Node(type=FUNCTION_DECL, token="wherey", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="integer", var_type=INTEGER)
[DEBUG] addProcedure: Added procedure 'wherey' (original: 'wherey') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 43, Col 26
[DEBUG] eat(): Called from functionDeclaration() - Expecting: FUNCTION, Got: FUNCTION ('function') at Line 44, Col 9
[DEBUG] eat(): Called from functionDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('keypressed') at Line 44, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="keypressed", var_type=VOID)
[DEBUG] eat(): Called from functionDeclaration() - Expecting: COLON, Got: COLON (':') at Line 44, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="boolean", var_type=VOID)
Changing type of AST node from VOID to BOOLEAN
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('boolean') at Line 44, Col 29
Node(type=FUNCTION_DECL, token="keypressed", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="boolean", var_type=BOOLEAN)
[DEBUG] addProcedure: Added procedure 'keypressed' (original: 'keypressed') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 44, Col 30
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 47, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('invertcolors') at Line 47, Col 23
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="invertcolors", var_type=VOID)
Node(type=PROCEDURE_DECL, token="invertcolors", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'invertcolors' (original: 'invertcolors') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 47, Col 24
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 48, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('normalcolors') at Line 48, Col 23
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="normalcolors", var_type=VOID)
Node(type=PROCEDURE_DECL, token="normalcolors", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'normalcolors' (original: 'normalcolors') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 48, Col 24
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 49, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('textcolore') at Line 49, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="textcolore", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 49, Col 22
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 49, Col 27
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 49, Col 28
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="byte", var_type=VOID)
Changing type of AST node from VOID to BYTE
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('byte') at Line 49, Col 33
Changing type of AST node from VOID to BYTE
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 49, Col 34
Node(type=PROCEDURE_DECL, token="textcolore", var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'textcolore' (original: 'textcolore') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 49, Col 35
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 50, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('textbackgrounde') at Line 50, Col 26
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="textbackgrounde", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 50, Col 27
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 50, Col 32
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 50, Col 33
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="byte", var_type=VOID)
Changing type of AST node from VOID to BYTE
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('byte') at Line 50, Col 38
Changing type of AST node from VOID to BYTE
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 50, Col 39
Node(type=PROCEDURE_DECL, token="textbackgrounde", var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'textbackgrounde' (original: 'textbackgrounde') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 50, Col 40
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 51, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('savecursor') at Line 51, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="savecursor", var_type=VOID)
Node(type=PROCEDURE_DECL, token="savecursor", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'savecursor' (original: 'savecursor') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 51, Col 22
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 52, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('restorecursor') at Line 52, Col 24
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="restorecursor", var_type=VOID)
Node(type=PROCEDURE_DECL, token="restorecursor", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'restorecursor' (original: 'restorecursor') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 52, Col 25
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 53, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('boldtext') at Line 53, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="boldtext", var_type=VOID)
Node(type=PROCEDURE_DECL, token="boldtext", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'boldtext' (original: 'boldtext') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 53, Col 20
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 54, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('underlinetext') at Line 54, Col 24
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="underlinetext", var_type=VOID)
Node(type=PROCEDURE_DECL, token="underlinetext", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'underlinetext' (original: 'underlinetext') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 54, Col 25
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 55, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('blinktext') at Line 55, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="blinktext", var_type=VOID)
Node(type=PROCEDURE_DECL, token="blinktext", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'blinktext' (original: 'blinktext') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 55, Col 21
[DEBUG] eat(): Called from declarations() - Expecting: VAR, Got: VAR ('var') at Line 57, Col 4
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winleft", var_type=VOID)
[DEBUG] eat(): Called from varDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winleft') at Line 59, Col 10
[DEBUG] eat(): Called from varDeclaration() - Expecting: COMMA, Got: COMMA (',') at Line 59, Col 11
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="wintop", var_type=VOID)
[DEBUG] eat(): Called from varDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wintop') at Line 59, Col 18
[DEBUG] eat(): Called from varDeclaration() - Expecting: COMMA, Got: COMMA (',') at Line 59, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winright", var_type=VOID)
[DEBUG] eat(): Called from varDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winright') at Line 59, Col 28
[DEBUG] eat(): Called from varDeclaration() - Expecting: COMMA, Got: COMMA (',') at Line 59, Col 29
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winbottom", var_type=VOID)
[DEBUG] eat(): Called from varDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winbottom') at Line 59, Col 39
[DEBUG] eat(): Called from varDeclaration() - Expecting: COLON, Got: COLON (':') at Line 59, Col 40
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 59, Col 48
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 59, Col 49
DEBUG: Builtin procedure 'chr' returned type STRING
[DEBUG] buildUnitSymbolTable: Found VAR 'winleft' with type INTEGER in interface.
[DEBUG] buildUnitSymbolTable: Found VAR 'wintop' with type INTEGER in interface.
[DEBUG] buildUnitSymbolTable: Found VAR 'winright' with type INTEGER in interface.
[DEBUG] buildUnitSymbolTable: Found VAR 'winbottom' with type INTEGER in interface.
[DEBUG] eat(): Called from unitParser() - Expecting: IMPLEMENTATION, Got: IMPLEMENTATION ('implementation') at Line 63, Col 15
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from declarations() - Expecting: CONST, Got: CONST ('const') at Line 65, Col 6
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foo') at Line 66, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="foo", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 66, Col 15
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('128')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('128') at Line 66, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="128", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="128", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 66, Col 20
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 70, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('clrscr') at Line 70, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="clrscr", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 70, Col 18
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 71, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 77, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 77, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 77, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 77, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[2J')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[2J') at Line 77, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[2J", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[2J", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 77, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[2J", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[2J", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 77, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: IDENTIFIER, Got: IDENTIFIER ('gotoxy') at Line 78, Col 9
[DEBUG] eat(): Called from procedureCall() - Expecting: LPAREN, Got: LPAREN ('(') at Line 78, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('winleft')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winleft", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winleft') at Line 78, Col 17
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="winleft", var_type=VOID)
[DEBUG] eat(): Called from exprList() - Expecting: COMMA, Got: COMMA (',') at Line 78, Col 18
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('wintop')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="wintop", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wintop') at Line 78, Col 25
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=VARIABLE, token="wintop", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="winleft", var_type=VOID)
    Node(type=VARIABLE, token="wintop", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: RPAREN, Got: RPAREN (')') at Line 78, Col 26
Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="winleft", var_type=VOID)
    Node(type=VARIABLE, token="wintop", var_type=VOID)
Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="winleft", var_type=VOID)
    Node(type=VARIABLE, token="wintop", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 78, Col 27
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 79, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (2):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[2J", var_type=VOID)
    Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="winleft", var_type=VOID)
        Node(type=VARIABLE, token="wintop", var_type=VOID)
Node(type=PROCEDURE_DECL, token="clrscr", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (2):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[2J", var_type=VOID)
        Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="winleft", var_type=VOID)
            Node(type=VARIABLE, token="wintop", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'clrscr' (original: 'clrscr') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 79, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 82, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('gotoxy') at Line 82, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="gotoxy", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 82, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x') at Line 82, Col 19
[DEBUG] eat(): Called from paramList() - Expecting: COMMA, Got: COMMA (',') at Line 82, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y') at Line 82, Col 22
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 82, Col 23
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 82, Col 31
Changing type of AST node from VOID to INTEGER
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (2):
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 82, Col 32
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 82, Col 33
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: VAR, Got: VAR ('var') at Line 83, Col 4
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="absx", var_type=VOID)
[DEBUG] eat(): Called from varDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('absx') at Line 84, Col 7
[DEBUG] eat(): Called from varDeclaration() - Expecting: COMMA, Got: COMMA (',') at Line 84, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="absy", var_type=VOID)
[DEBUG] eat(): Called from varDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('absy') at Line 84, Col 13
[DEBUG] eat(): Called from varDeclaration() - Expecting: COLON, Got: COLON (':') at Line 84, Col 14
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 84, Col 22
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 84, Col 23
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 85, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="absx", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('absx') at Line 87, Col 7
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 87, Col 10
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('winleft')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winleft", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winleft') at Line 87, Col 18
[DEBUG_TERM] After Factor: Next token is PLUS ('+')
[DEBUG] eat(): Called from expr() - Expecting: PLUS, Got: PLUS ('+') at Line 87, Col 20
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('x')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x') at Line 87, Col 22
[DEBUG_TERM] After Factor: Next token is MINUS ('-')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BINARY_OP, token="+", var_type=VOID)
[DEBUG] eat(): Called from expr() - Expecting: MINUS, Got: MINUS ('-') at Line 87, Col 24
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 87, Col 26
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BINARY_OP, token="-", var_type=VOID)
Node(type=BINARY_OP, token="-", var_type=VOID)
  Left:
    Node(type=BINARY_OP, token="+", var_type=VOID)
      Left:
        Node(type=VARIABLE, token="winleft", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="x", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
Node(type=BINARY_OP, token="-", var_type=VOID)
  Left:
    Node(type=BINARY_OP, token="+", var_type=VOID)
      Left:
        Node(type=VARIABLE, token="winleft", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="x", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="absx", var_type=VOID)
  Right:
    Node(type=BINARY_OP, token="-", var_type=VOID)
      Left:
        Node(type=BINARY_OP, token="+", var_type=VOID)
          Left:
            Node(type=VARIABLE, token="winleft", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="x", var_type=VOID)
      Right:
        Node(type=NUMBER, token="1", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="absx", var_type=VOID)
  Right:
    Node(type=BINARY_OP, token="-", var_type=VOID)
      Left:
        Node(type=BINARY_OP, token="+", var_type=VOID)
          Left:
            Node(type=VARIABLE, token="winleft", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="x", var_type=VOID)
      Right:
        Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 87, Col 27
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="absy", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('absy') at Line 88, Col 7
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 88, Col 10
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('wintop')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="wintop", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wintop') at Line 88, Col 17
[DEBUG_TERM] After Factor: Next token is PLUS ('+')
[DEBUG] eat(): Called from expr() - Expecting: PLUS, Got: PLUS ('+') at Line 88, Col 19
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('y')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y') at Line 88, Col 21
[DEBUG_TERM] After Factor: Next token is MINUS ('-')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BINARY_OP, token="+", var_type=VOID)
[DEBUG] eat(): Called from expr() - Expecting: MINUS, Got: MINUS ('-') at Line 88, Col 23
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 88, Col 25
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BINARY_OP, token="-", var_type=VOID)
Node(type=BINARY_OP, token="-", var_type=VOID)
  Left:
    Node(type=BINARY_OP, token="+", var_type=VOID)
      Left:
        Node(type=VARIABLE, token="wintop", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="y", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
Node(type=BINARY_OP, token="-", var_type=VOID)
  Left:
    Node(type=BINARY_OP, token="+", var_type=VOID)
      Left:
        Node(type=VARIABLE, token="wintop", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="y", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="absy", var_type=VOID)
  Right:
    Node(type=BINARY_OP, token="-", var_type=VOID)
      Left:
        Node(type=BINARY_OP, token="+", var_type=VOID)
          Left:
            Node(type=VARIABLE, token="wintop", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="y", var_type=VOID)
      Right:
        Node(type=NUMBER, token="1", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="absy", var_type=VOID)
  Right:
    Node(type=BINARY_OP, token="-", var_type=VOID)
      Left:
        Node(type=BINARY_OP, token="+", var_type=VOID)
          Left:
            Node(type=VARIABLE, token="wintop", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="y", var_type=VOID)
      Right:
        Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 88, Col 26
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 97, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 97, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 97, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 97, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[') at Line 97, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="[", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 97, Col 18
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('absy')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="absy", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('absy') at Line 97, Col 23
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="absy", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 97, Col 24
[DEBUG_FACTOR] Entry: Current token is STRING_CONST (';')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST (';') at Line 97, Col 28
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token=";", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token=";", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 97, Col 29
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('absx')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="absx", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('absx') at Line 97, Col 34
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="absx", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 97, Col 35
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('H')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('H') at Line 97, Col 39
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="H", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="H", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 97, Col 40
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (6):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[", var_type=VOID)
    Node(type=VARIABLE, token="absy", var_type=VOID)
    Node(type=STRING, token=";", var_type=VOID)
    Node(type=VARIABLE, token="absx", var_type=VOID)
    Node(type=STRING, token="H", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (6):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[", var_type=VOID)
    Node(type=VARIABLE, token="absy", var_type=VOID)
    Node(type=STRING, token=";", var_type=VOID)
    Node(type=VARIABLE, token="absx", var_type=VOID)
    Node(type=STRING, token="H", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 97, Col 41
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 98, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (3):
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="absx", var_type=VOID)
      Right:
        Node(type=BINARY_OP, token="-", var_type=VOID)
          Left:
            Node(type=BINARY_OP, token="+", var_type=VOID)
              Left:
                Node(type=VARIABLE, token="winleft", var_type=VOID)
              Right:
                Node(type=VARIABLE, token="x", var_type=VOID)
          Right:
            Node(type=NUMBER, token="1", var_type=VOID)
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="absy", var_type=VOID)
      Right:
        Node(type=BINARY_OP, token="-", var_type=VOID)
          Left:
            Node(type=BINARY_OP, token="+", var_type=VOID)
              Left:
                Node(type=VARIABLE, token="wintop", var_type=VOID)
              Right:
                Node(type=VARIABLE, token="y", var_type=VOID)
          Right:
            Node(type=NUMBER, token="1", var_type=VOID)
    Node(type=WRITE, var_type=VOID)
      Children (6):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[", var_type=VOID)
        Node(type=VARIABLE, token="absy", var_type=VOID)
        Node(type=STRING, token=";", var_type=VOID)
        Node(type=VARIABLE, token="absx", var_type=VOID)
        Node(type=STRING, token="H", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BLOCK, var_type=VOID)
Node(type=PROCEDURE_DECL, token="gotoxy", var_type=VOID)
  Right:
    Node(type=BLOCK, var_type=VOID)
      Children (2):
        Node(type=COMPOUND, var_type=VOID)
          Children (1):
            Node(type=VAR_DECL, var_type=INTEGER)
              Right:
                Node(type=VARIABLE, token="integer", var_type=INTEGER)
              Children (2):
                Node(type=VARIABLE, token="absx", var_type=VOID)
                Node(type=VARIABLE, token="absy", var_type=VOID)
        Node(type=COMPOUND, var_type=VOID)
          Children (3):
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="absx", var_type=VOID)
              Right:
                Node(type=BINARY_OP, token="-", var_type=VOID)
                  Left:
                    Node(type=BINARY_OP, token="+", var_type=VOID)
                      Left:
                        Node(type=VARIABLE, token="winleft", var_type=VOID)
                      Right:
                        Node(type=VARIABLE, token="x", var_type=VOID)
                  Right:
                    Node(type=NUMBER, token="1", var_type=VOID)
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="absy", var_type=VOID)
              Right:
                Node(type=BINARY_OP, token="-", var_type=VOID)
                  Left:
                    Node(type=BINARY_OP, token="+", var_type=VOID)
                      Left:
                        Node(type=VARIABLE, token="wintop", var_type=VOID)
                      Right:
                        Node(type=VARIABLE, token="y", var_type=VOID)
                  Right:
                    Node(type=NUMBER, token="1", var_type=VOID)
            Node(type=WRITE, var_type=VOID)
              Children (6):
                Node(type=VARIABLE, token="esc", var_type=VOID)
                Node(type=STRING, token="[", var_type=VOID)
                Node(type=VARIABLE, token="absy", var_type=VOID)
                Node(type=STRING, token=";", var_type=VOID)
                Node(type=VARIABLE, token="absx", var_type=VOID)
                Node(type=STRING, token="H", var_type=VOID)
  Children (2):
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'gotoxy' (original: 'gotoxy') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 98, Col 5
[DEBUG] eat(): Called from functionDeclaration() - Expecting: FUNCTION, Got: FUNCTION ('function') at Line 101, Col 9
[DEBUG] eat(): Called from functionDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 101, Col 24
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from functionDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 101, Col 25
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 101, Col 30
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 101, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="byte", var_type=VOID)
Changing type of AST node from VOID to BYTE
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('byte') at Line 101, Col 36
Changing type of AST node from VOID to BYTE
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from functionDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 101, Col 37
[DEBUG] eat(): Called from functionDeclaration() - Expecting: COLON, Got: COLON (':') at Line 101, Col 38
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="string", var_type=VOID)
Changing type of AST node from VOID to STRING
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('string') at Line 101, Col 45
[DEBUG] eat(): Called from functionDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 101, Col 46
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 103, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: CASE, Got: CASE ('case') at Line 104, Col 7
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('color')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 104, Col 13
[DEBUG_TERM] After Factor: Next token is OF ('of')
Node(type=VARIABLE, token="color", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE, var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: OF, Got: OF ('of') at Line 104, Col 16
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('0')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('0') at Line 105, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 105, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 105, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 105, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('30')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('30') at Line 105, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="30", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="30", var_type=VOID)
Node(type=STRING, token="30", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="30", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="30", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 105, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 106, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 106, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 106, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 106, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('34')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('34') at Line 106, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="34", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="34", var_type=VOID)
Node(type=STRING, token="34", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="34", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="34", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 106, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('2')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('2') at Line 107, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="2", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="2", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 107, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 107, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 107, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('32')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('32') at Line 107, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="32", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="32", var_type=VOID)
Node(type=STRING, token="32", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="32", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="32", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 107, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('3')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('3') at Line 108, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="3", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="3", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 108, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 108, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 108, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('36')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('36') at Line 108, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="36", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="36", var_type=VOID)
Node(type=STRING, token="36", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="36", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="36", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 108, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('4')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('4') at Line 109, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 109, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 109, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 109, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('31')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('31') at Line 109, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="31", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="31", var_type=VOID)
Node(type=STRING, token="31", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="31", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="31", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 109, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('5')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('5') at Line 110, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="5", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="5", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 110, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 110, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 110, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('35')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('35') at Line 110, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="35", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="35", var_type=VOID)
Node(type=STRING, token="35", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="35", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="35", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 110, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('6')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('6') at Line 111, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="6", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="6", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 111, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 111, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 111, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('33')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('33') at Line 111, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="33", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="33", var_type=VOID)
Node(type=STRING, token="33", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="33", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="33", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 111, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('7')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('7') at Line 112, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="7", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="7", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 112, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 112, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 112, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('37')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('37') at Line 112, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="37", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="37", var_type=VOID)
Node(type=STRING, token="37", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="37", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="37", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 112, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('8')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('8') at Line 113, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="8", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="8", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 113, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 113, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 113, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('90')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('90') at Line 113, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="90", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="90", var_type=VOID)
Node(type=STRING, token="90", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="90", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="90", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 113, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('9')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('9') at Line 114, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="9", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="9", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 114, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 114, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 114, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('94')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('94') at Line 114, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="94", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="94", var_type=VOID)
Node(type=STRING, token="94", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="94", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="94", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 114, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('10')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('10') at Line 115, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 115, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 115, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 115, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('92')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('92') at Line 115, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="92", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="92", var_type=VOID)
Node(type=STRING, token="92", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="92", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="92", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 115, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('11')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('11') at Line 116, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="11", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="11", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 116, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 116, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 116, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('96')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('96') at Line 116, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="96", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="96", var_type=VOID)
Node(type=STRING, token="96", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="96", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="96", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 116, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('12')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('12') at Line 117, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="12", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="12", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 117, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 117, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 117, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('91')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('91') at Line 117, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="91", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="91", var_type=VOID)
Node(type=STRING, token="91", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="91", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="91", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 117, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('13')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('13') at Line 118, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="13", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="13", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 118, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 118, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 118, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('95')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('95') at Line 118, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="95", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="95", var_type=VOID)
Node(type=STRING, token="95", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="95", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="95", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 118, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('14')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('14') at Line 119, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="14", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="14", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 119, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 119, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 119, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('93')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('93') at Line 119, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="93", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="93", var_type=VOID)
Node(type=STRING, token="93", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="93", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="93", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 119, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('15')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('15') at Line 120, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="15", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="15", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 120, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 120, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 120, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('97')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('97') at Line 120, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="97", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="97", var_type=VOID)
Node(type=STRING, token="97", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="97", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="97", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 120, Col 32
[DEBUG] eat(): Called from caseStatement() - Expecting: ELSE, Got: ELSE ('else') at Line 121, Col 9
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 121, Col 24
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 121, Col 27
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('37')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('37') at Line 121, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="37", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="37", var_type=VOID)
Node(type=STRING, token="37", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="37", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="37", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 121, Col 33
[DEBUG] eat(): Called from caseStatement() - Expecting: END, Got: END ('end') at Line 122, Col 6
Node(type=CASE, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="color", var_type=VOID)
  Extra:
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
      Right:
        Node(type=STRING, token="37", var_type=VOID)
  Children (16):
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="0", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="30", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="1", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="34", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="2", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="32", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="3", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="36", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="4", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="31", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="5", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="35", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="6", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="33", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="7", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="37", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="8", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="90", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="9", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="94", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="10", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="92", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="11", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="96", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="12", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="91", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="13", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="95", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="14", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="93", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="15", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="97", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 122, Col 7
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 123, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=CASE, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="color", var_type=VOID)
      Extra:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="37", var_type=VOID)
      Children (16):
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="0", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="30", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="1", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="34", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="2", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="32", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="3", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="36", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="4", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="31", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="5", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="35", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="6", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="33", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="7", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="37", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="8", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="90", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="9", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="94", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="10", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="92", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="11", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="96", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="12", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="91", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="13", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="95", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="14", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="93", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="15", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="97", var_type=VOID)
Node(type=FUNCTION_DECL, token="foregroundcode", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="string", var_type=STRING)
  Extra:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=CASE, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="color", var_type=VOID)
          Extra:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="37", var_type=VOID)
          Children (16):
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="0", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="30", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="1", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="34", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="2", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="32", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="3", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="36", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="4", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="31", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="5", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="35", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="6", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="33", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="7", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="37", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="8", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="90", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="9", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="94", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="10", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="92", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="11", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="96", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="12", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="91", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="13", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="95", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="14", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="93", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="15", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="foregroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="97", var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'foregroundcode' (original: 'foregroundcode') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 123, Col 5
[DEBUG] eat(): Called from functionDeclaration() - Expecting: FUNCTION, Got: FUNCTION ('function') at Line 127, Col 9
[DEBUG] eat(): Called from functionDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 127, Col 24
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from functionDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 127, Col 25
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 127, Col 30
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 127, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="byte", var_type=VOID)
Changing type of AST node from VOID to BYTE
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('byte') at Line 127, Col 36
Changing type of AST node from VOID to BYTE
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from functionDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 127, Col 37
[DEBUG] eat(): Called from functionDeclaration() - Expecting: COLON, Got: COLON (':') at Line 127, Col 38
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="string", var_type=VOID)
Changing type of AST node from VOID to STRING
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('string') at Line 127, Col 45
[DEBUG] eat(): Called from functionDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 127, Col 46
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 129, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: CASE, Got: CASE ('case') at Line 130, Col 7
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('color')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 130, Col 13
[DEBUG_TERM] After Factor: Next token is OF ('of')
Node(type=VARIABLE, token="color", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE, var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: OF, Got: OF ('of') at Line 130, Col 16
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('0')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('0') at Line 131, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 131, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 131, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 131, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('40')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('40') at Line 131, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="40", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="40", var_type=VOID)
Node(type=STRING, token="40", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="40", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="40", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 131, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 132, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 132, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 132, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 132, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('44')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('44') at Line 132, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="44", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="44", var_type=VOID)
Node(type=STRING, token="44", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="44", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="44", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 132, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('2')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('2') at Line 133, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="2", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="2", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 133, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 133, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 133, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('42')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('42') at Line 133, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="42", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="42", var_type=VOID)
Node(type=STRING, token="42", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="42", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="42", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 133, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('3')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('3') at Line 134, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="3", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="3", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 134, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 134, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 134, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('46')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('46') at Line 134, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="46", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="46", var_type=VOID)
Node(type=STRING, token="46", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="46", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="46", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 134, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('4')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('4') at Line 135, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 135, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 135, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 135, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('41')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('41') at Line 135, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="41", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="41", var_type=VOID)
Node(type=STRING, token="41", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="41", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="41", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 135, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('5')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('5') at Line 136, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="5", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="5", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 136, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 136, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 136, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('45')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('45') at Line 136, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="45", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="45", var_type=VOID)
Node(type=STRING, token="45", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="45", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="45", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 136, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('6')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('6') at Line 137, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="6", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="6", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 137, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 137, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 137, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('43')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('43') at Line 137, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="43", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="43", var_type=VOID)
Node(type=STRING, token="43", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="43", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="43", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 137, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('7')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('7') at Line 138, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="7", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="7", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 138, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 138, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 138, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('47')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('47') at Line 138, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="47", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="47", var_type=VOID)
Node(type=STRING, token="47", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="47", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="47", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 138, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('8')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('8') at Line 139, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="8", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="8", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 139, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 139, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 139, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('100')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('100') at Line 139, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="100", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="100", var_type=VOID)
Node(type=STRING, token="100", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="100", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="100", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 139, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('9')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('9') at Line 140, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="9", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="9", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 140, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 140, Col 22
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 140, Col 25
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('104')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('104') at Line 140, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="104", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="104", var_type=VOID)
Node(type=STRING, token="104", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="104", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="104", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 140, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('10')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('10') at Line 141, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 141, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 141, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 141, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('102')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('102') at Line 141, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="102", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="102", var_type=VOID)
Node(type=STRING, token="102", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="102", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="102", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 141, Col 33
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('11')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('11') at Line 142, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="11", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="11", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 142, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 142, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 142, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('106')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('106') at Line 142, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="106", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="106", var_type=VOID)
Node(type=STRING, token="106", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="106", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="106", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 142, Col 33
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('12')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('12') at Line 143, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="12", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="12", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 143, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 143, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 143, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('101')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('101') at Line 143, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="101", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="101", var_type=VOID)
Node(type=STRING, token="101", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="101", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="101", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 143, Col 33
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('13')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('13') at Line 144, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="13", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="13", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 144, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 144, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 144, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('105')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('105') at Line 144, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="105", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="105", var_type=VOID)
Node(type=STRING, token="105", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="105", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="105", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 144, Col 33
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('14')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('14') at Line 145, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="14", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="14", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 145, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 145, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 145, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('103')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('103') at Line 145, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="103", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="103", var_type=VOID)
Node(type=STRING, token="103", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="103", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="103", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 145, Col 33
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CASE_BRANCH, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('15')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('15') at Line 146, Col 7
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="15", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COLON (':')
Node(type=NUMBER, token="15", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: COLON, Got: COLON (':') at Line 146, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 146, Col 23
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 146, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('107')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('107') at Line 146, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="107", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="107", var_type=VOID)
Node(type=STRING, token="107", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="107", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="107", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 146, Col 33
[DEBUG] eat(): Called from caseStatement() - Expecting: ELSE, Got: ELSE ('else') at Line 147, Col 9
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 147, Col 24
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 147, Col 27
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('40')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('40') at Line 147, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="40", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="40", var_type=VOID)
Node(type=STRING, token="40", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="40", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=STRING, token="40", var_type=VOID)
[DEBUG] eat(): Called from caseStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 147, Col 33
[DEBUG] eat(): Called from caseStatement() - Expecting: END, Got: END ('end') at Line 148, Col 6
Node(type=CASE, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="color", var_type=VOID)
  Extra:
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
      Right:
        Node(type=STRING, token="40", var_type=VOID)
  Children (16):
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="0", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="40", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="1", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="44", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="2", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="42", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="3", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="46", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="4", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="41", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="5", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="45", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="6", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="43", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="7", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="47", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="8", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="100", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="9", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="104", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="10", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="102", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="11", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="106", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="12", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="101", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="13", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="105", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="14", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="103", var_type=VOID)
    Node(type=CASE_BRANCH, var_type=VOID)
      Left:
        Node(type=NUMBER, token="15", var_type=VOID)
      Right:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="107", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 148, Col 7
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 149, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=CASE, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="color", var_type=VOID)
      Extra:
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
          Right:
            Node(type=STRING, token="40", var_type=VOID)
      Children (16):
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="0", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="40", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="1", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="44", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="2", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="42", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="3", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="46", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="4", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="41", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="5", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="45", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="6", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="43", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="7", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="47", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="8", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="100", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="9", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="104", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="10", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="102", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="11", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="106", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="12", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="101", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="13", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="105", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="14", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="103", var_type=VOID)
        Node(type=CASE_BRANCH, var_type=VOID)
          Left:
            Node(type=NUMBER, token="15", var_type=VOID)
          Right:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="107", var_type=VOID)
Node(type=FUNCTION_DECL, token="backgroundcode", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="string", var_type=STRING)
  Extra:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=CASE, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="color", var_type=VOID)
          Extra:
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
              Right:
                Node(type=STRING, token="40", var_type=VOID)
          Children (16):
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="0", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="40", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="1", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="44", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="2", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="42", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="3", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="46", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="4", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="41", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="5", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="45", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="6", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="43", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="7", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="47", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="8", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="100", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="9", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="104", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="10", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="102", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="11", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="106", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="12", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="101", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="13", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="105", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="14", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="103", var_type=VOID)
            Node(type=CASE_BRANCH, var_type=VOID)
              Left:
                Node(type=NUMBER, token="15", var_type=VOID)
              Right:
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="backgroundcode", var_type=VOID)
                  Right:
                    Node(type=STRING, token="107", var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'backgroundcode' (original: 'backgroundcode') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 149, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 151, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('textcolor') at Line 151, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="textcolor", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 151, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 151, Col 26
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 151, Col 27
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="byte", var_type=VOID)
Changing type of AST node from VOID to BYTE
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('byte') at Line 151, Col 32
Changing type of AST node from VOID to BYTE
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 151, Col 33
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 151, Col 34
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 153, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 154, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 154, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 154, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 154, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[') at Line 154, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="[", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 154, Col 18
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('foregroundcode')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_CALL, token="foregroundcode", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: IDENTIFIER, Got: IDENTIFIER ('foregroundcode') at Line 154, Col 33
[DEBUG] eat(): Called from procedureCall() - Expecting: LPAREN, Got: LPAREN ('(') at Line 154, Col 34
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('color')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 154, Col 39
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: RPAREN, Got: RPAREN (')') at Line 154, Col 40
Node(type=PROCEDURE_CALL, token="foregroundcode", var_type=VOID)
  Children (1):
    Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=PROCEDURE_CALL, token="foregroundcode", var_type=VOID)
  Children (1):
    Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 154, Col 41
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('m')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('m') at Line 154, Col 45
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="m", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="m", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 154, Col 46
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (4):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[", var_type=VOID)
    Node(type=PROCEDURE_CALL, token="foregroundcode", var_type=VOID)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
    Node(type=STRING, token="m", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (4):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[", var_type=VOID)
    Node(type=PROCEDURE_CALL, token="foregroundcode", var_type=VOID)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
    Node(type=STRING, token="m", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 154, Col 47
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 155, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (4):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[", var_type=VOID)
        Node(type=PROCEDURE_CALL, token="foregroundcode", var_type=VOID)
          Children (1):
            Node(type=VARIABLE, token="color", var_type=VOID)
        Node(type=STRING, token="m", var_type=VOID)
Node(type=PROCEDURE_DECL, token="textcolor", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (4):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[", var_type=VOID)
            Node(type=PROCEDURE_CALL, token="foregroundcode", var_type=VOID)
              Children (1):
                Node(type=VARIABLE, token="color", var_type=VOID)
            Node(type=STRING, token="m", var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'textcolor' (original: 'textcolor') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 155, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 157, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('textbackground') at Line 157, Col 25
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="textbackground", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 157, Col 26
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 157, Col 31
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 157, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="byte", var_type=VOID)
Changing type of AST node from VOID to BYTE
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('byte') at Line 157, Col 37
Changing type of AST node from VOID to BYTE
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 157, Col 38
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 157, Col 39
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 159, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 160, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 160, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 160, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 160, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[') at Line 160, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="[", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 160, Col 18
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('backgroundcode')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_CALL, token="backgroundcode", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: IDENTIFIER, Got: IDENTIFIER ('backgroundcode') at Line 160, Col 33
[DEBUG] eat(): Called from procedureCall() - Expecting: LPAREN, Got: LPAREN ('(') at Line 160, Col 34
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('color')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 160, Col 39
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: RPAREN, Got: RPAREN (')') at Line 160, Col 40
Node(type=PROCEDURE_CALL, token="backgroundcode", var_type=VOID)
  Children (1):
    Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=PROCEDURE_CALL, token="backgroundcode", var_type=VOID)
  Children (1):
    Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 160, Col 41
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('m')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('m') at Line 160, Col 45
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="m", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="m", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 160, Col 46
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (4):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[", var_type=VOID)
    Node(type=PROCEDURE_CALL, token="backgroundcode", var_type=VOID)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
    Node(type=STRING, token="m", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (4):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[", var_type=VOID)
    Node(type=PROCEDURE_CALL, token="backgroundcode", var_type=VOID)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
    Node(type=STRING, token="m", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 160, Col 47
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 161, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (4):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[", var_type=VOID)
        Node(type=PROCEDURE_CALL, token="backgroundcode", var_type=VOID)
          Children (1):
            Node(type=VARIABLE, token="color", var_type=VOID)
        Node(type=STRING, token="m", var_type=VOID)
Node(type=PROCEDURE_DECL, token="textbackground", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (4):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[", var_type=VOID)
            Node(type=PROCEDURE_CALL, token="backgroundcode", var_type=VOID)
              Children (1):
                Node(type=VARIABLE, token="color", var_type=VOID)
            Node(type=STRING, token="m", var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'textbackground' (original: 'textbackground') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 161, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 163, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('hidecursor') at Line 163, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="hidecursor", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 163, Col 22
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 165, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 166, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 166, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 166, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 166, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[?25l')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[?25l') at Line 166, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[?25l", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[?25l", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 166, Col 22
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[?25l", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[?25l", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 166, Col 23
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 167, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[?25l", var_type=VOID)
Node(type=PROCEDURE_DECL, token="hidecursor", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[?25l", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'hidecursor' (original: 'hidecursor') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 167, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 169, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('showcursor') at Line 169, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="showcursor", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 169, Col 22
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 171, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 172, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 172, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 172, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 172, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[?25h')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[?25h') at Line 172, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[?25h", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[?25h", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 172, Col 22
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[?25h", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[?25h", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 172, Col 23
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 173, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[?25h", var_type=VOID)
Node(type=PROCEDURE_DECL, token="showcursor", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[?25h", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'showcursor' (original: 'showcursor') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 173, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 175, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('clreol') at Line 175, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="clreol", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 175, Col 18
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 177, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 178, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 178, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 178, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 178, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[K')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[K') at Line 178, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[K", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[K", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 178, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[K", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[K", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 178, Col 20
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 179, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[K", var_type=VOID)
Node(type=PROCEDURE_DECL, token="clreol", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[K", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'clreol' (original: 'clreol') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 179, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 181, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('invertcolors') at Line 181, Col 23
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="invertcolors", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 181, Col 24
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 183, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 184, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 184, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 184, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 184, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[7m')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[7m') at Line 184, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[7m", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[7m", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 184, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[7m", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[7m", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 184, Col 21
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 185, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[7m", var_type=VOID)
Node(type=PROCEDURE_DECL, token="invertcolors", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[7m", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'invertcolors' (original: 'invertcolors') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 185, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 187, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('normalcolors') at Line 187, Col 23
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="normalcolors", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 187, Col 24
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 189, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 190, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 190, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 190, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 190, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[0m')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[0m') at Line 190, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[0m", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[0m", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 190, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[0m", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[0m", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 190, Col 21
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 191, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[0m", var_type=VOID)
Node(type=PROCEDURE_DECL, token="normalcolors", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[0m", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'normalcolors' (original: 'normalcolors') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 191, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 193, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('beep') at Line 193, Col 15
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="beep", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 193, Col 16
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 195, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 196, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 196, Col 9
[DEBUG_FACTOR] Entry: Current token is HEX_CONST ('7')
[DEBUG] eat(): Called from factor() - Expecting: HEX_CONST, Got: HEX_CONST ('7') at Line 196, Col 11
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="7", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=NUMBER, token="7", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 196, Col 12
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="7", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="7", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 196, Col 13
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 197, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="7", var_type=VOID)
Node(type=PROCEDURE_DECL, token="beep", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (1):
            Node(type=NUMBER, token="7", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'beep' (original: 'beep') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 197, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 199, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('textcolore') at Line 199, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="textcolore", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 199, Col 22
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 199, Col 27
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 199, Col 28
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="byte", var_type=VOID)
Changing type of AST node from VOID to BYTE
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('byte') at Line 199, Col 33
Changing type of AST node from VOID to BYTE
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 199, Col 34
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 199, Col 35
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 201, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 202, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 202, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 202, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 202, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[38;5;')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[38;5;') at Line 202, Col 22
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[38;5;", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="[38;5;", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 202, Col 23
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('color')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 202, Col 29
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 202, Col 30
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('m')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('m') at Line 202, Col 34
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="m", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="m", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 202, Col 35
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (4):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[38;5;", var_type=VOID)
    Node(type=VARIABLE, token="color", var_type=VOID)
    Node(type=STRING, token="m", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (4):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[38;5;", var_type=VOID)
    Node(type=VARIABLE, token="color", var_type=VOID)
    Node(type=STRING, token="m", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 202, Col 36
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 203, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (4):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[38;5;", var_type=VOID)
        Node(type=VARIABLE, token="color", var_type=VOID)
        Node(type=STRING, token="m", var_type=VOID)
Node(type=PROCEDURE_DECL, token="textcolore", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (4):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[38;5;", var_type=VOID)
            Node(type=VARIABLE, token="color", var_type=VOID)
            Node(type=STRING, token="m", var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'textcolore' (original: 'textcolore') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 203, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 205, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('textbackgrounde') at Line 205, Col 26
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="textbackgrounde", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 205, Col 27
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 205, Col 32
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 205, Col 33
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="byte", var_type=VOID)
Changing type of AST node from VOID to BYTE
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('byte') at Line 205, Col 38
Changing type of AST node from VOID to BYTE
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 205, Col 39
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 205, Col 40
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 207, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 208, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 208, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 208, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 208, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[48;5;')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[48;5;') at Line 208, Col 22
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[48;5;", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="[48;5;", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 208, Col 23
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('color')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('color') at Line 208, Col 29
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 208, Col 30
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('m')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('m') at Line 208, Col 34
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="m", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="m", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 208, Col 35
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (4):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[48;5;", var_type=VOID)
    Node(type=VARIABLE, token="color", var_type=VOID)
    Node(type=STRING, token="m", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (4):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[48;5;", var_type=VOID)
    Node(type=VARIABLE, token="color", var_type=VOID)
    Node(type=STRING, token="m", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 208, Col 36
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 209, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (4):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[48;5;", var_type=VOID)
        Node(type=VARIABLE, token="color", var_type=VOID)
        Node(type=STRING, token="m", var_type=VOID)
Node(type=PROCEDURE_DECL, token="textbackgrounde", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (4):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[48;5;", var_type=VOID)
            Node(type=VARIABLE, token="color", var_type=VOID)
            Node(type=STRING, token="m", var_type=VOID)
  Children (1):
    Node(type=VAR_DECL, var_type=BYTE)
      Children (1):
        Node(type=VARIABLE, token="color", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'textbackgrounde' (original: 'textbackgrounde') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 209, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 211, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('savecursor') at Line 211, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="savecursor", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 211, Col 22
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 213, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 214, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 214, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 214, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 214, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[s')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[s') at Line 214, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[s", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[s", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 214, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[s", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[s", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 214, Col 20
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 215, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[s", var_type=VOID)
Node(type=PROCEDURE_DECL, token="savecursor", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[s", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'savecursor' (original: 'savecursor') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 215, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 217, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('restorecursor') at Line 217, Col 24
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="restorecursor", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 217, Col 25
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 219, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 220, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 220, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 220, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 220, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[u')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[u') at Line 220, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[u", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[u", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 220, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[u", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[u", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 220, Col 20
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 221, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[u", var_type=VOID)
Node(type=PROCEDURE_DECL, token="restorecursor", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[u", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'restorecursor' (original: 'restorecursor') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 221, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 223, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('boldtext') at Line 223, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="boldtext", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 223, Col 20
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 225, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 226, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 226, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 226, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 226, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[1m')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[1m') at Line 226, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[1m", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[1m", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 226, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[1m", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[1m", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 226, Col 21
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 227, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[1m", var_type=VOID)
Node(type=PROCEDURE_DECL, token="boldtext", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[1m", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'boldtext' (original: 'boldtext') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 227, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 229, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('underlinetext') at Line 229, Col 24
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="underlinetext", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 229, Col 25
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 231, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 232, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 232, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 232, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 232, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[4m')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[4m') at Line 232, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[4m", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[4m", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 232, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[4m", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[4m", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 232, Col 21
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 233, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[4m", var_type=VOID)
Node(type=PROCEDURE_DECL, token="underlinetext", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[4m", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'underlinetext' (original: 'underlinetext') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 233, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 235, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('blinktext') at Line 235, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="blinktext", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 235, Col 21
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 237, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 238, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 238, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 238, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 238, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[5m')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[5m') at Line 238, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[5m", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[5m", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 238, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[5m", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[5m", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 238, Col 21
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 239, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[5m", var_type=VOID)
Node(type=PROCEDURE_DECL, token="blinktext", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[5m", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'blinktext' (original: 'blinktext') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 239, Col 5
[DEBUG] eat(): Called from functionDeclaration() - Expecting: FUNCTION, Got: FUNCTION ('function') at Line 241, Col 9
[DEBUG] eat(): Called from functionDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wherex') at Line 241, Col 16
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="wherex", var_type=VOID)
[DEBUG] eat(): Called from functionDeclaration() - Expecting: COLON, Got: COLON (':') at Line 241, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 241, Col 25
[DEBUG] eat(): Called from functionDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 241, Col 26
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 243, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="wherex", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wherex') at Line 244, Col 9
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 244, Col 12
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('biwherex')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="biwherex", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('biwherex') at Line 244, Col 21
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=VARIABLE, token="biwherex", var_type=VOID)
Node(type=VARIABLE, token="biwherex", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="wherex", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="biwherex", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="wherex", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="biwherex", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 244, Col 22
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 245, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="wherex", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="biwherex", var_type=VOID)
Node(type=FUNCTION_DECL, token="wherex", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="integer", var_type=INTEGER)
  Extra:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="wherex", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="biwherex", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'wherex' (original: 'wherex') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 245, Col 5
[DEBUG] eat(): Called from functionDeclaration() - Expecting: FUNCTION, Got: FUNCTION ('function') at Line 247, Col 9
[DEBUG] eat(): Called from functionDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wherey') at Line 247, Col 16
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FUNCTION_DECL, token="wherey", var_type=VOID)
[DEBUG] eat(): Called from functionDeclaration() - Expecting: COLON, Got: COLON (':') at Line 247, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 247, Col 25
[DEBUG] eat(): Called from functionDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 247, Col 26
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 249, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="wherey", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wherey') at Line 250, Col 9
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 250, Col 12
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('biwherey')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="biwherey", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('biwherey') at Line 250, Col 21
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=VARIABLE, token="biwherey", var_type=VOID)
Node(type=VARIABLE, token="biwherey", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="wherey", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="biwherey", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="wherey", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="biwherey", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 250, Col 22
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 251, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="wherey", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="biwherey", var_type=VOID)
Node(type=FUNCTION_DECL, token="wherey", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="integer", var_type=INTEGER)
  Extra:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="wherey", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="biwherey", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'wherey' (original: 'wherey') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 251, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 256, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('delline') at Line 256, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="delline", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 256, Col 19
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 257, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 258, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 258, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 258, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 258, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[M')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[M') at Line 258, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[M", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[M", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 258, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[M", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[M", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 258, Col 20
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 259, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[M", var_type=VOID)
Node(type=PROCEDURE_DECL, token="delline", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[M", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'delline' (original: 'delline') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 259, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 262, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('insline') at Line 262, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="insline", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 262, Col 19
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 263, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 264, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 264, Col 9
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 264, Col 12
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 264, Col 13
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[L')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[L') at Line 264, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[L", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="[L", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 264, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[L", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[L", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 264, Col 20
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 265, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[L", var_type=VOID)
Node(type=PROCEDURE_DECL, token="insline", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[L", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'insline' (original: 'insline') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 265, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 268, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('highvideo') at Line 268, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="highvideo", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 268, Col 21
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 269, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_CALL, token="textcolor", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: IDENTIFIER, Got: IDENTIFIER ('textcolor') at Line 270, Col 12
[DEBUG] eat(): Called from procedureCall() - Expecting: LPAREN, Got: LPAREN ('(') at Line 270, Col 13
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('darkgray')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="darkgray", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('darkgray') at Line 270, Col 21
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=VARIABLE, token="darkgray", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=VARIABLE, token="darkgray", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: RPAREN, Got: RPAREN (')') at Line 270, Col 22
Node(type=PROCEDURE_CALL, token="textcolor", var_type=VOID)
  Children (1):
    Node(type=VARIABLE, token="darkgray", var_type=VOID)
Node(type=PROCEDURE_CALL, token="textcolor", var_type=VOID)
  Children (1):
    Node(type=VARIABLE, token="darkgray", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 270, Col 23
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 272, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=PROCEDURE_CALL, token="textcolor", var_type=VOID)
      Children (1):
        Node(type=VARIABLE, token="darkgray", var_type=VOID)
Node(type=PROCEDURE_DECL, token="highvideo", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=PROCEDURE_CALL, token="textcolor", var_type=VOID)
          Children (1):
            Node(type=VARIABLE, token="darkgray", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'highvideo' (original: 'highvideo') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 272, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 275, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('lowvideo') at Line 275, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="lowvideo", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 275, Col 20
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 276, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_CALL, token="boldtext", var_type=VOID)
[DEBUG] eat(): Called from statement() - Expecting: IDENTIFIER, Got: IDENTIFIER ('boldtext') at Line 277, Col 11
Node(type=PROCEDURE_CALL, token="boldtext", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 277, Col 12
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 279, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=PROCEDURE_CALL, token="boldtext", var_type=VOID)
Node(type=PROCEDURE_DECL, token="lowvideo", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=PROCEDURE_CALL, token="boldtext", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'lowvideo' (original: 'lowvideo') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 279, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 282, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('normvideo') at Line 282, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="normvideo", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 282, Col 21
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 283, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_CALL, token="normalcolors", var_type=VOID)
[DEBUG] eat(): Called from statement() - Expecting: IDENTIFIER, Got: IDENTIFIER ('normalcolors') at Line 284, Col 15
Node(type=PROCEDURE_CALL, token="normalcolors", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 284, Col 16
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 286, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=PROCEDURE_CALL, token="normalcolors", var_type=VOID)
Node(type=PROCEDURE_DECL, token="normvideo", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=PROCEDURE_CALL, token="normalcolors", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'normvideo' (original: 'normvideo') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 286, Col 5
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: PROCEDURE, Got: PROCEDURE ('procedure') at Line 289, Col 10
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('window') at Line 289, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_DECL, token="window", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: LPAREN, Got: LPAREN ('(') at Line 289, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x1", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x1') at Line 289, Col 20
[DEBUG] eat(): Called from paramList() - Expecting: COMMA, Got: COMMA (',') at Line 289, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y1", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y1') at Line 289, Col 24
[DEBUG] eat(): Called from paramList() - Expecting: COMMA, Got: COMMA (',') at Line 289, Col 25
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x2", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x2') at Line 289, Col 28
[DEBUG] eat(): Called from paramList() - Expecting: COMMA, Got: COMMA (',') at Line 289, Col 29
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y2", var_type=VOID)
[DEBUG] eat(): Called from paramList() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y2') at Line 289, Col 32
[DEBUG] eat(): Called from paramList() - Expecting: COLON, Got: COLON (':') at Line 289, Col 33
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 289, Col 41
Changing type of AST node from VOID to INTEGER
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x2", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y2", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (4):
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x1", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y1", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x2", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y2", var_type=VOID)
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: RPAREN, Got: RPAREN (')') at Line 289, Col 42
[DEBUG] eat(): Called from procedureDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 289, Col 43
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 290, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from ifStatement() - Expecting: IF, Got: IF ('if') at Line 292, Col 5
[DEBUG_FACTOR] Entry: Current token is LPAREN ('(')
[DEBUG] eat(): Called from factor() - Expecting: LPAREN, Got: LPAREN ('(') at Line 292, Col 7
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('x1')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x1') at Line 292, Col 9
[DEBUG_TERM] After Factor: Next token is LESS ('<')
Node(type=VARIABLE, token="x1", var_type=VOID)
[DEBUG] eat(): Called from relExpr() - Expecting: LESS, Got: LESS ('<') at Line 292, Col 11
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 292, Col 13
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=NUMBER, token="1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BINARY_OP, token="<", var_type=VOID)
Changing type of AST node from VOID to BOOLEAN
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="x1", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RPAREN, Got: RPAREN (')') at Line 292, Col 14
[DEBUG_TERM] After Factor: Next token is OR ('or')
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="x1", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="x1", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from boolExpr() - Expecting: OR, Got: OR ('or') at Line 292, Col 17
[DEBUG_FACTOR] Entry: Current token is LPAREN ('(')
[DEBUG] eat(): Called from factor() - Expecting: LPAREN, Got: LPAREN ('(') at Line 292, Col 19
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('y1')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y1') at Line 292, Col 21
[DEBUG_TERM] After Factor: Next token is LESS ('<')
Node(type=VARIABLE, token="y1", var_type=VOID)
[DEBUG] eat(): Called from relExpr() - Expecting: LESS, Got: LESS ('<') at Line 292, Col 23
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 292, Col 25
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=NUMBER, token="1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BINARY_OP, token="<", var_type=VOID)
Changing type of AST node from VOID to BOOLEAN
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="y1", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RPAREN, Got: RPAREN (')') at Line 292, Col 26
[DEBUG_TERM] After Factor: Next token is OR ('or')
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="y1", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="y1", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BINARY_OP, token="or", var_type=VOID)
[DEBUG] eat(): Called from boolExpr() - Expecting: OR, Got: OR ('or') at Line 292, Col 29
[DEBUG_FACTOR] Entry: Current token is LPAREN ('(')
[DEBUG] eat(): Called from factor() - Expecting: LPAREN, Got: LPAREN ('(') at Line 292, Col 31
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('x2')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x2", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x2') at Line 292, Col 33
[DEBUG_TERM] After Factor: Next token is LESS ('<')
Node(type=VARIABLE, token="x2", var_type=VOID)
[DEBUG] eat(): Called from relExpr() - Expecting: LESS, Got: LESS ('<') at Line 292, Col 35
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('x1')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x1') at Line 292, Col 38
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=VARIABLE, token="x1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BINARY_OP, token="<", var_type=VOID)
Changing type of AST node from VOID to BOOLEAN
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="x2", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="x1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RPAREN, Got: RPAREN (')') at Line 292, Col 39
[DEBUG_TERM] After Factor: Next token is OR ('or')
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="x2", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="x1", var_type=VOID)
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="x2", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="x1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BINARY_OP, token="or", var_type=VOID)
[DEBUG] eat(): Called from boolExpr() - Expecting: OR, Got: OR ('or') at Line 292, Col 42
[DEBUG_FACTOR] Entry: Current token is LPAREN ('(')
[DEBUG] eat(): Called from factor() - Expecting: LPAREN, Got: LPAREN ('(') at Line 292, Col 44
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('y2')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y2", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y2') at Line 292, Col 46
[DEBUG_TERM] After Factor: Next token is LESS ('<')
Node(type=VARIABLE, token="y2", var_type=VOID)
[DEBUG] eat(): Called from relExpr() - Expecting: LESS, Got: LESS ('<') at Line 292, Col 48
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('y1')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y1') at Line 292, Col 51
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=VARIABLE, token="y1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BINARY_OP, token="<", var_type=VOID)
Changing type of AST node from VOID to BOOLEAN
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="y2", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="y1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RPAREN, Got: RPAREN (')') at Line 292, Col 52
[DEBUG_TERM] After Factor: Next token is THEN ('then')
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="y2", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="y1", var_type=VOID)
Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
  Left:
    Node(type=VARIABLE, token="y2", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="y1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BINARY_OP, token="or", var_type=VOID)
[DEBUG] eat(): Called from ifStatement() - Expecting: THEN, Got: THEN ('then') at Line 292, Col 57
[DEBUG] ifStatement: Parsing THEN branch...
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 293, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 295, Col 6
Node(type=COMPOUND, var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
[DEBUG] ifStatement: FINISHED parsing THEN branch.
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=IF, var_type=VOID)
[DEBUG] ifStatement: After THEN branch, current token is: ELSE ('else') at Line 296, Col 7
[DEBUG] ifStatement: Found ELSE token. Parsing ELSE branch...
[DEBUG] eat(): Called from ifStatement() - Expecting: ELSE, Got: ELSE ('else') at Line 296, Col 7
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 297, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winleft", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winleft') at Line 299, Col 12
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 299, Col 15
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('x1')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x1') at Line 299, Col 18
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=VARIABLE, token="x1", var_type=VOID)
Node(type=VARIABLE, token="x1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winleft", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="x1", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winleft", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="x1", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 299, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="wintop", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wintop') at Line 300, Col 11
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 300, Col 14
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('y1')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y1') at Line 300, Col 17
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=VARIABLE, token="y1", var_type=VOID)
Node(type=VARIABLE, token="y1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="wintop", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="y1", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="wintop", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="y1", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 300, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winright", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winright') at Line 301, Col 13
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 301, Col 16
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('x2')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="x2", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('x2') at Line 301, Col 19
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=VARIABLE, token="x2", var_type=VOID)
Node(type=VARIABLE, token="x2", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winright", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="x2", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winright", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="x2", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 301, Col 20
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winbottom", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winbottom') at Line 302, Col 14
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 302, Col 17
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('y2')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="y2", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('y2') at Line 302, Col 20
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=VARIABLE, token="y2", var_type=VOID)
Node(type=VARIABLE, token="y2", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winbottom", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="y2", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winbottom", var_type=VOID)
  Right:
    Node(type=VARIABLE, token="y2", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 302, Col 21
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 307, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 307, Col 11
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('esc')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('esc') at Line 307, Col 14
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="esc", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 307, Col 15
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('[')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('[') at Line 307, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="[", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="[", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 307, Col 20
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('wintop')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="wintop", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wintop') at Line 307, Col 27
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="wintop", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 307, Col 28
[DEBUG_FACTOR] Entry: Current token is STRING_CONST (';')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST (';') at Line 307, Col 32
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token=";", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token=";", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 307, Col 33
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('winbottom')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winbottom", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winbottom') at Line 307, Col 43
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=VARIABLE, token="winbottom", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 307, Col 44
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('r')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('r') at Line 307, Col 48
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="r", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="r", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 307, Col 49
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (6):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[", var_type=VOID)
    Node(type=VARIABLE, token="wintop", var_type=VOID)
    Node(type=STRING, token=";", var_type=VOID)
    Node(type=VARIABLE, token="winbottom", var_type=VOID)
    Node(type=STRING, token="r", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (6):
    Node(type=VARIABLE, token="esc", var_type=VOID)
    Node(type=STRING, token="[", var_type=VOID)
    Node(type=VARIABLE, token="wintop", var_type=VOID)
    Node(type=STRING, token=";", var_type=VOID)
    Node(type=VARIABLE, token="winbottom", var_type=VOID)
    Node(type=STRING, token="r", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 307, Col 50
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: IDENTIFIER, Got: IDENTIFIER ('gotoxy') at Line 310, Col 11
[DEBUG] eat(): Called from procedureCall() - Expecting: LPAREN, Got: LPAREN ('(') at Line 310, Col 12
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 310, Col 13
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from exprList() - Expecting: COMMA, Got: COMMA (',') at Line 310, Col 14
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 310, Col 16
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=NUMBER, token="1", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (2):
    Node(type=NUMBER, token="1", var_type=VOID)
    Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from procedureCall() - Expecting: RPAREN, Got: RPAREN (')') at Line 310, Col 17
Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
  Children (2):
    Node(type=NUMBER, token="1", var_type=VOID)
    Node(type=NUMBER, token="1", var_type=VOID)
Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
  Children (2):
    Node(type=NUMBER, token="1", var_type=VOID)
    Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 310, Col 18
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 311, Col 6
Node(type=COMPOUND, var_type=VOID)
  Children (6):
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="winleft", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="x1", var_type=VOID)
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="wintop", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="y1", var_type=VOID)
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="winright", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="x2", var_type=VOID)
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="winbottom", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="y2", var_type=VOID)
    Node(type=WRITE, var_type=VOID)
      Children (6):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[", var_type=VOID)
        Node(type=VARIABLE, token="wintop", var_type=VOID)
        Node(type=STRING, token=";", var_type=VOID)
        Node(type=VARIABLE, token="winbottom", var_type=VOID)
        Node(type=STRING, token="r", var_type=VOID)
    Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
      Children (2):
        Node(type=NUMBER, token="1", var_type=VOID)
        Node(type=NUMBER, token="1", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (6):
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="winleft", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="x1", var_type=VOID)
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="wintop", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="y1", var_type=VOID)
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="winright", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="x2", var_type=VOID)
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="winbottom", var_type=VOID)
      Right:
        Node(type=VARIABLE, token="y2", var_type=VOID)
    Node(type=WRITE, var_type=VOID)
      Children (6):
        Node(type=VARIABLE, token="esc", var_type=VOID)
        Node(type=STRING, token="[", var_type=VOID)
        Node(type=VARIABLE, token="wintop", var_type=VOID)
        Node(type=STRING, token=";", var_type=VOID)
        Node(type=VARIABLE, token="winbottom", var_type=VOID)
        Node(type=STRING, token="r", var_type=VOID)
    Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
      Children (2):
        Node(type=NUMBER, token="1", var_type=VOID)
        Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] ifStatement: FINISHED parsing ELSE branch.
[DEBUG] ifStatement: Returning IF node.
Node(type=IF, var_type=VOID)
  Left:
    Node(type=BINARY_OP, token="or", var_type=VOID)
      Left:
        Node(type=BINARY_OP, token="or", var_type=VOID)
          Left:
            Node(type=BINARY_OP, token="or", var_type=VOID)
              Left:
                Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
                  Left:
                    Node(type=VARIABLE, token="x1", var_type=VOID)
                  Right:
                    Node(type=NUMBER, token="1", var_type=VOID)
              Right:
                Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
                  Left:
                    Node(type=VARIABLE, token="y1", var_type=VOID)
                  Right:
                    Node(type=NUMBER, token="1", var_type=VOID)
          Right:
            Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
              Left:
                Node(type=VARIABLE, token="x2", var_type=VOID)
              Right:
                Node(type=VARIABLE, token="x1", var_type=VOID)
      Right:
        Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
          Left:
            Node(type=VARIABLE, token="y2", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="y1", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
  Extra:
    Node(type=COMPOUND, var_type=VOID)
      Children (6):
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="winleft", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="x1", var_type=VOID)
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="wintop", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="y1", var_type=VOID)
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="winright", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="x2", var_type=VOID)
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="winbottom", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="y2", var_type=VOID)
        Node(type=WRITE, var_type=VOID)
          Children (6):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[", var_type=VOID)
            Node(type=VARIABLE, token="wintop", var_type=VOID)
            Node(type=STRING, token=";", var_type=VOID)
            Node(type=VARIABLE, token="winbottom", var_type=VOID)
            Node(type=STRING, token="r", var_type=VOID)
        Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
          Children (2):
            Node(type=NUMBER, token="1", var_type=VOID)
            Node(type=NUMBER, token="1", var_type=VOID)
Node(type=IF, var_type=VOID)
  Left:
    Node(type=BINARY_OP, token="or", var_type=VOID)
      Left:
        Node(type=BINARY_OP, token="or", var_type=VOID)
          Left:
            Node(type=BINARY_OP, token="or", var_type=VOID)
              Left:
                Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
                  Left:
                    Node(type=VARIABLE, token="x1", var_type=VOID)
                  Right:
                    Node(type=NUMBER, token="1", var_type=VOID)
              Right:
                Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
                  Left:
                    Node(type=VARIABLE, token="y1", var_type=VOID)
                  Right:
                    Node(type=NUMBER, token="1", var_type=VOID)
          Right:
            Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
              Left:
                Node(type=VARIABLE, token="x2", var_type=VOID)
              Right:
                Node(type=VARIABLE, token="x1", var_type=VOID)
      Right:
        Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
          Left:
            Node(type=VARIABLE, token="y2", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="y1", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
  Extra:
    Node(type=COMPOUND, var_type=VOID)
      Children (6):
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="winleft", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="x1", var_type=VOID)
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="wintop", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="y1", var_type=VOID)
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="winright", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="x2", var_type=VOID)
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="winbottom", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="y2", var_type=VOID)
        Node(type=WRITE, var_type=VOID)
          Children (6):
            Node(type=VARIABLE, token="esc", var_type=VOID)
            Node(type=STRING, token="[", var_type=VOID)
            Node(type=VARIABLE, token="wintop", var_type=VOID)
            Node(type=STRING, token=";", var_type=VOID)
            Node(type=VARIABLE, token="winbottom", var_type=VOID)
            Node(type=STRING, token="r", var_type=VOID)
        Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
          Children (2):
            Node(type=NUMBER, token="1", var_type=VOID)
            Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 311, Col 7
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 312, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=IF, var_type=VOID)
      Left:
        Node(type=BINARY_OP, token="or", var_type=VOID)
          Left:
            Node(type=BINARY_OP, token="or", var_type=VOID)
              Left:
                Node(type=BINARY_OP, token="or", var_type=VOID)
                  Left:
                    Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
                      Left:
                        Node(type=VARIABLE, token="x1", var_type=VOID)
                      Right:
                        Node(type=NUMBER, token="1", var_type=VOID)
                  Right:
                    Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
                      Left:
                        Node(type=VARIABLE, token="y1", var_type=VOID)
                      Right:
                        Node(type=NUMBER, token="1", var_type=VOID)
              Right:
                Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
                  Left:
                    Node(type=VARIABLE, token="x2", var_type=VOID)
                  Right:
                    Node(type=VARIABLE, token="x1", var_type=VOID)
          Right:
            Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
              Left:
                Node(type=VARIABLE, token="y2", var_type=VOID)
              Right:
                Node(type=VARIABLE, token="y1", var_type=VOID)
      Right:
        Node(type=COMPOUND, var_type=VOID)
      Extra:
        Node(type=COMPOUND, var_type=VOID)
          Children (6):
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="winleft", var_type=VOID)
              Right:
                Node(type=VARIABLE, token="x1", var_type=VOID)
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="wintop", var_type=VOID)
              Right:
                Node(type=VARIABLE, token="y1", var_type=VOID)
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="winright", var_type=VOID)
              Right:
                Node(type=VARIABLE, token="x2", var_type=VOID)
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="winbottom", var_type=VOID)
              Right:
                Node(type=VARIABLE, token="y2", var_type=VOID)
            Node(type=WRITE, var_type=VOID)
              Children (6):
                Node(type=VARIABLE, token="esc", var_type=VOID)
                Node(type=STRING, token="[", var_type=VOID)
                Node(type=VARIABLE, token="wintop", var_type=VOID)
                Node(type=STRING, token=";", var_type=VOID)
                Node(type=VARIABLE, token="winbottom", var_type=VOID)
                Node(type=STRING, token="r", var_type=VOID)
            Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
              Children (2):
                Node(type=NUMBER, token="1", var_type=VOID)
                Node(type=NUMBER, token="1", var_type=VOID)
Node(type=PROCEDURE_DECL, token="window", var_type=VOID)
  Right:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=IF, var_type=VOID)
          Left:
            Node(type=BINARY_OP, token="or", var_type=VOID)
              Left:
                Node(type=BINARY_OP, token="or", var_type=VOID)
                  Left:
                    Node(type=BINARY_OP, token="or", var_type=VOID)
                      Left:
                        Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
                          Left:
                            Node(type=VARIABLE, token="x1", var_type=VOID)
                          Right:
                            Node(type=NUMBER, token="1", var_type=VOID)
                      Right:
                        Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
                          Left:
                            Node(type=VARIABLE, token="y1", var_type=VOID)
                          Right:
                            Node(type=NUMBER, token="1", var_type=VOID)
                  Right:
                    Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
                      Left:
                        Node(type=VARIABLE, token="x2", var_type=VOID)
                      Right:
                        Node(type=VARIABLE, token="x1", var_type=VOID)
              Right:
                Node(type=BINARY_OP, token="<", var_type=BOOLEAN)
                  Left:
                    Node(type=VARIABLE, token="y2", var_type=VOID)
                  Right:
                    Node(type=VARIABLE, token="y1", var_type=VOID)
          Right:
            Node(type=COMPOUND, var_type=VOID)
          Extra:
            Node(type=COMPOUND, var_type=VOID)
              Children (6):
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="winleft", var_type=VOID)
                  Right:
                    Node(type=VARIABLE, token="x1", var_type=VOID)
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="wintop", var_type=VOID)
                  Right:
                    Node(type=VARIABLE, token="y1", var_type=VOID)
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="winright", var_type=VOID)
                  Right:
                    Node(type=VARIABLE, token="x2", var_type=VOID)
                Node(type=ASSIGN, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="winbottom", var_type=VOID)
                  Right:
                    Node(type=VARIABLE, token="y2", var_type=VOID)
                Node(type=WRITE, var_type=VOID)
                  Children (6):
                    Node(type=VARIABLE, token="esc", var_type=VOID)
                    Node(type=STRING, token="[", var_type=VOID)
                    Node(type=VARIABLE, token="wintop", var_type=VOID)
                    Node(type=STRING, token=";", var_type=VOID)
                    Node(type=VARIABLE, token="winbottom", var_type=VOID)
                    Node(type=STRING, token="r", var_type=VOID)
                Node(type=PROCEDURE_CALL, token="gotoxy", var_type=VOID)
                  Children (2):
                    Node(type=NUMBER, token="1", var_type=VOID)
                    Node(type=NUMBER, token="1", var_type=VOID)
  Children (4):
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x1", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y1", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="x2", var_type=VOID)
    Node(type=VAR_DECL, var_type=INTEGER)
      Children (1):
        Node(type=VARIABLE, token="y2", var_type=VOID)
[DEBUG] addProcedure: Added procedure 'window' (original: 'window') to table.
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 312, Col 5
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 315, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winleft", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winleft') at Line 318, Col 10
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 318, Col 13
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 318, Col 15
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="1", var_type=VOID)
Node(type=NUMBER, token="1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winleft", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winleft", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 318, Col 16
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="wintop", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('wintop') at Line 319, Col 9
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 319, Col 12
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 319, Col 14
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="1", var_type=VOID)
Node(type=NUMBER, token="1", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="wintop", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="wintop", var_type=VOID)
  Right:
    Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 319, Col 15
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winright", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winright') at Line 320, Col 11
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 320, Col 14
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('80')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('80') at Line 320, Col 17
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="80", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="80", var_type=VOID)
Node(type=NUMBER, token="80", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winright", var_type=VOID)
  Right:
    Node(type=NUMBER, token="80", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winright", var_type=VOID)
  Right:
    Node(type=NUMBER, token="80", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 320, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="winbottom", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('winbottom') at Line 321, Col 12
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 321, Col 15
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('24')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('24') at Line 321, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="24", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=NUMBER, token="24", var_type=VOID)
Node(type=NUMBER, token="24", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winbottom", var_type=VOID)
  Right:
    Node(type=NUMBER, token="24", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="winbottom", var_type=VOID)
  Right:
    Node(type=NUMBER, token="24", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 321, Col 19
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 324, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (4):
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="winleft", var_type=VOID)
      Right:
        Node(type=NUMBER, token="1", var_type=VOID)
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="wintop", var_type=VOID)
      Right:
        Node(type=NUMBER, token="1", var_type=VOID)
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="winright", var_type=VOID)
      Right:
        Node(type=NUMBER, token="80", var_type=VOID)
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="winbottom", var_type=VOID)
      Right:
        Node(type=NUMBER, token="24", var_type=VOID)
[DEBUG] eat(): Called from unitParser() - Expecting: PERIOD, Got: PERIOD ('.') at Line 324, Col 5
[DEBUG] lookupGlobalSymbol: Searching for 'winbottom'. Starting list walk (globalSymbols=0x0).
[DEBUG] lookupGlobalSymbol: symbol 'winbottom' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'winbottom' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'winbottom'. Starting list walk (globalSymbols=0x0).
[DEBUG] lookupGlobalSymbol: symbol 'winbottom' not found in global_env
[DEBUG] insertGlobalSymbol('winbottom', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'winbottom'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winbottom'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'winbottom', type=INTEGER, value_ptr=0x60b000003f80
[DEBUG] linkUnit: Successfully inserted/found global symbol 'winbottom'.
[DEBUG] lookupGlobalSymbol: Searching for 'winbottom'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winbottom'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'winbottom', type=INTEGER, value_ptr=0x60b000003f80
[DEBUG] lookupLocalSymbol: symbol 'winbottom' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'winbottom'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winbottom'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'winbottom', type=INTEGER, value_ptr=0x60b000003f80
[DEBUG] lookupSymbol: 'winbottom' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'winbottom' to [DEBUG_UPDATE] updateSymbol: Entry for Name='winbottom', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 0
[DEBUG] lookupGlobalSymbol: Searching for 'winright'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winright'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'winright' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'winright' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'winright'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winright'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'winright' not found in global_env
[DEBUG] insertGlobalSymbol('winright', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'winright'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winright'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'winright'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'winright', type=INTEGER, value_ptr=0x60b000004030
[DEBUG] linkUnit: Successfully inserted/found global symbol 'winright'.
[DEBUG] lookupGlobalSymbol: Searching for 'winright'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winright'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'winright'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'winright', type=INTEGER, value_ptr=0x60b000004030
[DEBUG] lookupLocalSymbol: symbol 'winright' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'winright'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winright'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'winright'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'winright', type=INTEGER, value_ptr=0x60b000004030
[DEBUG] lookupSymbol: 'winright' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'winright' to [DEBUG_UPDATE] updateSymbol: Entry for Name='winright', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 0
[DEBUG] lookupGlobalSymbol: Searching for 'wintop'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wintop'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wintop'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'wintop' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'wintop' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'wintop'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wintop'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wintop'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'wintop' not found in global_env
[DEBUG] insertGlobalSymbol('wintop', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'wintop'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wintop'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wintop'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wintop'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'wintop', type=INTEGER, value_ptr=0x60b0000040e0
[DEBUG] linkUnit: Successfully inserted/found global symbol 'wintop'.
[DEBUG] lookupGlobalSymbol: Searching for 'wintop'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wintop'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wintop'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wintop'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'wintop', type=INTEGER, value_ptr=0x60b0000040e0
[DEBUG] lookupLocalSymbol: symbol 'wintop' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'wintop'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wintop'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wintop'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wintop'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'wintop', type=INTEGER, value_ptr=0x60b0000040e0
[DEBUG] lookupSymbol: 'wintop' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'wintop' to [DEBUG_UPDATE] updateSymbol: Entry for Name='wintop', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 0
[DEBUG] lookupGlobalSymbol: Searching for 'winleft'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winleft'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'winleft'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'winleft'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'winleft' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'winleft' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'winleft'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winleft'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'winleft'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'winleft'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'winleft' not found in global_env
[DEBUG] insertGlobalSymbol('winleft', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'winleft'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winleft'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'winleft'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'winleft'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'winleft'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'winleft', type=INTEGER, value_ptr=0x60b000004190
[DEBUG] linkUnit: Successfully inserted/found global symbol 'winleft'.
[DEBUG] lookupGlobalSymbol: Searching for 'winleft'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winleft'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'winleft'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'winleft'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'winleft'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'winleft', type=INTEGER, value_ptr=0x60b000004190
[DEBUG] lookupLocalSymbol: symbol 'winleft' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'winleft'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winleft'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'winleft'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'winleft'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'winleft'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'winleft', type=INTEGER, value_ptr=0x60b000004190
[DEBUG] lookupSymbol: 'winleft' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'winleft' to [DEBUG_UPDATE] updateSymbol: Entry for Name='winleft', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 0
[DEBUG] lookupGlobalSymbol: Searching for 'blinktext'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'blinktext'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'blinktext'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'blinktext'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'blinktext'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'blinktext' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'underlinetext'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'underlinetext'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'underlinetext'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'underlinetext'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'underlinetext'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'underlinetext' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'boldtext'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'boldtext'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'boldtext'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'boldtext'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'boldtext'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'boldtext' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'restorecursor'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'restorecursor'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'restorecursor'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'restorecursor'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'restorecursor'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'restorecursor' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'savecursor'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'savecursor'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'savecursor'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'savecursor'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'savecursor'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'savecursor' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'textbackgrounde'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'textbackgrounde'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'textbackgrounde'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'textbackgrounde'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'textbackgrounde'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'textbackgrounde' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'textcolore'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'textcolore'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'textcolore'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'textcolore'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'textcolore'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'textcolore' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'normalcolors'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'normalcolors'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'normalcolors'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'normalcolors'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'normalcolors'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'normalcolors' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'invertcolors'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'invertcolors'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'invertcolors'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'invertcolors'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'invertcolors'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'invertcolors' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'keypressed'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'keypressed'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'keypressed'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'keypressed'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'keypressed'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'keypressed' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'keypressed' (type BOOLEAN) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'keypressed'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'keypressed'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'keypressed'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'keypressed'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'keypressed'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'keypressed' not found in global_env
[DEBUG] insertGlobalSymbol('keypressed', type=BOOLEAN)
[DEBUG] lookupGlobalSymbol: Searching for 'keypressed'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'keypressed'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'keypressed'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'keypressed'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'keypressed'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'keypressed'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'keypressed', type=BOOLEAN, value_ptr=0x60b000004240
[DEBUG] linkUnit: Successfully inserted/found global symbol 'keypressed'.
[DEBUG] lookupGlobalSymbol: Searching for 'keypressed'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'keypressed'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'keypressed'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'keypressed'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'keypressed'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'keypressed'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'keypressed', type=BOOLEAN, value_ptr=0x60b000004240
[DEBUG] lookupLocalSymbol: symbol 'keypressed' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'keypressed'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'keypressed'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'keypressed'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'keypressed'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'keypressed'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'keypressed'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'keypressed', type=BOOLEAN, value_ptr=0x60b000004240
[DEBUG] lookupSymbol: 'keypressed' found, type=BOOLEAN
[DEBUG] updateSymbol: updating symbol 'keypressed' to [DEBUG_UPDATE] updateSymbol: Entry for Name='keypressed', FoundSymType=BOOLEAN, IncomingValueType=BOOLEAN
TYPE_BOOLEAN false
[DEBUG] lookupGlobalSymbol: Searching for 'wherey'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wherey'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wherey'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wherey'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'wherey'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'wherey'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'wherey' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'wherey' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'wherey'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wherey'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wherey'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wherey'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'wherey'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'wherey'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'wherey' not found in global_env
[DEBUG] insertGlobalSymbol('wherey', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'wherey'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wherey'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wherey'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wherey'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'wherey'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'wherey'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'wherey'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'wherey', type=INTEGER, value_ptr=0x60b0000042f0
[DEBUG] linkUnit: Successfully inserted/found global symbol 'wherey'.
[DEBUG] lookupGlobalSymbol: Searching for 'wherey'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wherey'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wherey'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wherey'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'wherey'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'wherey'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'wherey'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'wherey', type=INTEGER, value_ptr=0x60b0000042f0
[DEBUG] lookupLocalSymbol: symbol 'wherey' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'wherey'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wherey'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wherey'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wherey'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'wherey'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'wherey'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'wherey'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'wherey', type=INTEGER, value_ptr=0x60b0000042f0
[DEBUG] lookupSymbol: 'wherey' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'wherey' to [DEBUG_UPDATE] updateSymbol: Entry for Name='wherey', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 0
[DEBUG] lookupGlobalSymbol: Searching for 'wherex'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wherex'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wherex'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wherex'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'wherex'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'wherex'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'wherex'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'wherex' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'wherex' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'wherex'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wherex'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wherex'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wherex'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'wherex'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'wherex'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'wherex'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'wherex' not found in global_env
[DEBUG] insertGlobalSymbol('wherex', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'wherex'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wherex'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wherex'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wherex'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'wherex'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'wherex'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'wherex'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'wherex'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'wherex', type=INTEGER, value_ptr=0x60b0000043a0
[DEBUG] linkUnit: Successfully inserted/found global symbol 'wherex'.
[DEBUG] lookupGlobalSymbol: Searching for 'wherex'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wherex'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wherex'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wherex'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'wherex'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'wherex'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'wherex'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'wherex'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'wherex', type=INTEGER, value_ptr=0x60b0000043a0
[DEBUG] lookupLocalSymbol: symbol 'wherex' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'wherex'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wherex'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wherex'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wherex'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'wherex'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'wherex'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'wherex'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'wherex'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'wherex', type=INTEGER, value_ptr=0x60b0000043a0
[DEBUG] lookupSymbol: 'wherex' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'wherex' to [DEBUG_UPDATE] updateSymbol: Entry for Name='wherex', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 0
[DEBUG] lookupGlobalSymbol: Searching for 'window'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'window'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'window'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'window'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'window'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'window'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'window'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'window'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'window' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'lowvideo'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lowvideo'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lowvideo'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lowvideo'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lowvideo'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lowvideo'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lowvideo'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lowvideo'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lowvideo' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'highvideo'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'highvideo'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'highvideo'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'highvideo'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'highvideo'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'highvideo'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'highvideo'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'highvideo'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'highvideo' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'normvideo'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'normvideo'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'normvideo'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'normvideo'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'normvideo'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'normvideo'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'normvideo'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'normvideo'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'normvideo' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'beep'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'beep'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'beep'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'beep'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'beep'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'beep'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'beep'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'beep'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'beep' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'insline'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'insline'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'insline'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'insline'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'insline'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'insline'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'insline'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'insline'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'insline' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'delline'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'delline'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'delline'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'delline'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'delline'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'delline'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'delline'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'delline'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'delline' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'showcursor'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'showcursor'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'showcursor'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'showcursor'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'showcursor'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'showcursor'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'showcursor'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'showcursor'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'showcursor' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'hidecursor'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'hidecursor'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'hidecursor'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'hidecursor'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'hidecursor'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'hidecursor'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'hidecursor'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'hidecursor'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'hidecursor' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'delay'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'delay'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'delay'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'delay'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'delay'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'delay'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'delay'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'delay'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'delay' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'textbackground'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'textbackground'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'textbackground'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'textbackground'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'textbackground'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'textbackground'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'textbackground'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'textbackground'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'textbackground' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'textcolor'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'textcolor'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'textcolor'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'textcolor'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'textcolor'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'textcolor'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'textcolor'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'textcolor'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'textcolor' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'clreol'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'clreol'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'clreol'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'clreol'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'clreol'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'clreol'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'clreol'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'clreol'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'clreol' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'gotoxy'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'gotoxy'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'gotoxy'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'gotoxy'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'gotoxy'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'gotoxy'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'gotoxy'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'gotoxy'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'gotoxy' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'clrscr'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'clrscr'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'clrscr'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'clrscr'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'clrscr'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'clrscr'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'clrscr'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'clrscr'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'clrscr' not found in global_env
[DEBUG] lookupGlobalSymbol: Searching for 'blink'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'blink'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'blink'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'blink'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'blink'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'blink'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'blink'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'blink'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'blink' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'blink' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'blink'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'blink'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'blink'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'blink'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'blink'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'blink'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'blink'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'blink'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'blink' not found in global_env
[DEBUG] insertGlobalSymbol('blink', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'blink'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'blink'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'blink'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'blink'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'blink'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'blink'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'blink'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'blink'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'blink'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'blink', type=INTEGER, value_ptr=0x60b000004450
[DEBUG] linkUnit: Successfully inserted/found global symbol 'blink'.
[DEBUG] lookupGlobalSymbol: Searching for 'blink'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'blink'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'blink'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'blink'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'blink'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'blink'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'blink'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'blink'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'blink'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'blink', type=INTEGER, value_ptr=0x60b000004450
[DEBUG] lookupLocalSymbol: symbol 'blink' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'blink'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'blink'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'blink'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'blink'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'blink'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'blink'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'blink'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'blink'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'blink'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'blink', type=INTEGER, value_ptr=0x60b000004450
[DEBUG] lookupSymbol: 'blink' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'blink' to [DEBUG_UPDATE] updateSymbol: Entry for Name='blink', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 128
[DEBUG] lookupGlobalSymbol: Searching for 'white'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'white'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'white'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'white'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'white'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'white'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'white'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'white'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'white'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'white' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'white' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'white'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'white'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'white'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'white'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'white'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'white'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'white'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'white'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'white'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'white' not found in global_env
[DEBUG] insertGlobalSymbol('white', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'white'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'white'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'white'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'white'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'white'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'white'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'white'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'white'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'white'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'white'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'white', type=INTEGER, value_ptr=0x60b000004500
[DEBUG] linkUnit: Successfully inserted/found global symbol 'white'.
[DEBUG] lookupGlobalSymbol: Searching for 'white'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'white'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'white'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'white'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'white'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'white'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'white'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'white'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'white'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'white'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'white', type=INTEGER, value_ptr=0x60b000004500
[DEBUG] lookupLocalSymbol: symbol 'white' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'white'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'white'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'white'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'white'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'white'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'white'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'white'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'white'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'white'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'white'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'white', type=INTEGER, value_ptr=0x60b000004500
[DEBUG] lookupSymbol: 'white' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'white' to [DEBUG_UPDATE] updateSymbol: Entry for Name='white', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 15
[DEBUG] lookupGlobalSymbol: Searching for 'yellow'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'yellow'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'yellow'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'yellow'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'yellow'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'yellow'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'yellow'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'yellow'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'yellow'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'yellow'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'yellow' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'yellow' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'yellow'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'yellow'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'yellow'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'yellow'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'yellow'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'yellow'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'yellow'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'yellow'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'yellow'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'yellow'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'yellow' not found in global_env
[DEBUG] insertGlobalSymbol('yellow', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'yellow'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'yellow'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'yellow'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'yellow'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'yellow'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'yellow'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'yellow'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'yellow'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'yellow'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'yellow'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'yellow'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'yellow', type=INTEGER, value_ptr=0x60b0000045b0
[DEBUG] linkUnit: Successfully inserted/found global symbol 'yellow'.
[DEBUG] lookupGlobalSymbol: Searching for 'yellow'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'yellow'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'yellow'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'yellow'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'yellow'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'yellow'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'yellow'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'yellow'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'yellow'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'yellow'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'yellow'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'yellow', type=INTEGER, value_ptr=0x60b0000045b0
[DEBUG] lookupLocalSymbol: symbol 'yellow' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'yellow'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'yellow'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'yellow'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'yellow'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'yellow'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'yellow'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'yellow'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'yellow'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'yellow'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'yellow'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'yellow'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'yellow', type=INTEGER, value_ptr=0x60b0000045b0
[DEBUG] lookupSymbol: 'yellow' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'yellow' to [DEBUG_UPDATE] updateSymbol: Entry for Name='yellow', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 14
[DEBUG] lookupGlobalSymbol: Searching for 'lightmagenta'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightmagenta'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightmagenta'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightmagenta'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightmagenta'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightmagenta'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightmagenta'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightmagenta'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightmagenta'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightmagenta'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightmagenta'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightmagenta' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'lightmagenta' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'lightmagenta'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightmagenta'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightmagenta'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightmagenta'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightmagenta'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightmagenta'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightmagenta'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightmagenta'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightmagenta'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightmagenta'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightmagenta'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightmagenta' not found in global_env
[DEBUG] insertGlobalSymbol('lightmagenta', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'lightmagenta'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightmagenta'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightmagenta'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightmagenta'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightmagenta'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightmagenta'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightmagenta'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightmagenta'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightmagenta'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightmagenta'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightmagenta'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightmagenta'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightmagenta', type=INTEGER, value_ptr=0x60b000004660
[DEBUG] linkUnit: Successfully inserted/found global symbol 'lightmagenta'.
[DEBUG] lookupGlobalSymbol: Searching for 'lightmagenta'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightmagenta'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightmagenta'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightmagenta'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightmagenta'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightmagenta'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightmagenta'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightmagenta'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightmagenta'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightmagenta'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightmagenta'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightmagenta'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightmagenta', type=INTEGER, value_ptr=0x60b000004660
[DEBUG] lookupLocalSymbol: symbol 'lightmagenta' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'lightmagenta'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightmagenta'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightmagenta'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightmagenta'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightmagenta'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightmagenta'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightmagenta'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightmagenta'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightmagenta'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightmagenta'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightmagenta'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightmagenta'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightmagenta', type=INTEGER, value_ptr=0x60b000004660
[DEBUG] lookupSymbol: 'lightmagenta' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'lightmagenta' to [DEBUG_UPDATE] updateSymbol: Entry for Name='lightmagenta', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 13
[DEBUG] lookupGlobalSymbol: Searching for 'lightred'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightred'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightred'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightred'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightred'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightred'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightred'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightred'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightred'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightred'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightred'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightred'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightred' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'lightred' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'lightred'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightred'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightred'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightred'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightred'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightred'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightred'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightred'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightred'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightred'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightred'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightred'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightred' not found in global_env
[DEBUG] insertGlobalSymbol('lightred', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'lightred'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightred'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightred'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightred'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightred'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightred'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightred'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightred'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightred'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightred'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightred'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightred'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightred'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightred', type=INTEGER, value_ptr=0x60b000004710
[DEBUG] linkUnit: Successfully inserted/found global symbol 'lightred'.
[DEBUG] lookupGlobalSymbol: Searching for 'lightred'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightred'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightred'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightred'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightred'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightred'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightred'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightred'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightred'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightred'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightred'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightred'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightred'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightred', type=INTEGER, value_ptr=0x60b000004710
[DEBUG] lookupLocalSymbol: symbol 'lightred' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'lightred'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightred'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightred'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightred'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightred'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightred'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightred'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightred'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightred'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightred'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightred'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightred'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightred'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightred', type=INTEGER, value_ptr=0x60b000004710
[DEBUG] lookupSymbol: 'lightred' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'lightred' to [DEBUG_UPDATE] updateSymbol: Entry for Name='lightred', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 12
[DEBUG] lookupGlobalSymbol: Searching for 'lightcyan'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightcyan'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightcyan'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightcyan'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightcyan'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightcyan'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightcyan'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightcyan'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightcyan'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightcyan'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightcyan'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightcyan'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightcyan'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightcyan' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'lightcyan' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'lightcyan'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightcyan'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightcyan'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightcyan'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightcyan'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightcyan'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightcyan'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightcyan'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightcyan'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightcyan'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightcyan'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightcyan'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightcyan'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightcyan' not found in global_env
[DEBUG] insertGlobalSymbol('lightcyan', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'lightcyan'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightcyan'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightcyan'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightcyan'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightcyan'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightcyan'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightcyan'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightcyan'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightcyan'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightcyan'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightcyan'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightcyan'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightcyan'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightcyan'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightcyan', type=INTEGER, value_ptr=0x60b0000047c0
[DEBUG] linkUnit: Successfully inserted/found global symbol 'lightcyan'.
[DEBUG] lookupGlobalSymbol: Searching for 'lightcyan'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightcyan'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightcyan'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightcyan'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightcyan'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightcyan'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightcyan'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightcyan'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightcyan'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightcyan'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightcyan'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightcyan'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightcyan'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightcyan'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightcyan', type=INTEGER, value_ptr=0x60b0000047c0
[DEBUG] lookupLocalSymbol: symbol 'lightcyan' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'lightcyan'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightcyan'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightcyan'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightcyan'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightcyan'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightcyan'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightcyan'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightcyan'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightcyan'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightcyan'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightcyan'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightcyan'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightcyan'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightcyan'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightcyan', type=INTEGER, value_ptr=0x60b0000047c0
[DEBUG] lookupSymbol: 'lightcyan' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'lightcyan' to [DEBUG_UPDATE] updateSymbol: Entry for Name='lightcyan', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 11
[DEBUG] lookupGlobalSymbol: Searching for 'lightgreen'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightgreen'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightgreen'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightgreen'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightgreen'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightgreen'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightgreen'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightgreen'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightgreen'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightgreen'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightgreen'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightgreen'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightgreen'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightgreen'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightgreen' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'lightgreen' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'lightgreen'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightgreen'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightgreen'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightgreen'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightgreen'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightgreen'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightgreen'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightgreen'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightgreen'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightgreen'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightgreen'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightgreen'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightgreen'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightgreen'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightgreen' not found in global_env
[DEBUG] insertGlobalSymbol('lightgreen', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'lightgreen'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightgreen'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightgreen'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightgreen'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightgreen'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightgreen'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightgreen'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightgreen'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightgreen'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightgreen'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightgreen'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightgreen'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightgreen'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightgreen'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightgreen'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightgreen', type=INTEGER, value_ptr=0x60b000004870
[DEBUG] linkUnit: Successfully inserted/found global symbol 'lightgreen'.
[DEBUG] lookupGlobalSymbol: Searching for 'lightgreen'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightgreen'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightgreen'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightgreen'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightgreen'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightgreen'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightgreen'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightgreen'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightgreen'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightgreen'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightgreen'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightgreen'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightgreen'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightgreen'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightgreen'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightgreen', type=INTEGER, value_ptr=0x60b000004870
[DEBUG] lookupLocalSymbol: symbol 'lightgreen' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'lightgreen'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightgreen'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightgreen'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightgreen'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightgreen'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightgreen'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightgreen'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightgreen'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightgreen'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightgreen'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightgreen'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightgreen'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightgreen'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightgreen'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightgreen'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightgreen', type=INTEGER, value_ptr=0x60b000004870
[DEBUG] lookupSymbol: 'lightgreen' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'lightgreen' to [DEBUG_UPDATE] updateSymbol: Entry for Name='lightgreen', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 10
[DEBUG] lookupGlobalSymbol: Searching for 'lightblue'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightblue'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightblue'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightblue'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightblue'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightblue'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightblue'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightblue'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightblue'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightblue'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightblue'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightblue'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightblue'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightblue'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightblue'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightblue' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'lightblue' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'lightblue'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightblue'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightblue'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightblue'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightblue'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightblue'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightblue'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightblue'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightblue'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightblue'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightblue'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightblue'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightblue'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightblue'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightblue'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightblue' not found in global_env
[DEBUG] insertGlobalSymbol('lightblue', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'lightblue'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightblue'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightblue'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightblue'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightblue'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightblue'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightblue'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightblue'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightblue'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightblue'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightblue'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightblue'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightblue'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightblue'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightblue'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'lightblue'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightblue', type=INTEGER, value_ptr=0x60b000004920
[DEBUG] linkUnit: Successfully inserted/found global symbol 'lightblue'.
[DEBUG] lookupGlobalSymbol: Searching for 'lightblue'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightblue'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightblue'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightblue'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightblue'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightblue'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightblue'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightblue'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightblue'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightblue'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightblue'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightblue'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightblue'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightblue'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightblue'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'lightblue'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightblue', type=INTEGER, value_ptr=0x60b000004920
[DEBUG] lookupLocalSymbol: symbol 'lightblue' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'lightblue'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightblue'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightblue'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightblue'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightblue'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightblue'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightblue'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightblue'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightblue'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightblue'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightblue'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightblue'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightblue'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightblue'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightblue'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'lightblue'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightblue', type=INTEGER, value_ptr=0x60b000004920
[DEBUG] lookupSymbol: 'lightblue' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'lightblue' to [DEBUG_UPDATE] updateSymbol: Entry for Name='lightblue', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 9
[DEBUG] lookupGlobalSymbol: Searching for 'darkgray'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'darkgray'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'darkgray'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'darkgray'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'darkgray'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'darkgray'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'darkgray'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'darkgray'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'darkgray'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'darkgray'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'darkgray'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'darkgray'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'darkgray'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'darkgray'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'darkgray'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'darkgray'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'darkgray' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'darkgray' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'darkgray'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'darkgray'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'darkgray'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'darkgray'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'darkgray'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'darkgray'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'darkgray'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'darkgray'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'darkgray'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'darkgray'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'darkgray'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'darkgray'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'darkgray'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'darkgray'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'darkgray'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'darkgray'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'darkgray' not found in global_env
[DEBUG] insertGlobalSymbol('darkgray', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'darkgray'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'darkgray'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'darkgray'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'darkgray'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'darkgray'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'darkgray'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'darkgray'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'darkgray'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'darkgray'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'darkgray'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'darkgray'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'darkgray'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'darkgray'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'darkgray'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'darkgray'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'darkgray'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'darkgray'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'darkgray', type=INTEGER, value_ptr=0x60b0000049d0
[DEBUG] linkUnit: Successfully inserted/found global symbol 'darkgray'.
[DEBUG] lookupGlobalSymbol: Searching for 'darkgray'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'darkgray'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'darkgray'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'darkgray'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'darkgray'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'darkgray'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'darkgray'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'darkgray'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'darkgray'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'darkgray'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'darkgray'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'darkgray'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'darkgray'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'darkgray'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'darkgray'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'darkgray'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'darkgray'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'darkgray', type=INTEGER, value_ptr=0x60b0000049d0
[DEBUG] lookupLocalSymbol: symbol 'darkgray' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'darkgray'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'darkgray'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'darkgray'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'darkgray'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'darkgray'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'darkgray'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'darkgray'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'darkgray'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'darkgray'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'darkgray'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'darkgray'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'darkgray'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'darkgray'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'darkgray'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'darkgray'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'darkgray'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'darkgray'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'darkgray', type=INTEGER, value_ptr=0x60b0000049d0
[DEBUG] lookupSymbol: 'darkgray' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'darkgray' to [DEBUG_UPDATE] updateSymbol: Entry for Name='darkgray', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 8
[DEBUG] lookupGlobalSymbol: Searching for 'lightgray'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightgray'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightgray'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightgray'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightgray'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightgray'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightgray'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightgray'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightgray'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightgray'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightgray'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightgray'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightgray'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightgray'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightgray'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'lightgray'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'lightgray'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightgray' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'lightgray' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'lightgray'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightgray'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightgray'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightgray'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightgray'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightgray'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightgray'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightgray'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightgray'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightgray'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightgray'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightgray'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightgray'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightgray'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightgray'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'lightgray'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'lightgray'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'lightgray' not found in global_env
[DEBUG] insertGlobalSymbol('lightgray', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'lightgray'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightgray'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightgray'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightgray'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightgray'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightgray'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightgray'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightgray'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightgray'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightgray'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightgray'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightgray'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightgray'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightgray'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightgray'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'lightgray'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'lightgray'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'lightgray'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightgray', type=INTEGER, value_ptr=0x60b000004a80
[DEBUG] linkUnit: Successfully inserted/found global symbol 'lightgray'.
[DEBUG] lookupGlobalSymbol: Searching for 'lightgray'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightgray'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightgray'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightgray'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightgray'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightgray'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightgray'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightgray'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightgray'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightgray'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightgray'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightgray'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightgray'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightgray'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightgray'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'lightgray'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'lightgray'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'lightgray'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightgray', type=INTEGER, value_ptr=0x60b000004a80
[DEBUG] lookupLocalSymbol: symbol 'lightgray' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'lightgray'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'lightgray'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'lightgray'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'lightgray'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'lightgray'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'lightgray'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'lightgray'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'lightgray'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'lightgray'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'lightgray'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'lightgray'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'lightgray'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'lightgray'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'lightgray'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'lightgray'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'lightgray'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'lightgray'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'lightgray'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'lightgray', type=INTEGER, value_ptr=0x60b000004a80
[DEBUG] lookupSymbol: 'lightgray' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'lightgray' to [DEBUG_UPDATE] updateSymbol: Entry for Name='lightgray', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 7
[DEBUG] lookupGlobalSymbol: Searching for 'brown'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'brown'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'brown'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'brown'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'brown'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'brown'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'brown'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'brown'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'brown'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'brown'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'brown'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'brown'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'brown'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'brown'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'brown'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'brown'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'brown'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'brown'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'brown' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'brown' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'brown'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'brown'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'brown'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'brown'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'brown'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'brown'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'brown'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'brown'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'brown'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'brown'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'brown'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'brown'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'brown'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'brown'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'brown'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'brown'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'brown'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'brown'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'brown' not found in global_env
[DEBUG] insertGlobalSymbol('brown', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'brown'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'brown'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'brown'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'brown'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'brown'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'brown'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'brown'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'brown'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'brown'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'brown'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'brown'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'brown'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'brown'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'brown'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'brown'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'brown'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'brown'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'brown'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'brown'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'brown', type=INTEGER, value_ptr=0x60b000004b30
[DEBUG] linkUnit: Successfully inserted/found global symbol 'brown'.
[DEBUG] lookupGlobalSymbol: Searching for 'brown'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'brown'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'brown'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'brown'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'brown'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'brown'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'brown'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'brown'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'brown'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'brown'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'brown'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'brown'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'brown'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'brown'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'brown'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'brown'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'brown'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'brown'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'brown'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'brown', type=INTEGER, value_ptr=0x60b000004b30
[DEBUG] lookupLocalSymbol: symbol 'brown' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'brown'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'brown'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'brown'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'brown'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'brown'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'brown'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'brown'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'brown'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'brown'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'brown'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'brown'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'brown'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'brown'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'brown'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'brown'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'brown'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'brown'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'brown'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'brown'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'brown', type=INTEGER, value_ptr=0x60b000004b30
[DEBUG] lookupSymbol: 'brown' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'brown' to [DEBUG_UPDATE] updateSymbol: Entry for Name='brown', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 6
[DEBUG] lookupGlobalSymbol: Searching for 'magenta'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'magenta'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'magenta'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'magenta'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'magenta'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'magenta'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'magenta'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'magenta'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'magenta'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'magenta'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'magenta'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'magenta'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'magenta'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'magenta'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'magenta'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'magenta'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'magenta'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'magenta'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'magenta'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'magenta' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'magenta' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'magenta'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'magenta'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'magenta'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'magenta'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'magenta'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'magenta'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'magenta'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'magenta'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'magenta'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'magenta'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'magenta'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'magenta'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'magenta'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'magenta'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'magenta'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'magenta'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'magenta'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'magenta'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'magenta'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'magenta' not found in global_env
[DEBUG] insertGlobalSymbol('magenta', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'magenta'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'magenta'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'magenta'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'magenta'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'magenta'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'magenta'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'magenta'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'magenta'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'magenta'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'magenta'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'magenta'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'magenta'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'magenta'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'magenta'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'magenta'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'magenta'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'magenta'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'magenta'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'magenta'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'magenta'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'magenta', type=INTEGER, value_ptr=0x60b000004be0
[DEBUG] linkUnit: Successfully inserted/found global symbol 'magenta'.
[DEBUG] lookupGlobalSymbol: Searching for 'magenta'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'magenta'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'magenta'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'magenta'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'magenta'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'magenta'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'magenta'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'magenta'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'magenta'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'magenta'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'magenta'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'magenta'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'magenta'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'magenta'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'magenta'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'magenta'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'magenta'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'magenta'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'magenta'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'magenta'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'magenta', type=INTEGER, value_ptr=0x60b000004be0
[DEBUG] lookupLocalSymbol: symbol 'magenta' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'magenta'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'magenta'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'magenta'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'magenta'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'magenta'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'magenta'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'magenta'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'magenta'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'magenta'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'magenta'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'magenta'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'magenta'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'magenta'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'magenta'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'magenta'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'magenta'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'magenta'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'magenta'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'magenta'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'magenta'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'magenta', type=INTEGER, value_ptr=0x60b000004be0
[DEBUG] lookupSymbol: 'magenta' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'magenta' to [DEBUG_UPDATE] updateSymbol: Entry for Name='magenta', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 5
[DEBUG] lookupGlobalSymbol: Searching for 'red'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'red'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'red'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'red'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'red'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'red'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'red'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'red'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'red'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'red'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'red'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'red'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'red'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'red'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'red'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'red'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'red'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'red'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'red'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'red'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'red' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'red' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'red'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'red'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'red'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'red'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'red'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'red'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'red'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'red'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'red'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'red'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'red'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'red'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'red'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'red'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'red'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'red'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'red'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'red'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'red'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'red'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'red' not found in global_env
[DEBUG] insertGlobalSymbol('red', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'red'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'red'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'red'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'red'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'red'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'red'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'red'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'red'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'red'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'red'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'red'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'red'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'red'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'red'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'red'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'red'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'red'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'red'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'red'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'red'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'red'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'red', type=INTEGER, value_ptr=0x60b000004c90
[DEBUG] linkUnit: Successfully inserted/found global symbol 'red'.
[DEBUG] lookupGlobalSymbol: Searching for 'red'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'red'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'red'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'red'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'red'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'red'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'red'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'red'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'red'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'red'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'red'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'red'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'red'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'red'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'red'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'red'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'red'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'red'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'red'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'red'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'red'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'red', type=INTEGER, value_ptr=0x60b000004c90
[DEBUG] lookupLocalSymbol: symbol 'red' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'red'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'red'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'red'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'red'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'red'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'red'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'red'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'red'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'red'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'red'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'red'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'red'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'red'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'red'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'red'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'red'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'red'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'red'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'red'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'red'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'red'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'red', type=INTEGER, value_ptr=0x60b000004c90
[DEBUG] lookupSymbol: 'red' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'red' to [DEBUG_UPDATE] updateSymbol: Entry for Name='red', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 4
[DEBUG] lookupGlobalSymbol: Searching for 'cyan'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'cyan'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'cyan'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'cyan'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'cyan'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'cyan'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'cyan'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'cyan'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'cyan'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'cyan'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'cyan'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'cyan'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'cyan'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'cyan'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'cyan'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'cyan'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'cyan'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'cyan'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'cyan'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'cyan'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'cyan'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'cyan' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'cyan' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'cyan'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'cyan'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'cyan'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'cyan'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'cyan'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'cyan'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'cyan'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'cyan'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'cyan'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'cyan'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'cyan'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'cyan'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'cyan'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'cyan'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'cyan'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'cyan'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'cyan'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'cyan'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'cyan'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'cyan'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'cyan'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'cyan' not found in global_env
[DEBUG] insertGlobalSymbol('cyan', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'cyan'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'cyan'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'cyan'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'cyan'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'cyan'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'cyan'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'cyan'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'cyan'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'cyan'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'cyan'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'cyan'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'cyan'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'cyan'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'cyan'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'cyan'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'cyan'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'cyan'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'cyan'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'cyan'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'cyan'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'cyan'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'cyan'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'cyan', type=INTEGER, value_ptr=0x60b000004d40
[DEBUG] linkUnit: Successfully inserted/found global symbol 'cyan'.
[DEBUG] lookupGlobalSymbol: Searching for 'cyan'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'cyan'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'cyan'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'cyan'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'cyan'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'cyan'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'cyan'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'cyan'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'cyan'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'cyan'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'cyan'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'cyan'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'cyan'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'cyan'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'cyan'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'cyan'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'cyan'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'cyan'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'cyan'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'cyan'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'cyan'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'cyan'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'cyan', type=INTEGER, value_ptr=0x60b000004d40
[DEBUG] lookupLocalSymbol: symbol 'cyan' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'cyan'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'cyan'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'cyan'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'cyan'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'cyan'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'cyan'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'cyan'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'cyan'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'cyan'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'cyan'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'cyan'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'cyan'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'cyan'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'cyan'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'cyan'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'cyan'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'cyan'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'cyan'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'cyan'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'cyan'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'cyan'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'cyan'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'cyan', type=INTEGER, value_ptr=0x60b000004d40
[DEBUG] lookupSymbol: 'cyan' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'cyan' to [DEBUG_UPDATE] updateSymbol: Entry for Name='cyan', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 3
[DEBUG] lookupGlobalSymbol: Searching for 'green'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'green'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'green'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'green'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'green'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'green'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'green'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'green'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'green'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'green'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'green'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'green'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'green'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'green'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'green'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'green'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'green'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'green'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'green'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'green'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'green'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'green'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'green' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'green' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'green'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'green'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'green'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'green'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'green'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'green'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'green'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'green'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'green'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'green'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'green'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'green'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'green'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'green'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'green'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'green'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'green'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'green'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'green'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'green'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'green'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'green'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'green' not found in global_env
[DEBUG] insertGlobalSymbol('green', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'green'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'green'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'green'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'green'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'green'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'green'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'green'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'green'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'green'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'green'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'green'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'green'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'green'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'green'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'green'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'green'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'green'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'green'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'green'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'green'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'green'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'green'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'green'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'green', type=INTEGER, value_ptr=0x60b000004df0
[DEBUG] linkUnit: Successfully inserted/found global symbol 'green'.
[DEBUG] lookupGlobalSymbol: Searching for 'green'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'green'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'green'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'green'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'green'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'green'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'green'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'green'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'green'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'green'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'green'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'green'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'green'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'green'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'green'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'green'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'green'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'green'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'green'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'green'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'green'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'green'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'green'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'green', type=INTEGER, value_ptr=0x60b000004df0
[DEBUG] lookupLocalSymbol: symbol 'green' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'green'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'green'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'green'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'green'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'green'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'green'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'green'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'green'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'green'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'green'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'green'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'green'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'green'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'green'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'green'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'green'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'green'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'green'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'green'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'green'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'green'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'green'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'green'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'green', type=INTEGER, value_ptr=0x60b000004df0
[DEBUG] lookupSymbol: 'green' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'green' to [DEBUG_UPDATE] updateSymbol: Entry for Name='green', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 2
[DEBUG] lookupGlobalSymbol: Searching for 'blue'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'blue'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'blue'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'blue'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'blue'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'blue'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'blue'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'blue'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'blue'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'blue'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'blue'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'blue'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'blue'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'blue'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'blue'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'blue'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'blue'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'blue'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'blue'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'blue'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'blue'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'blue'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'blue'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'blue' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'blue' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'blue'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'blue'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'blue'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'blue'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'blue'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'blue'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'blue'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'blue'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'blue'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'blue'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'blue'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'blue'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'blue'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'blue'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'blue'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'blue'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'blue'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'blue'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'blue'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'blue'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'blue'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'blue'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'blue'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'blue' not found in global_env
[DEBUG] insertGlobalSymbol('blue', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'blue'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'blue'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'blue'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'blue'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'blue'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'blue'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'blue'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'blue'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'blue'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'blue'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'blue'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'blue'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'blue'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'blue'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'blue'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'blue'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'blue'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'blue'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'blue'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'blue'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'blue'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'blue'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'blue'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'blue'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'blue', type=INTEGER, value_ptr=0x60b000004ea0
[DEBUG] linkUnit: Successfully inserted/found global symbol 'blue'.
[DEBUG] lookupGlobalSymbol: Searching for 'blue'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'blue'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'blue'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'blue'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'blue'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'blue'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'blue'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'blue'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'blue'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'blue'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'blue'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'blue'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'blue'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'blue'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'blue'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'blue'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'blue'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'blue'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'blue'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'blue'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'blue'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'blue'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'blue'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'blue'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'blue', type=INTEGER, value_ptr=0x60b000004ea0
[DEBUG] lookupLocalSymbol: symbol 'blue' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'blue'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'blue'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'blue'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'blue'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'blue'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'blue'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'blue'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'blue'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'blue'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'blue'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'blue'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'blue'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'blue'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'blue'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'blue'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'blue'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'blue'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'blue'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'blue'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'blue'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'blue'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'blue'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'blue'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'blue'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'blue', type=INTEGER, value_ptr=0x60b000004ea0
[DEBUG] lookupSymbol: 'blue' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'blue' to [DEBUG_UPDATE] updateSymbol: Entry for Name='blue', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 1
[DEBUG] lookupGlobalSymbol: Searching for 'black'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'black'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'black'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'black'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'black'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'black'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'black'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'black'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'black'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'black'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'black'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'black'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'black'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'black'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'black'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'black'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'black'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'black'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'black'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'black'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'black'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'black'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'black'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'black'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'black' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'black' (type INTEGER) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'black'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'black'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'black'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'black'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'black'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'black'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'black'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'black'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'black'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'black'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'black'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'black'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'black'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'black'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'black'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'black'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'black'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'black'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'black'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'black'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'black'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'black'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'black'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'black'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'black' not found in global_env
[DEBUG] insertGlobalSymbol('black', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'black'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'black'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'black'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'black'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'black'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'black'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'black'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'black'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'black'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'black'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'black'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'black'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'black'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'black'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'black'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'black'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'black'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'black'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'black'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'black'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'black'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'black'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'black'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'black'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'black'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'black', type=INTEGER, value_ptr=0x60b000004f50
[DEBUG] linkUnit: Successfully inserted/found global symbol 'black'.
[DEBUG] lookupGlobalSymbol: Searching for 'black'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'black'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'black'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'black'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'black'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'black'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'black'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'black'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'black'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'black'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'black'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'black'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'black'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'black'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'black'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'black'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'black'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'black'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'black'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'black'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'black'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'black'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'black'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'black'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'black'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'black', type=INTEGER, value_ptr=0x60b000004f50
[DEBUG] lookupLocalSymbol: symbol 'black' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'black'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'black'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'black'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'black'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'black'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'black'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'black'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'black'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'black'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'black'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'black'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'black'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'black'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'black'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'black'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'black'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'black'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'black'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'black'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'black'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'black'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'black'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'black'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'black'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'black'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'black', type=INTEGER, value_ptr=0x60b000004f50
[DEBUG] lookupSymbol: 'black' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'black' to [DEBUG_UPDATE] updateSymbol: Entry for Name='black', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 0
[DEBUG] lookupGlobalSymbol: Searching for 'esc'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'esc'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'esc'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'esc'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'esc'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'esc'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'esc'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'esc'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'esc'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'esc'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'esc'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'esc'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'esc'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'esc'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'esc'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'esc'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'esc'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'esc'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'esc'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'esc'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'esc'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'esc'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'esc'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'esc'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'esc'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'esc' not found in global_env
[DEBUG] linkUnit: Attempting to insert global symbol 'esc' (type STRING) from unit.
[DEBUG] lookupGlobalSymbol: Searching for 'esc'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'esc'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'esc'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'esc'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'esc'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'esc'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'esc'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'esc'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'esc'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'esc'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'esc'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'esc'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'esc'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'esc'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'esc'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'esc'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'esc'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'esc'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'esc'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'esc'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'esc'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'esc'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'esc'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'esc'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'esc'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'esc' not found in global_env
[DEBUG] insertGlobalSymbol('esc', type=STRING)
[DEBUG] lookupGlobalSymbol: Searching for 'esc'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'esc'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'esc'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'esc'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'esc'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'esc'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'esc'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'esc'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'esc'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'esc'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'esc'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'esc'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'esc'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'esc'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'esc'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'esc'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'esc'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'esc'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'esc'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'esc'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'esc'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'esc'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'esc'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'esc'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'esc'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'esc'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'esc', type=STRING, value_ptr=0x60b000005000
[DEBUG] linkUnit: Successfully inserted/found global symbol 'esc'.
[DEBUG] lookupGlobalSymbol: Searching for 'esc'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'esc'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'esc'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'esc'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'esc'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'esc'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'esc'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'esc'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'esc'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'esc'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'esc'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'esc'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'esc'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'esc'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'esc'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'esc'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'esc'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'esc'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'esc'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'esc'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'esc'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'esc'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'esc'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'esc'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'esc'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'esc'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'esc', type=STRING, value_ptr=0x60b000005000
[DEBUG] lookupLocalSymbol: symbol 'esc' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'esc'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'esc'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'esc'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'esc'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'esc'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'esc'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'esc'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'esc'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'esc'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'esc'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'esc'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'esc'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'esc'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'esc'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'esc'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'esc'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'esc'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'esc'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'esc'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'esc'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'esc'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'esc'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'esc'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'esc'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'esc'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'esc'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'esc', type=STRING, value_ptr=0x60b000005000
[DEBUG] lookupSymbol: 'esc' found, type=STRING
[DEBUG] updateSymbol: updating symbol 'esc' to [DEBUG_UPDATE] updateSymbol: Entry for Name='esc', FoundSymType=STRING, IncomingValueType=STRING
TYPE_STRING ""
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from declarations() - Expecting: CONST, Got: CONST ('const') at Line 4, Col 6
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('cardvalues') at Line 6, Col 13
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="cardvalues", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: COLON, Got: COLON (':') at Line 6, Col 14
[DEBUG] eat(): Called from parseArrayType() - Expecting: ARRAY, Got: ARRAY ('array') at Line 6, Col 20
[DEBUG] eat(): Called from parseArrayType() - Expecting: LBRACKET, Got: LBRACKET ('[') at Line 6, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 6, Col 22
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is DOTDOT ('..')
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from parseArrayType() - Expecting: DOTDOT, Got: DOTDOT ('..') at Line 6, Col 24
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('13')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('13') at Line 6, Col 26
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="13", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RBRACKET (']')
Node(type=NUMBER, token="13", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=SUBRANGE, var_type=VOID)
[DEBUG] eat(): Called from parseArrayType() - Expecting: RBRACKET, Got: RBRACKET (']') at Line 6, Col 27
[DEBUG] eat(): Called from parseArrayType() - Expecting: OF, Got: OF ('of') at Line 6, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="string", var_type=VOID)
Changing type of AST node from VOID to STRING
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('string') at Line 6, Col 37
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_TYPE, var_type=VOID)
Changing type of AST node from VOID to ARRAY
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 6, Col 39
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: LPAREN, Got: LPAREN ('(') at Line 6, Col 41
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_INITIALIZER, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('A')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('A') at Line 7, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="A", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="A", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 9
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('2')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('2') at Line 7, Col 13
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="2", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="2", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 14
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('3')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('3') at Line 7, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="3", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="3", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 19
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('4')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('4') at Line 7, Col 23
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="4", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="4", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 24
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('5')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('5') at Line 7, Col 28
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="5", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="5", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 29
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('6')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('6') at Line 7, Col 33
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="6", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="6", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 34
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('7')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('7') at Line 7, Col 38
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="7", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="7", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 39
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('8')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('8') at Line 7, Col 43
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="8", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="8", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 44
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('9')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('9') at Line 7, Col 48
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="9", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="9", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 49
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('10')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('10') at Line 7, Col 54
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="10", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="10", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 55
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('J')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('J') at Line 7, Col 59
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="J", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="J", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 60
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('Q')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('Q') at Line 7, Col 64
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="Q", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="Q", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 7, Col 65
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('K')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('K') at Line 7, Col 69
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="K", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="K", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: RPAREN, Got: RPAREN (')') at Line 8, Col 4
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 8, Col 5
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('intsequence') at Line 11, Col 14
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="intsequence", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: COLON, Got: COLON (':') at Line 11, Col 15
[DEBUG] eat(): Called from parseArrayType() - Expecting: ARRAY, Got: ARRAY ('array') at Line 11, Col 21
[DEBUG] eat(): Called from parseArrayType() - Expecting: LBRACKET, Got: LBRACKET ('[') at Line 11, Col 22
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('0')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('0') at Line 11, Col 23
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is DOTDOT ('..')
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG] eat(): Called from parseArrayType() - Expecting: DOTDOT, Got: DOTDOT ('..') at Line 11, Col 25
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('4')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('4') at Line 11, Col 26
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RBRACKET (']')
Node(type=NUMBER, token="4", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=SUBRANGE, var_type=VOID)
[DEBUG] eat(): Called from parseArrayType() - Expecting: RBRACKET, Got: RBRACKET (']') at Line 11, Col 27
[DEBUG] eat(): Called from parseArrayType() - Expecting: OF, Got: OF ('of') at Line 11, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 11, Col 38
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_TYPE, var_type=VOID)
Changing type of AST node from VOID to ARRAY
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 11, Col 40
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: LPAREN, Got: LPAREN ('(') at Line 11, Col 42
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_INITIALIZER, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('10')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('10') at Line 11, Col 44
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 11, Col 45
[DEBUG_FACTOR] Entry: Current token is MINUS ('-')
[DEBUG] eat(): Called from factor() - Expecting: MINUS, Got: MINUS ('-') at Line 11, Col 47
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=UNARY_OP, token="-", var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('5')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('5') at Line 11, Col 48
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="5", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=UNARY_OP, token="-", var_type=VOID)
  Left:
    Node(type=NUMBER, token="5", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 11, Col 49
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('100')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('100') at Line 11, Col 53
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="100", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=NUMBER, token="100", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 11, Col 54
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('0')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('0') at Line 11, Col 56
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: COMMA, Got: COMMA (',') at Line 11, Col 57
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('42')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('42') at Line 11, Col 60
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="42", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=NUMBER, token="42", var_type=VOID)
[DEBUG] eat(): Called from parseConstantInitializer() - Expecting: RPAREN, Got: RPAREN (')') at Line 11, Col 61
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 11, Col 62
[DEBUG] eat(): Called from constDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('teststr') at Line 14, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=CONST_DECL, token="teststr", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: COLON, Got: COLON (':') at Line 14, Col 11
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="string", var_type=VOID)
Changing type of AST node from VOID to STRING
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('string') at Line 14, Col 18
[DEBUG] eat(): Called from constDeclaration() - Expecting: EQUAL, Got: EQUAL ('=') at Line 14, Col 20
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('Simple')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('Simple') at Line 14, Col 29
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="Simple", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=STRING, token="Simple", var_type=VOID)
[DEBUG] eat(): Called from constDeclaration() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 14, Col 30
[DEBUG] eat(): Called from declarations() - Expecting: VAR, Got: VAR ('var') at Line 16, Col 4
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="i", var_type=VOID)
[DEBUG] eat(): Called from varDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('i') at Line 17, Col 4
[DEBUG] eat(): Called from varDeclaration() - Expecting: COLON, Got: COLON (':') at Line 17, Col 5
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="integer", var_type=VOID)
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('integer') at Line 17, Col 13
Changing type of AST node from VOID to INTEGER
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 17, Col 14
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VAR_DECL, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="s", var_type=VOID)
[DEBUG] eat(): Called from varDeclaration() - Expecting: IDENTIFIER, Got: IDENTIFIER ('s') at Line 18, Col 4
[DEBUG] eat(): Called from varDeclaration() - Expecting: COLON, Got: COLON (':') at Line 18, Col 5
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="string", var_type=VOID)
Changing type of AST node from VOID to STRING
[DEBUG] eat(): Called from typeSpecifier() - Expecting: IDENTIFIER, Got: IDENTIFIER ('string') at Line 18, Col 12
Changing type of AST node from VOID to STRING
[DEBUG] eat(): Called from declarations() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 18, Col 13
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 20, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROCEDURE_CALL, token="clrscr", var_type=VOID)
[DEBUG] eat(): Called from statement() - Expecting: IDENTIFIER, Got: IDENTIFIER ('clrscr') at Line 21, Col 9
Node(type=PROCEDURE_CALL, token="clrscr", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 21, Col 10
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 23, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 23, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('Testing Typed Array Constants:')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('Testing Typed Array Constants:') at Line 23, Col 43
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="Testing Typed Array Constants:", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="Testing Typed Array Constants:", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 23, Col 44
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="Testing Typed Array Constants:", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="Testing Typed Array Constants:", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 23, Col 45
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 24, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 24, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('------------------------------')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('------------------------------') at Line 24, Col 43
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="------------------------------", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="------------------------------", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 24, Col 44
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="------------------------------", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="------------------------------", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 24, Col 45
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 27, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 27, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('Simple Const TestStr: ')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('Simple Const TestStr: ') at Line 27, Col 35
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="Simple Const TestStr: ", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="Simple Const TestStr: ", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 27, Col 36
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('teststr')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="teststr", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('teststr') at Line 27, Col 44
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=VARIABLE, token="teststr", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 27, Col 45
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="Simple Const TestStr: ", var_type=VOID)
    Node(type=VARIABLE, token="teststr", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="Simple Const TestStr: ", var_type=VOID)
    Node(type=VARIABLE, token="teststr", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 27, Col 46
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 28, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 28, Col 11
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 31, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 31, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('Testing CardValues (String Array):')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('Testing CardValues (String Array):') at Line 31, Col 47
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="Testing CardValues (String Array):", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="Testing CardValues (String Array):", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 31, Col 48
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="Testing CardValues (String Array):", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="Testing CardValues (String Array):", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 31, Col 49
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 32, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 32, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('CardValues[1] = ')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('CardValues[1] = ') at Line 32, Col 29
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="CardValues[1] = ", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="CardValues[1] = ", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 32, Col 30
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('cardvalues')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="cardvalues", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('cardvalues') at Line 32, Col 41
[DEBUG] eat(): Called from factor() - Expecting: LBRACKET, Got: LBRACKET ('[') at Line 32, Col 42
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_ACCESS, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 32, Col 43
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RBRACKET (']')
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RBRACKET, Got: RBRACKET (']') at Line 32, Col 44
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=ARRAY_ACCESS, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 32, Col 45
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="CardValues[1] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="cardvalues", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="1", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="CardValues[1] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="cardvalues", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 32, Col 46
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 33, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 33, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('CardValues[10] = ')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('CardValues[10] = ') at Line 33, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="CardValues[10] = ", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="CardValues[10] = ", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 33, Col 31
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('cardvalues')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="cardvalues", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('cardvalues') at Line 33, Col 42
[DEBUG] eat(): Called from factor() - Expecting: LBRACKET, Got: LBRACKET ('[') at Line 33, Col 43
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_ACCESS, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('10')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('10') at Line 33, Col 45
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RBRACKET (']')
Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RBRACKET, Got: RBRACKET (']') at Line 33, Col 46
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=ARRAY_ACCESS, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 33, Col 47
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="CardValues[10] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="cardvalues", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="10", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="CardValues[10] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="cardvalues", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="10", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 33, Col 48
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 34, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 34, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('CardValues[13] = ')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('CardValues[13] = ') at Line 34, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="CardValues[13] = ", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="CardValues[13] = ", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 34, Col 31
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('cardvalues')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="cardvalues", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('cardvalues') at Line 34, Col 42
[DEBUG] eat(): Called from factor() - Expecting: LBRACKET, Got: LBRACKET ('[') at Line 34, Col 43
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_ACCESS, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('13')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('13') at Line 34, Col 45
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="13", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RBRACKET (']')
Node(type=NUMBER, token="13", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RBRACKET, Got: RBRACKET (']') at Line 34, Col 46
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=ARRAY_ACCESS, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="13", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 34, Col 47
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="CardValues[13] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="cardvalues", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="13", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="CardValues[13] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="cardvalues", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="13", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 34, Col 48
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="s", var_type=VOID)
[DEBUG] eat(): Called from lvalue() - Expecting: IDENTIFIER, Got: IDENTIFIER ('s') at Line 37, Col 4
[DEBUG] eat(): Called from assignmentStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 37, Col 7
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('cardvalues')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="cardvalues", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('cardvalues') at Line 37, Col 18
[DEBUG] eat(): Called from factor() - Expecting: LBRACKET, Got: LBRACKET ('[') at Line 37, Col 19
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_ACCESS, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('11')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('11') at Line 37, Col 21
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="11", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RBRACKET (']')
Node(type=NUMBER, token="11", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RBRACKET, Got: RBRACKET (']') at Line 37, Col 22
[DEBUG_TERM] After Factor: Next token is SEMICOLON (';')
Node(type=ARRAY_ACCESS, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="11", var_type=VOID)
Node(type=ARRAY_ACCESS, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="11", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ASSIGN, var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="s", var_type=VOID)
  Right:
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="cardvalues", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="11", var_type=VOID)
Node(type=ASSIGN, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="s", var_type=VOID)
  Right:
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="cardvalues", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="11", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 37, Col 23
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 38, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 38, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('Assigned CardValues[11] to s: ')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('Assigned CardValues[11] to s: ') at Line 38, Col 43
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="Assigned CardValues[11] to s: ", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="Assigned CardValues[11] to s: ", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 38, Col 44
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('s')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="s", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('s') at Line 38, Col 46
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=VARIABLE, token="s", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 38, Col 47
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="Assigned CardValues[11] to s: ", var_type=VOID)
    Node(type=VARIABLE, token="s", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="Assigned CardValues[11] to s: ", var_type=VOID)
    Node(type=VARIABLE, token="s", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 38, Col 48
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 39, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 39, Col 11
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 42, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 42, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('Testing IntSequence (Integer Array):')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('Testing IntSequence (Integer Array):') at Line 42, Col 49
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="Testing IntSequence (Integer Array):", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="Testing IntSequence (Integer Array):", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 42, Col 50
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="Testing IntSequence (Integer Array):", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="Testing IntSequence (Integer Array):", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 42, Col 51
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 43, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 43, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('IntSequence[0] = ')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('IntSequence[0] = ') at Line 43, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="IntSequence[0] = ", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="IntSequence[0] = ", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 43, Col 31
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('intsequence')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="intsequence", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('intsequence') at Line 43, Col 43
[DEBUG] eat(): Called from factor() - Expecting: LBRACKET, Got: LBRACKET ('[') at Line 43, Col 44
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_ACCESS, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('0')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('0') at Line 43, Col 45
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RBRACKET (']')
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RBRACKET, Got: RBRACKET (']') at Line 43, Col 46
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=ARRAY_ACCESS, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="intsequence", var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 43, Col 47
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="IntSequence[0] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="intsequence", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="0", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="IntSequence[0] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="intsequence", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 43, Col 48
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 44, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 44, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('IntSequence[1] = ')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('IntSequence[1] = ') at Line 44, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="IntSequence[1] = ", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="IntSequence[1] = ", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 44, Col 31
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('intsequence')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="intsequence", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('intsequence') at Line 44, Col 43
[DEBUG] eat(): Called from factor() - Expecting: LBRACKET, Got: LBRACKET ('[') at Line 44, Col 44
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_ACCESS, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('1')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('1') at Line 44, Col 45
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RBRACKET (']')
Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RBRACKET, Got: RBRACKET (']') at Line 44, Col 46
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=ARRAY_ACCESS, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="intsequence", var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 44, Col 47
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="IntSequence[1] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="intsequence", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="1", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="IntSequence[1] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="intsequence", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="1", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 44, Col 48
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 45, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 45, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('IntSequence[4] = ')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('IntSequence[4] = ') at Line 45, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="IntSequence[4] = ", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=STRING, token="IntSequence[4] = ", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 45, Col 31
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('intsequence')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="intsequence", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('intsequence') at Line 45, Col 43
[DEBUG] eat(): Called from factor() - Expecting: LBRACKET, Got: LBRACKET ('[') at Line 45, Col 44
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_ACCESS, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('4')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('4') at Line 45, Col 45
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RBRACKET (']')
Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RBRACKET, Got: RBRACKET (']') at Line 45, Col 46
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=ARRAY_ACCESS, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="intsequence", var_type=VOID)
  Children (1):
    Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 45, Col 47
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="IntSequence[4] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="intsequence", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="4", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (2):
    Node(type=STRING, token="IntSequence[4] = ", var_type=VOID)
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="intsequence", var_type=VOID)
      Children (1):
        Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 45, Col 48
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 48, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 48, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('Looping through IntSequence:')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('Looping through IntSequence:') at Line 48, Col 41
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="Looping through IntSequence:", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="Looping through IntSequence:", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 48, Col 42
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="Looping through IntSequence:", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="Looping through IntSequence:", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 48, Col 43
[DEBUG] eat(): Called from forStatement() - Expecting: FOR, Got: FOR ('for') at Line 50, Col 6
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="i", var_type=VOID)
[DEBUG] eat(): Called from forStatement() - Expecting: IDENTIFIER, Got: IDENTIFIER ('i') at Line 50, Col 8
[DEBUG] eat(): Called from forStatement() - Expecting: ASSIGN, Got: ASSIGN (':=') at Line 50, Col 11
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('0')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('0') at Line 50, Col 13
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is TO ('to')
Node(type=NUMBER, token="0", var_type=VOID)
[DEBUG] eat(): Called from forStatement() - Expecting: TO, Got: TO ('to') at Line 50, Col 16
[DEBUG_FACTOR] Entry: Current token is INTEGER_CONST ('4')
[DEBUG] eat(): Called from factor() - Expecting: INTEGER_CONST, Got: INTEGER_CONST ('4') at Line 50, Col 18
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is DO ('do')
Node(type=NUMBER, token="4", var_type=VOID)
[DEBUG] eat(): Called from forStatement() - Expecting: DO, Got: DO ('do') at Line 50, Col 21
[DEBUG] eat(): Called from compoundStatement() - Expecting: BEGIN, Got: BEGIN ('begin') at Line 51, Col 8
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from writeStatement() - Expecting: WRITE, Got: WRITE ('write') at Line 52, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 52, Col 11
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('intsequence')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="intsequence", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('intsequence') at Line 52, Col 22
[DEBUG] eat(): Called from factor() - Expecting: LBRACKET, Got: LBRACKET ('[') at Line 52, Col 23
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=ARRAY_ACCESS, var_type=VOID)
[DEBUG_FACTOR] Entry: Current token is IDENTIFIER ('i')
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=VARIABLE, token="i", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: IDENTIFIER, Got: IDENTIFIER ('i') at Line 52, Col 24
[DEBUG_TERM] After Factor: Next token is RBRACKET (']')
Node(type=VARIABLE, token="i", var_type=VOID)
[DEBUG] eat(): Called from factor() - Expecting: RBRACKET, Got: RBRACKET (']') at Line 52, Col 25
[DEBUG_TERM] After Factor: Next token is COMMA (',')
Node(type=ARRAY_ACCESS, var_type=VOID)
  Left:
    Node(type=VARIABLE, token="intsequence", var_type=VOID)
  Children (1):
    Node(type=VARIABLE, token="i", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: COMMA, Got: COMMA (',') at Line 52, Col 26
[DEBUG_FACTOR] Entry: Current token is STRING_CONST (' ')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST (' ') at Line 52, Col 30
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token=" ", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token=" ", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 52, Col 31
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITE, var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="intsequence", var_type=VOID)
      Children (1):
        Node(type=VARIABLE, token="i", var_type=VOID)
    Node(type=STRING, token=" ", var_type=VOID)
Node(type=WRITE, var_type=VOID)
  Children (2):
    Node(type=ARRAY_ACCESS, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="intsequence", var_type=VOID)
      Children (1):
        Node(type=VARIABLE, token="i", var_type=VOID)
    Node(type=STRING, token=" ", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 52, Col 32
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 53, Col 6
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=ARRAY_ACCESS, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="intsequence", var_type=VOID)
          Children (1):
            Node(type=VARIABLE, token="i", var_type=VOID)
        Node(type=STRING, token=" ", var_type=VOID)
Node(type=COMPOUND, var_type=VOID)
  Children (1):
    Node(type=WRITE, var_type=VOID)
      Children (2):
        Node(type=ARRAY_ACCESS, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="intsequence", var_type=VOID)
          Children (1):
            Node(type=VARIABLE, token="i", var_type=VOID)
        Node(type=STRING, token=" ", var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=FOR_TO, token="i", var_type=VOID)
Node(type=FOR_TO, token="i", var_type=VOID)
  Left:
    Node(type=NUMBER, token="0", var_type=VOID)
  Right:
    Node(type=NUMBER, token="4", var_type=VOID)
  Extra:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=ARRAY_ACCESS, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="intsequence", var_type=VOID)
              Children (1):
                Node(type=VARIABLE, token="i", var_type=VOID)
            Node(type=STRING, token=" ", var_type=VOID)
Node(type=FOR_TO, token="i", var_type=VOID)
  Left:
    Node(type=NUMBER, token="0", var_type=VOID)
  Right:
    Node(type=NUMBER, token="4", var_type=VOID)
  Extra:
    Node(type=COMPOUND, var_type=VOID)
      Children (1):
        Node(type=WRITE, var_type=VOID)
          Children (2):
            Node(type=ARRAY_ACCESS, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="intsequence", var_type=VOID)
              Children (1):
                Node(type=VARIABLE, token="i", var_type=VOID)
            Node(type=STRING, token=" ", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 53, Col 7
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 54, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 54, Col 11
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 56, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 56, Col 11
[DEBUG] eat(): Called from writelnStatement() - Expecting: WRITELN, Got: WRITELN ('writeln') at Line 57, Col 10
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: LPAREN, Got: LPAREN ('(') at Line 57, Col 11
[DEBUG_FACTOR] Entry: Current token is STRING_CONST ('Test complete.')
[DEBUG] eat(): Called from factor() - Expecting: STRING_CONST, Got: STRING_CONST ('Test complete.') at Line 57, Col 27
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=STRING, token="Test complete.", var_type=VOID)
[DEBUG_TERM] After Factor: Next token is RPAREN (')')
Node(type=STRING, token="Test complete.", var_type=VOID)
[DEBUG] eat(): Called from parseWriteArguments() - Expecting: RPAREN, Got: RPAREN (')') at Line 57, Col 28
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=WRITELN, var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="Test complete.", var_type=VOID)
Node(type=WRITELN, var_type=VOID)
  Children (1):
    Node(type=STRING, token="Test complete.", var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 57, Col 29
[DEBUG] eat(): Called from readlnStatement() - Expecting: READLN, Got: READLN ('readln') at Line 58, Col 9
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=READLN, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=COMPOUND, var_type=VOID)
Node(type=READLN, var_type=VOID)
Node(type=READLN, var_type=VOID)
[DEBUG] eat(): Called from compoundStatement() - Expecting: SEMICOLON, Got: SEMICOLON (';') at Line 58, Col 10
[DEBUG] eat(): Called from compoundStatement() - Expecting: END, Got: END ('end') at Line 60, Col 4
Node(type=COMPOUND, var_type=VOID)
  Children (22):
    Node(type=PROCEDURE_CALL, token="clrscr", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (1):
        Node(type=STRING, token="Testing Typed Array Constants:", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (1):
        Node(type=STRING, token="------------------------------", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (2):
        Node(type=STRING, token="Simple Const TestStr: ", var_type=VOID)
        Node(type=VARIABLE, token="teststr", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (1):
        Node(type=STRING, token="Testing CardValues (String Array):", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (2):
        Node(type=STRING, token="CardValues[1] = ", var_type=VOID)
        Node(type=ARRAY_ACCESS, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="cardvalues", var_type=VOID)
          Children (1):
            Node(type=NUMBER, token="1", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (2):
        Node(type=STRING, token="CardValues[10] = ", var_type=VOID)
        Node(type=ARRAY_ACCESS, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="cardvalues", var_type=VOID)
          Children (1):
            Node(type=NUMBER, token="10", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (2):
        Node(type=STRING, token="CardValues[13] = ", var_type=VOID)
        Node(type=ARRAY_ACCESS, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="cardvalues", var_type=VOID)
          Children (1):
            Node(type=NUMBER, token="13", var_type=VOID)
    Node(type=ASSIGN, var_type=VOID)
      Left:
        Node(type=VARIABLE, token="s", var_type=VOID)
      Right:
        Node(type=ARRAY_ACCESS, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="cardvalues", var_type=VOID)
          Children (1):
            Node(type=NUMBER, token="11", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (2):
        Node(type=STRING, token="Assigned CardValues[11] to s: ", var_type=VOID)
        Node(type=VARIABLE, token="s", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (1):
        Node(type=STRING, token="Testing IntSequence (Integer Array):", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (2):
        Node(type=STRING, token="IntSequence[0] = ", var_type=VOID)
        Node(type=ARRAY_ACCESS, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="intsequence", var_type=VOID)
          Children (1):
            Node(type=NUMBER, token="0", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (2):
        Node(type=STRING, token="IntSequence[1] = ", var_type=VOID)
        Node(type=ARRAY_ACCESS, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="intsequence", var_type=VOID)
          Children (1):
            Node(type=NUMBER, token="1", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (2):
        Node(type=STRING, token="IntSequence[4] = ", var_type=VOID)
        Node(type=ARRAY_ACCESS, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="intsequence", var_type=VOID)
          Children (1):
            Node(type=NUMBER, token="4", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (1):
        Node(type=STRING, token="Looping through IntSequence:", var_type=VOID)
    Node(type=FOR_TO, token="i", var_type=VOID)
      Left:
        Node(type=NUMBER, token="0", var_type=VOID)
      Right:
        Node(type=NUMBER, token="4", var_type=VOID)
      Extra:
        Node(type=COMPOUND, var_type=VOID)
          Children (1):
            Node(type=WRITE, var_type=VOID)
              Children (2):
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="intsequence", var_type=VOID)
                  Children (1):
                    Node(type=VARIABLE, token="i", var_type=VOID)
                Node(type=STRING, token=" ", var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
    Node(type=WRITELN, var_type=VOID)
      Children (1):
        Node(type=STRING, token="Test complete.", var_type=VOID)
    Node(type=READLN, var_type=VOID)
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=BLOCK, var_type=VOID)
Node(type=BLOCK, var_type=VOID)
  Children (2):
    Node(type=COMPOUND, var_type=VOID)
      Children (5):
        Node(type=CONST_DECL, token="cardvalues", var_type=ARRAY)
          Left:
            Node(type=ARRAY_INITIALIZER, var_type=VOID)
              Children (13):
                Node(type=STRING, token="A", var_type=VOID)
                Node(type=STRING, token="2", var_type=VOID)
                Node(type=STRING, token="3", var_type=VOID)
                Node(type=STRING, token="4", var_type=VOID)
                Node(type=STRING, token="5", var_type=VOID)
                Node(type=STRING, token="6", var_type=VOID)
                Node(type=STRING, token="7", var_type=VOID)
                Node(type=STRING, token="8", var_type=VOID)
                Node(type=STRING, token="9", var_type=VOID)
                Node(type=STRING, token="10", var_type=VOID)
                Node(type=STRING, token="J", var_type=VOID)
                Node(type=STRING, token="Q", var_type=VOID)
                Node(type=STRING, token="K", var_type=VOID)
          Right:
            Node(type=ARRAY_TYPE, var_type=ARRAY)
              Right:
                Node(type=VARIABLE, token="string", var_type=STRING)
              Children (1):
                Node(type=SUBRANGE, var_type=VOID)
                  Left:
                    Node(type=NUMBER, token="1", var_type=VOID)
                  Right:
                    Node(type=NUMBER, token="13", var_type=VOID)
        Node(type=CONST_DECL, token="intsequence", var_type=ARRAY)
          Left:
            Node(type=ARRAY_INITIALIZER, var_type=VOID)
              Children (5):
                Node(type=NUMBER, token="10", var_type=VOID)
                Node(type=UNARY_OP, token="-", var_type=VOID)
                  Left:
                    Node(type=NUMBER, token="5", var_type=VOID)
                Node(type=NUMBER, token="100", var_type=VOID)
                Node(type=NUMBER, token="0", var_type=VOID)
                Node(type=NUMBER, token="42", var_type=VOID)
          Right:
            Node(type=ARRAY_TYPE, var_type=ARRAY)
              Right:
                Node(type=VARIABLE, token="integer", var_type=INTEGER)
              Children (1):
                Node(type=SUBRANGE, var_type=VOID)
                  Left:
                    Node(type=NUMBER, token="0", var_type=VOID)
                  Right:
                    Node(type=NUMBER, token="4", var_type=VOID)
        Node(type=CONST_DECL, token="teststr", var_type=STRING)
          Left:
            Node(type=STRING, token="Simple", var_type=VOID)
          Right:
            Node(type=VARIABLE, token="string", var_type=STRING)
        Node(type=VAR_DECL, var_type=INTEGER)
          Right:
            Node(type=VARIABLE, token="integer", var_type=INTEGER)
          Children (1):
            Node(type=VARIABLE, token="i", var_type=VOID)
        Node(type=VAR_DECL, var_type=STRING)
          Right:
            Node(type=VARIABLE, token="string", var_type=STRING)
          Children (1):
            Node(type=VARIABLE, token="s", var_type=VOID)
    Node(type=COMPOUND, var_type=VOID)
      Children (22):
        Node(type=PROCEDURE_CALL, token="clrscr", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (1):
            Node(type=STRING, token="Testing Typed Array Constants:", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (1):
            Node(type=STRING, token="------------------------------", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (2):
            Node(type=STRING, token="Simple Const TestStr: ", var_type=VOID)
            Node(type=VARIABLE, token="teststr", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (1):
            Node(type=STRING, token="Testing CardValues (String Array):", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (2):
            Node(type=STRING, token="CardValues[1] = ", var_type=VOID)
            Node(type=ARRAY_ACCESS, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="cardvalues", var_type=VOID)
              Children (1):
                Node(type=NUMBER, token="1", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (2):
            Node(type=STRING, token="CardValues[10] = ", var_type=VOID)
            Node(type=ARRAY_ACCESS, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="cardvalues", var_type=VOID)
              Children (1):
                Node(type=NUMBER, token="10", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (2):
            Node(type=STRING, token="CardValues[13] = ", var_type=VOID)
            Node(type=ARRAY_ACCESS, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="cardvalues", var_type=VOID)
              Children (1):
                Node(type=NUMBER, token="13", var_type=VOID)
        Node(type=ASSIGN, var_type=VOID)
          Left:
            Node(type=VARIABLE, token="s", var_type=VOID)
          Right:
            Node(type=ARRAY_ACCESS, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="cardvalues", var_type=VOID)
              Children (1):
                Node(type=NUMBER, token="11", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (2):
            Node(type=STRING, token="Assigned CardValues[11] to s: ", var_type=VOID)
            Node(type=VARIABLE, token="s", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (1):
            Node(type=STRING, token="Testing IntSequence (Integer Array):", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (2):
            Node(type=STRING, token="IntSequence[0] = ", var_type=VOID)
            Node(type=ARRAY_ACCESS, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="intsequence", var_type=VOID)
              Children (1):
                Node(type=NUMBER, token="0", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (2):
            Node(type=STRING, token="IntSequence[1] = ", var_type=VOID)
            Node(type=ARRAY_ACCESS, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="intsequence", var_type=VOID)
              Children (1):
                Node(type=NUMBER, token="1", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (2):
            Node(type=STRING, token="IntSequence[4] = ", var_type=VOID)
            Node(type=ARRAY_ACCESS, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="intsequence", var_type=VOID)
              Children (1):
                Node(type=NUMBER, token="4", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (1):
            Node(type=STRING, token="Looping through IntSequence:", var_type=VOID)
        Node(type=FOR_TO, token="i", var_type=VOID)
          Left:
            Node(type=NUMBER, token="0", var_type=VOID)
          Right:
            Node(type=NUMBER, token="4", var_type=VOID)
          Extra:
            Node(type=COMPOUND, var_type=VOID)
              Children (1):
                Node(type=WRITE, var_type=VOID)
                  Children (2):
                    Node(type=ARRAY_ACCESS, var_type=VOID)
                      Left:
                        Node(type=VARIABLE, token="intsequence", var_type=VOID)
                      Children (1):
                        Node(type=VARIABLE, token="i", var_type=VOID)
                    Node(type=STRING, token=" ", var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
        Node(type=WRITELN, var_type=VOID)
          Children (1):
            Node(type=STRING, token="Test complete.", var_type=VOID)
        Node(type=READLN, var_type=VOID)
[DEBUG] eat(): Called from buildProgramAST() - Expecting: PERIOD, Got: PERIOD ('.') at Line 60, Col 5
Changing type of AST node from UNKNOWN_VAR_TYPE to VOID
Node(type=PROGRAM, token="program", var_type=VOID)
[Annotate] Processing VARIABLE Usage: string in scope Global (Current node type: STRING)
[Annotate]   Identifier 'string' not found as variable or type.
[Annotate]   After processing, node 'string' var_type is now: VOID
[Annotate] Processing VARIABLE Usage: integer in scope Global (Current node type: INTEGER)
[Annotate]   Identifier 'integer' not found as variable or type.
[Annotate]   After processing, node 'integer' var_type is now: VOID
[Annotate] Processing VARIABLE Usage: string in scope Global (Current node type: STRING)
[Annotate]   Identifier 'string' not found as variable or type.
[Annotate]   After processing, node 'string' var_type is now: VOID
[Annotate] Processing VARIABLE Usage: i in scope Global (Current node type: VOID)
[Annotate]   Found declaration for 'i'. Set type to INTEGER.
[Annotate]   After processing, node 'i' var_type is now: INTEGER
[Annotate] Processing VARIABLE Usage: s in scope Global (Current node type: VOID)
[Annotate]   Found declaration for 's'. Set type to STRING.
[Annotate]   After processing, node 's' var_type is now: STRING
[Annotate] Call 'clrscr' annotated with type VOID
[Annotate] Processing VARIABLE Usage: teststr in scope Global (Current node type: VOID)
[Annotate]   Identifier 'teststr' not found as variable or type.
[Annotate]   After processing, node 'teststr' var_type is now: VOID
[Annotate] Processing VARIABLE Usage: cardvalues in scope Global (Current node type: VOID)
[Annotate]   Identifier 'cardvalues' not found as variable or type.
[Annotate]   After processing, node 'cardvalues' var_type is now: VOID
[Annotate] Array Access annotated with type VOID
[Annotate] Processing VARIABLE Usage: cardvalues in scope Global (Current node type: VOID)
[Annotate]   Identifier 'cardvalues' not found as variable or type.
[Annotate]   After processing, node 'cardvalues' var_type is now: VOID
[Annotate] Array Access annotated with type VOID
[Annotate] Processing VARIABLE Usage: cardvalues in scope Global (Current node type: VOID)
[Annotate]   Identifier 'cardvalues' not found as variable or type.
[Annotate]   After processing, node 'cardvalues' var_type is now: VOID
[Annotate] Array Access annotated with type VOID
[Annotate] Processing VARIABLE Usage: s in scope Global (Current node type: VOID)
[Annotate]   Found declaration for 's'. Set type to STRING.
[Annotate]   After processing, node 's' var_type is now: STRING
[Annotate] Processing VARIABLE Usage: cardvalues in scope Global (Current node type: VOID)
[Annotate]   Identifier 'cardvalues' not found as variable or type.
[Annotate]   After processing, node 'cardvalues' var_type is now: VOID
[Annotate] Array Access annotated with type VOID
[Annotate] Processing VARIABLE Usage: s in scope Global (Current node type: VOID)
[Annotate]   Found declaration for 's'. Set type to STRING.
[Annotate]   After processing, node 's' var_type is now: STRING
[Annotate] Processing VARIABLE Usage: intsequence in scope Global (Current node type: VOID)
[Annotate]   Identifier 'intsequence' not found as variable or type.
[Annotate]   After processing, node 'intsequence' var_type is now: VOID
[Annotate] Array Access annotated with type VOID
[Annotate] Processing VARIABLE Usage: intsequence in scope Global (Current node type: VOID)
[Annotate]   Identifier 'intsequence' not found as variable or type.
[Annotate]   After processing, node 'intsequence' var_type is now: VOID
[Annotate] Array Access annotated with type VOID
[Annotate] Processing VARIABLE Usage: intsequence in scope Global (Current node type: VOID)
[Annotate]   Identifier 'intsequence' not found as variable or type.
[Annotate]   After processing, node 'intsequence' var_type is now: VOID
[Annotate] Array Access annotated with type VOID
[Annotate] Processing VARIABLE Usage: intsequence in scope Global (Current node type: VOID)
[Annotate]   Identifier 'intsequence' not found as variable or type.
[Annotate]   After processing, node 'intsequence' var_type is now: VOID
[Annotate] Processing VARIABLE Usage: i in scope Global (Current node type: VOID)
[Annotate]   Found declaration for 'i'. Set type to INTEGER.
[Annotate]   After processing, node 'i' var_type is now: INTEGER
[Annotate] Array Access annotated with type VOID
Node(type=PROGRAM, token="program", var_type=VOID)
  Left:
    Node(type=VARIABLE, token="testarrayconst", var_type=VOID)
  Right:
    Node(type=BLOCK, var_type=VOID)
      Children (2):
        Node(type=COMPOUND, var_type=VOID)
          Children (5):
            Node(type=CONST_DECL, token="cardvalues", var_type=ARRAY)
              Left:
                Node(type=ARRAY_INITIALIZER, var_type=VOID)
                  Children (13):
                    Node(type=STRING, token="A", var_type=STRING)
                    Node(type=STRING, token="2", var_type=STRING)
                    Node(type=STRING, token="3", var_type=STRING)
                    Node(type=STRING, token="4", var_type=STRING)
                    Node(type=STRING, token="5", var_type=STRING)
                    Node(type=STRING, token="6", var_type=STRING)
                    Node(type=STRING, token="7", var_type=STRING)
                    Node(type=STRING, token="8", var_type=STRING)
                    Node(type=STRING, token="9", var_type=STRING)
                    Node(type=STRING, token="10", var_type=STRING)
                    Node(type=STRING, token="J", var_type=STRING)
                    Node(type=STRING, token="Q", var_type=STRING)
                    Node(type=STRING, token="K", var_type=STRING)
              Right:
                Node(type=ARRAY_TYPE, var_type=ARRAY)
                  Right:
                    Node(type=VARIABLE, token="string", var_type=VOID)
                  Children (1):
                    Node(type=SUBRANGE, var_type=VOID)
                      Left:
                        Node(type=NUMBER, token="1", var_type=INTEGER)
                      Right:
                        Node(type=NUMBER, token="13", var_type=INTEGER)
            Node(type=CONST_DECL, token="intsequence", var_type=ARRAY)
              Left:
                Node(type=ARRAY_INITIALIZER, var_type=VOID)
                  Children (5):
                    Node(type=NUMBER, token="10", var_type=INTEGER)
                    Node(type=UNARY_OP, token="-", var_type=INTEGER)
                      Left:
                        Node(type=NUMBER, token="5", var_type=INTEGER)
                    Node(type=NUMBER, token="100", var_type=INTEGER)
                    Node(type=NUMBER, token="0", var_type=INTEGER)
                    Node(type=NUMBER, token="42", var_type=INTEGER)
              Right:
                Node(type=ARRAY_TYPE, var_type=ARRAY)
                  Right:
                    Node(type=VARIABLE, token="integer", var_type=VOID)
                  Children (1):
                    Node(type=SUBRANGE, var_type=VOID)
                      Left:
                        Node(type=NUMBER, token="0", var_type=INTEGER)
                      Right:
                        Node(type=NUMBER, token="4", var_type=INTEGER)
            Node(type=CONST_DECL, token="teststr", var_type=STRING)
              Left:
                Node(type=STRING, token="Simple", var_type=STRING)
              Right:
                Node(type=VARIABLE, token="string", var_type=VOID)
            Node(type=VAR_DECL, var_type=INTEGER)
              Right:
                Node(type=VARIABLE, token="integer", var_type=INTEGER)
              Children (1):
                Node(type=VARIABLE, token="i", var_type=INTEGER)
                  Right:
                    Node(type=VARIABLE, token="integer", var_type=INTEGER)
            Node(type=VAR_DECL, var_type=STRING)
              Right:
                Node(type=VARIABLE, token="string", var_type=STRING)
              Children (1):
                Node(type=VARIABLE, token="s", var_type=STRING)
                  Right:
                    Node(type=VARIABLE, token="string", var_type=STRING)
        Node(type=COMPOUND, var_type=VOID)
          Children (22):
            Node(type=PROCEDURE_CALL, token="clrscr", var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="Testing Typed Array Constants:", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="------------------------------", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="Simple Const TestStr: ", var_type=STRING)
                Node(type=VARIABLE, token="teststr", var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="Testing CardValues (String Array):", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="CardValues[1] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="1", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="CardValues[10] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="10", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="CardValues[13] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="13", var_type=INTEGER)
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="s", var_type=STRING)
                  Right:
                    Node(type=VARIABLE, token="string", var_type=STRING)
              Right:
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="11", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="Assigned CardValues[11] to s: ", var_type=STRING)
                Node(type=VARIABLE, token="s", var_type=STRING)
                  Right:
                    Node(type=VARIABLE, token="string", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="Testing IntSequence (Integer Array):", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="IntSequence[0] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="intsequence", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="0", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="IntSequence[1] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="intsequence", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="1", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="IntSequence[4] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="intsequence", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="4", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="Looping through IntSequence:", var_type=STRING)
            Node(type=FOR_TO, token="i", var_type=VOID)
              Left:
                Node(type=NUMBER, token="0", var_type=INTEGER)
              Right:
                Node(type=NUMBER, token="4", var_type=INTEGER)
              Extra:
                Node(type=COMPOUND, var_type=VOID)
                  Children (1):
                    Node(type=WRITE, var_type=VOID)
                      Children (2):
                        Node(type=ARRAY_ACCESS, var_type=VOID)
                          Left:
                            Node(type=VARIABLE, token="intsequence", var_type=VOID)
                          Children (1):
                            Node(type=VARIABLE, token="i", var_type=INTEGER)
                              Right:
                                Node(type=VARIABLE, token="integer", var_type=INTEGER)
                        Node(type=STRING, token=" ", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="Test complete.", var_type=STRING)
            Node(type=READLN, var_type=VOID)
  Children (1):
    Node(type=USES_CLAUSE, var_type=VOID)
      Children (1):
        Node(type=LIST, var_type=VOID)

--- Build AST Before Execution END---

--- Executing Program AST ---
 ===== FINAL AST DUMP START =====
Node(type=PROGRAM, token="program", var_type=VOID)
  Left:
    Node(type=VARIABLE, token="testarrayconst", var_type=VOID)
  Right:
    Node(type=BLOCK, var_type=VOID)
      Children (2):
        Node(type=COMPOUND, var_type=VOID)
          Children (5):
            Node(type=CONST_DECL, token="cardvalues", var_type=ARRAY)
              Left:
                Node(type=ARRAY_INITIALIZER, var_type=VOID)
                  Children (13):
                    Node(type=STRING, token="A", var_type=STRING)
                    Node(type=STRING, token="2", var_type=STRING)
                    Node(type=STRING, token="3", var_type=STRING)
                    Node(type=STRING, token="4", var_type=STRING)
                    Node(type=STRING, token="5", var_type=STRING)
                    Node(type=STRING, token="6", var_type=STRING)
                    Node(type=STRING, token="7", var_type=STRING)
                    Node(type=STRING, token="8", var_type=STRING)
                    Node(type=STRING, token="9", var_type=STRING)
                    Node(type=STRING, token="10", var_type=STRING)
                    Node(type=STRING, token="J", var_type=STRING)
                    Node(type=STRING, token="Q", var_type=STRING)
                    Node(type=STRING, token="K", var_type=STRING)
              Right:
                Node(type=ARRAY_TYPE, var_type=ARRAY)
                  Right:
                    Node(type=VARIABLE, token="string", var_type=VOID)
                  Children (1):
                    Node(type=SUBRANGE, var_type=VOID)
                      Left:
                        Node(type=NUMBER, token="1", var_type=INTEGER)
                      Right:
                        Node(type=NUMBER, token="13", var_type=INTEGER)
            Node(type=CONST_DECL, token="intsequence", var_type=ARRAY)
              Left:
                Node(type=ARRAY_INITIALIZER, var_type=VOID)
                  Children (5):
                    Node(type=NUMBER, token="10", var_type=INTEGER)
                    Node(type=UNARY_OP, token="-", var_type=INTEGER)
                      Left:
                        Node(type=NUMBER, token="5", var_type=INTEGER)
                    Node(type=NUMBER, token="100", var_type=INTEGER)
                    Node(type=NUMBER, token="0", var_type=INTEGER)
                    Node(type=NUMBER, token="42", var_type=INTEGER)
              Right:
                Node(type=ARRAY_TYPE, var_type=ARRAY)
                  Right:
                    Node(type=VARIABLE, token="integer", var_type=VOID)
                  Children (1):
                    Node(type=SUBRANGE, var_type=VOID)
                      Left:
                        Node(type=NUMBER, token="0", var_type=INTEGER)
                      Right:
                        Node(type=NUMBER, token="4", var_type=INTEGER)
            Node(type=CONST_DECL, token="teststr", var_type=STRING)
              Left:
                Node(type=STRING, token="Simple", var_type=STRING)
              Right:
                Node(type=VARIABLE, token="string", var_type=VOID)
            Node(type=VAR_DECL, var_type=INTEGER)
              Right:
                Node(type=VARIABLE, token="integer", var_type=INTEGER)
              Children (1):
                Node(type=VARIABLE, token="i", var_type=INTEGER)
                  Right:
                    Node(type=VARIABLE, token="integer", var_type=INTEGER)
            Node(type=VAR_DECL, var_type=STRING)
              Right:
                Node(type=VARIABLE, token="string", var_type=STRING)
              Children (1):
                Node(type=VARIABLE, token="s", var_type=STRING)
                  Right:
                    Node(type=VARIABLE, token="string", var_type=STRING)
        Node(type=COMPOUND, var_type=VOID)
          Children (22):
            Node(type=PROCEDURE_CALL, token="clrscr", var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="Testing Typed Array Constants:", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="------------------------------", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="Simple Const TestStr: ", var_type=STRING)
                Node(type=VARIABLE, token="teststr", var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="Testing CardValues (String Array):", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="CardValues[1] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="1", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="CardValues[10] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="10", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="CardValues[13] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="13", var_type=INTEGER)
            Node(type=ASSIGN, var_type=VOID)
              Left:
                Node(type=VARIABLE, token="s", var_type=STRING)
                  Right:
                    Node(type=VARIABLE, token="string", var_type=STRING)
              Right:
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="cardvalues", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="11", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="Assigned CardValues[11] to s: ", var_type=STRING)
                Node(type=VARIABLE, token="s", var_type=STRING)
                  Right:
                    Node(type=VARIABLE, token="string", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="Testing IntSequence (Integer Array):", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="IntSequence[0] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="intsequence", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="0", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="IntSequence[1] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="intsequence", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="1", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (2):
                Node(type=STRING, token="IntSequence[4] = ", var_type=STRING)
                Node(type=ARRAY_ACCESS, var_type=VOID)
                  Left:
                    Node(type=VARIABLE, token="intsequence", var_type=VOID)
                  Children (1):
                    Node(type=NUMBER, token="4", var_type=INTEGER)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="Looping through IntSequence:", var_type=STRING)
            Node(type=FOR_TO, token="i", var_type=VOID)
              Left:
                Node(type=NUMBER, token="0", var_type=INTEGER)
              Right:
                Node(type=NUMBER, token="4", var_type=INTEGER)
              Extra:
                Node(type=COMPOUND, var_type=VOID)
                  Children (1):
                    Node(type=WRITE, var_type=VOID)
                      Children (2):
                        Node(type=ARRAY_ACCESS, var_type=VOID)
                          Left:
                            Node(type=VARIABLE, token="intsequence", var_type=VOID)
                          Children (1):
                            Node(type=VARIABLE, token="i", var_type=INTEGER)
                              Right:
                                Node(type=VARIABLE, token="integer", var_type=INTEGER)
                        Node(type=STRING, token=" ", var_type=STRING)
            Node(type=WRITELN, var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
            Node(type=WRITELN, var_type=VOID)
              Children (1):
                Node(type=STRING, token="Test complete.", var_type=STRING)
            Node(type=READLN, var_type=VOID)
  Children (1):
    Node(type=USES_CLAUSE, var_type=VOID)
      Children (1):
        Node(type=LIST, var_type=VOID)
 ===== FINAL AST DUMP END =====
>> Executing AST node: type=PROGRAM, token='program'
>> Executing AST node: type=BLOCK, token='NULL'
[DEBUG] Processing typed constant 'cardvalues' (specified type node exists)
[DEBUG]   Determined specified type for 'cardvalues' as: ARRAY
[DEBUG]   Processing ARRAY constant initializer for 'cardvalues'
[DEBUG] makeArrayND: Creating 1-D array, element_type=STRING
[DEBUG] makeArrayND: Dimension 1 => lower_bound=1, upper_bound=13, size=13
[DEBUG] makeArrayND: total_size=13
[DEBUG] makeArrayND: Finished initializing array.
[DEBUG] eval AST_STRING: token value='A'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content 'A' at 0x602000020010
[DEBUG] eval AST_STRING: token value='2'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content '2' at 0x602000020050
[DEBUG] eval AST_STRING: token value='3'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content '3' at 0x602000020090
[DEBUG] eval AST_STRING: token value='4'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content '4' at 0x6020000200d0
[DEBUG] eval AST_STRING: token value='5'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content '5' at 0x602000020110
[DEBUG] eval AST_STRING: token value='6'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content '6' at 0x602000020150
[DEBUG] eval AST_STRING: token value='7'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content '7' at 0x602000020190
[DEBUG] eval AST_STRING: token value='8'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content '8' at 0x6020000201d0
[DEBUG] eval AST_STRING: token value='9'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content '9' at 0x602000020210
[DEBUG] eval AST_STRING: token value='10'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content '10' at 0x602000020250
[DEBUG] eval AST_STRING: token value='J'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content 'J' at 0x602000020290
[DEBUG] eval AST_STRING: token value='Q'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content 'Q' at 0x6020000202d0
[DEBUG] eval AST_STRING: token value='K'
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=STRING
[DEBUG_FREE]   Freeing string content 'K' at 0x602000020310
[DEBUG] lookupGlobalSymbol: Searching for 'cardvalues'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'cardvalues'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'cardvalues'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'cardvalues'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'cardvalues'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'cardvalues'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'cardvalues'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'cardvalues'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'cardvalues'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'cardvalues'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'cardvalues'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'cardvalues'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'cardvalues'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'cardvalues'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'cardvalues'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'cardvalues'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'cardvalues'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'cardvalues'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'cardvalues'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'cardvalues'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'cardvalues'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'cardvalues'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'cardvalues'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'cardvalues'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'cardvalues'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'cardvalues'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'cardvalues' not found in global_env
[DEBUG] insertGlobalSymbol('cardvalues', type=ARRAY)
[DEBUG] lookupLocalSymbol: symbol 'cardvalues' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'cardvalues'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'cardvalues'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'cardvalues'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'cardvalues'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'cardvalues'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'cardvalues'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'cardvalues'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'cardvalues'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'cardvalues'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'cardvalues'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'cardvalues'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'cardvalues'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'cardvalues'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'cardvalues'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'cardvalues'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'cardvalues'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'cardvalues'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'cardvalues'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'cardvalues'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'cardvalues'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'cardvalues'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'cardvalues'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'cardvalues'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'cardvalues'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'cardvalues'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'cardvalues'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a50, name 'cardvalues' against 'cardvalues'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'cardvalues', type=ARRAY, value_ptr=0x60b0000050b0
[DEBUG] lookupSymbol: 'cardvalues' found, type=ARRAY
[DEBUG] updateSymbol: updating symbol 'cardvalues' to [DEBUG_UPDATE] updateSymbol: Entry for Name='cardvalues', FoundSymType=ARRAY, IncomingValueType=ARRAY
Type ARRAY
[DEBUG] Processing typed constant 'intsequence' (specified type node exists)
[DEBUG]   Determined specified type for 'intsequence' as: ARRAY
[DEBUG]   Processing ARRAY constant initializer for 'intsequence'
[DEBUG] makeArrayND: Creating 1-D array, element_type=INTEGER
[DEBUG] makeArrayND: Dimension 1 => lower_bound=0, upper_bound=4, size=5
[DEBUG] makeArrayND: total_size=5
[DEBUG] makeArrayND: Finished initializing array.
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=INTEGER
[DEBUG_FREE]   No heap data to free for type INTEGER
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=INTEGER
[DEBUG_FREE]   No heap data to free for type INTEGER
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=INTEGER
[DEBUG_FREE]   No heap data to free for type INTEGER
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=INTEGER
[DEBUG_FREE]   No heap data to free for type INTEGER
[DEBUG_FREE] freeValue called for Value* at 0x16d943150, type=INTEGER
[DEBUG_FREE]   No heap data to free for type INTEGER
[DEBUG] lookupGlobalSymbol: Searching for 'intsequence'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'intsequence'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'intsequence'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'intsequence'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'intsequence'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'intsequence'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'intsequence'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'intsequence'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'intsequence'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'intsequence'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'intsequence'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'intsequence'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'intsequence'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'intsequence'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'intsequence'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'intsequence'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'intsequence'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'intsequence'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'intsequence'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'intsequence'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'intsequence'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'intsequence'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'intsequence'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'intsequence'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'intsequence'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'intsequence'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a50, name 'cardvalues' against 'intsequence'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'intsequence' not found in global_env
[DEBUG] insertGlobalSymbol('intsequence', type=ARRAY)
[DEBUG] lookupLocalSymbol: symbol 'intsequence' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'intsequence'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'intsequence'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'intsequence'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'intsequence'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'intsequence'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'intsequence'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'intsequence'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'intsequence'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'intsequence'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'intsequence'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'intsequence'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'intsequence'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'intsequence'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'intsequence'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'intsequence'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'intsequence'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'intsequence'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'intsequence'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'intsequence'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'intsequence'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'intsequence'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'intsequence'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'intsequence'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'intsequence'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'intsequence'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'intsequence'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a50, name 'cardvalues' against 'intsequence'. next=0x604000002a90
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a90, name 'intsequence' against 'intsequence'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'intsequence', type=ARRAY, value_ptr=0x60b000005210
[DEBUG] lookupSymbol: 'intsequence' found, type=ARRAY
[DEBUG] updateSymbol: updating symbol 'intsequence' to [DEBUG_UPDATE] updateSymbol: Entry for Name='intsequence', FoundSymType=ARRAY, IncomingValueType=ARRAY
Type ARRAY
[DEBUG] Processing typed constant 'teststr' (specified type node exists)
[DEBUG]   Determined specified type for 'teststr' as: STRING
[DEBUG]   Processing simple typed constant 'teststr' of type STRING
[DEBUG] eval AST_STRING: token value='Simple'
[DEBUG] lookupGlobalSymbol: Searching for 'teststr'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'teststr'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'teststr'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'teststr'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'teststr'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'teststr'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'teststr'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'teststr'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'teststr'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'teststr'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'teststr'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'teststr'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'teststr'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'teststr'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'teststr'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'teststr'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'teststr'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'teststr'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'teststr'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'teststr'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'teststr'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'teststr'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'teststr'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'teststr'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'teststr'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'teststr'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a50, name 'cardvalues' against 'teststr'. next=0x604000002a90
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a90, name 'intsequence' against 'teststr'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'teststr' not found in global_env
[DEBUG] insertGlobalSymbol('teststr', type=STRING)
[DEBUG] lookupLocalSymbol: symbol 'teststr' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'teststr'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'teststr'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'teststr'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'teststr'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'teststr'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'teststr'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'teststr'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'teststr'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'teststr'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'teststr'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'teststr'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'teststr'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'teststr'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'teststr'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'teststr'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'teststr'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'teststr'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'teststr'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'teststr'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'teststr'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'teststr'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'teststr'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'teststr'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'teststr'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'teststr'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'teststr'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a50, name 'cardvalues' against 'teststr'. next=0x604000002a90
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a90, name 'intsequence' against 'teststr'. next=0x604000002ad0
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002ad0, name 'teststr' against 'teststr'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'teststr', type=STRING, value_ptr=0x60b000005370
[DEBUG] lookupSymbol: 'teststr' found, type=STRING
[DEBUG] updateSymbol: updating symbol 'teststr' to [DEBUG_UPDATE] updateSymbol: Entry for Name='teststr', FoundSymType=STRING, IncomingValueType=STRING
TYPE_STRING "Simple"
[DEBUG] lookupGlobalSymbol: Searching for 'i'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'i'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'i'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'i'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'i'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'i'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'i'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'i'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'i'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'i'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'i'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'i'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'i'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'i'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'i'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'i'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'i'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'i'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'i'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'i'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'i'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'i'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'i'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'i'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'i'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'i'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a50, name 'cardvalues' against 'i'. next=0x604000002a90
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a90, name 'intsequence' against 'i'. next=0x604000002ad0
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002ad0, name 'teststr' against 'i'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 'i' not found in global_env
[DEBUG] insertGlobalSymbol('i', type=INTEGER)
[DEBUG] lookupGlobalSymbol: Searching for 'i'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'i'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'i'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'i'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'i'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'i'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'i'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'i'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'i'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'i'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'i'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'i'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'i'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'i'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'i'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'i'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'i'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'i'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'i'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'i'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'i'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'i'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'i'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'i'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'i'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'i'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a50, name 'cardvalues' against 'i'. next=0x604000002a90
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a90, name 'intsequence' against 'i'. next=0x604000002ad0
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002ad0, name 'teststr' against 'i'. next=0x604000002b10
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002b10, name 'i' against 'i'. next=0x0
[DEBUG] lookupGlobalSymbol: found 'i', type=INTEGER, value_ptr=0x60b000005420
[DEBUG] processDeclarations: Inserted global var 'i', type=INTEGER
[DEBUG] lookupGlobalSymbol: Searching for 's'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 's'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 's'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 's'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 's'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 's'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 's'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 's'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 's'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 's'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 's'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 's'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 's'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 's'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 's'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 's'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 's'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 's'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 's'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 's'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 's'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 's'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 's'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 's'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 's'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 's'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a50, name 'cardvalues' against 's'. next=0x604000002a90
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a90, name 'intsequence' against 's'. next=0x604000002ad0
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002ad0, name 'teststr' against 's'. next=0x604000002b10
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002b10, name 'i' against 's'. next=0x0
[DEBUG] lookupGlobalSymbol: symbol 's' not found in global_env
[DEBUG] insertGlobalSymbol('s', type=STRING)
[DEBUG] lookupGlobalSymbol: Searching for 's'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 's'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 's'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 's'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 's'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 's'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 's'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 's'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 's'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 's'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 's'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 's'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 's'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 's'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 's'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 's'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 's'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 's'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 's'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 's'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 's'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 's'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 's'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 's'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 's'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 's'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a50, name 'cardvalues' against 's'. next=0x604000002a90
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a90, name 'intsequence' against 's'. next=0x604000002ad0
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002ad0, name 'teststr' against 's'. next=0x604000002b10
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002b10, name 'i' against 's'. next=0x604000002b50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002b50, name 's' against 's'. next=0x0
[DEBUG] lookupGlobalSymbol: found 's', type=STRING, value_ptr=0x60b0000054d0
[DEBUG] processDeclarations: Inserted global var 's', type=STRING
>> Executing AST node: type=COMPOUND, token='NULL'
>> Executing AST node: type=PROCEDURE_CALL, token='clrscr'
>> Executing AST node: type=COMPOUND, token='NULL'
>> Executing AST node: type=WRITE, token='NULL'
[DEBUG] lookupLocalSymbol: symbol 'esc' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'esc'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'esc'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'esc'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'esc'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'esc'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'esc'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'esc'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'esc'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'esc'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'esc'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'esc'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'esc'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'esc'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'esc'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'esc'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'esc'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'esc'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'esc'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'esc'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'esc'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'esc'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'esc'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'esc'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'esc'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'esc'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'esc'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: found 'esc', type=STRING, value_ptr=0x60b000005000
[DEBUG] lookupSymbol: 'esc' found, type=STRING
Changing type of AST node from VOID to STRING
[DEBUG] lookupLocalSymbol: symbol 'esc' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'esc'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'esc'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'esc'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'esc'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'esc'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'esc'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'esc'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'esc'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'esc'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'esc'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'esc'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'esc'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'esc'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'esc'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'esc'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'esc'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'esc'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'esc'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'esc'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'esc'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'esc'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'esc'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'esc'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'esc'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'esc'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'esc'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: found 'esc', type=STRING, value_ptr=0x60b000005000
[DEBUG] lookupSymbol: 'esc' found, type=STRING
[DEBUG] eval AST_STRING: token value='[2J'
[2J>> Executing AST node: type=PROCEDURE_CALL, token='gotoxy'
[DEBUG] lookupLocalSymbol: symbol 'winleft' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'winleft'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winleft'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'winleft'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'winleft'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'winleft'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: found 'winleft', type=INTEGER, value_ptr=0x60b000004190
[DEBUG] lookupSymbol: 'winleft' found, type=INTEGER
Changing type of AST node from VOID to INTEGER
[DEBUG] lookupLocalSymbol: symbol 'wintop' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'wintop'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wintop'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wintop'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wintop'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: found 'wintop', type=INTEGER, value_ptr=0x60b0000040e0
[DEBUG] lookupSymbol: 'wintop' found, type=INTEGER
Changing type of AST node from VOID to INTEGER
[DEBUG] insertLocalSymbol: Checking for existing local symbol named 'y'
[DEBUG] insertLocalSymbol('y', type=INTEGER, is_var_decl=0)
[DEBUG] lookupLocalSymbol: found 'y' with value TYPE_INTEGER 0
[DEBUG] lookupLocalSymbol: found 'y' with value TYPE_INTEGER 0
[DEBUG] lookupSymbol: 'y' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'y' to [DEBUG_UPDATE] updateSymbol: Entry for Name='y', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 0
[DEBUG] insertLocalSymbol: Checking for existing local symbol named 'x'
[DEBUG] insertLocalSymbol('x', type=INTEGER, is_var_decl=0)
[DEBUG] lookupLocalSymbol: found 'x' with value TYPE_INTEGER 0
[DEBUG] lookupLocalSymbol: found 'x' with value TYPE_INTEGER 0
[DEBUG] lookupSymbol: 'x' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'x' to [DEBUG_UPDATE] updateSymbol: Entry for Name='x', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER 0
>> Executing AST node: type=BLOCK, token='NULL'
[DEBUG] insertLocalSymbol: Checking for existing local symbol named 'absx'
[DEBUG] insertLocalSymbol('absx', type=INTEGER, is_var_decl=1)
[DEBUG] processDeclarations: Inserted local var 'absx', type=INTEGER, is_var=true)
[DEBUG] insertLocalSymbol: Checking for existing local symbol named 'absy'
[DEBUG] insertLocalSymbol('absy', type=INTEGER, is_var_decl=1)
[DEBUG] processDeclarations: Inserted local var 'absy', type=INTEGER, is_var=true)
>> Executing AST node: type=COMPOUND, token='NULL'
>> Executing AST node: type=ASSIGN, token='NULL'
[DEBUG] lookupLocalSymbol: symbol 'winleft' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'winleft'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'winleft'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'winleft'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'winleft'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'winleft'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: found 'winleft', type=INTEGER, value_ptr=0x60b000004190
[DEBUG] lookupSymbol: 'winleft' found, type=INTEGER
Changing type of AST node from VOID to INTEGER
[DEBUG] lookupLocalSymbol: found 'x' with value TYPE_INTEGER 0
[DEBUG] lookupSymbol: 'x' found, type=INTEGER
Changing type of AST node from VOID to INTEGER
[DEBUG] lookupLocalSymbol: found 'absx' with value TYPE_INTEGER 0
[DEBUG] lookupSymbol: 'absx' found, type=INTEGER
[DEBUG] lookupLocalSymbol: found 'absx' with value TYPE_INTEGER 0
[DEBUG] lookupSymbol: 'absx' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'absx' to [DEBUG_UPDATE] updateSymbol: Entry for Name='absx', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER -1
>> Executing AST node: type=ASSIGN, token='NULL'
[DEBUG] lookupLocalSymbol: symbol 'wintop' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'wintop'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'wintop'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'wintop'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'wintop'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: found 'wintop', type=INTEGER, value_ptr=0x60b0000040e0
[DEBUG] lookupSymbol: 'wintop' found, type=INTEGER
Changing type of AST node from VOID to INTEGER
[DEBUG] lookupLocalSymbol: found 'y' with value TYPE_INTEGER 0
[DEBUG] lookupSymbol: 'y' found, type=INTEGER
Changing type of AST node from VOID to INTEGER
[DEBUG] lookupLocalSymbol: found 'absy' with value TYPE_INTEGER 0
[DEBUG] lookupSymbol: 'absy' found, type=INTEGER
[DEBUG] lookupLocalSymbol: found 'absy' with value TYPE_INTEGER 0
[DEBUG] lookupSymbol: 'absy' found, type=INTEGER
[DEBUG] updateSymbol: updating symbol 'absy' to [DEBUG_UPDATE] updateSymbol: Entry for Name='absy', FoundSymType=INTEGER, IncomingValueType=INTEGER
TYPE_INTEGER -1
>> Executing AST node: type=WRITE, token='NULL'
[DEBUG] lookupLocalSymbol: symbol 'esc' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'esc'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'esc'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'esc'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'esc'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'esc'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'esc'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'esc'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'esc'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'esc'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'esc'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'esc'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'esc'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'esc'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'esc'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'esc'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'esc'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'esc'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'esc'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'esc'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'esc'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'esc'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'esc'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'esc'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'esc'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'esc'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'esc'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: found 'esc', type=STRING, value_ptr=0x60b000005000
[DEBUG] lookupSymbol: 'esc' found, type=STRING
Changing type of AST node from VOID to STRING
[DEBUG] lookupLocalSymbol: symbol 'esc' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'esc'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'esc'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'esc'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'esc'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'esc'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'esc'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'esc'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'esc'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'esc'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'esc'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'esc'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'esc'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'esc'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'esc'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'esc'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'esc'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'esc'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'esc'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'esc'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'esc'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'esc'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'esc'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'esc'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'esc'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'esc'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'esc'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: found 'esc', type=STRING, value_ptr=0x60b000005000
[DEBUG] lookupSymbol: 'esc' found, type=STRING
[DEBUG] eval AST_STRING: token value='['
[DEBUG] lookupLocalSymbol: found 'absy' with value TYPE_INTEGER -1
[DEBUG] lookupSymbol: 'absy' found, type=INTEGER
Changing type of AST node from VOID to INTEGER
[DEBUG] eval AST_STRING: token value=';'
[DEBUG] lookupLocalSymbol: found 'absx' with value TYPE_INTEGER -1
[DEBUG] lookupSymbol: 'absx' found, type=INTEGER
Changing type of AST node from VOID to INTEGER
[DEBUG] eval AST_STRING: token value='H'
[-1;-1H[DEBUG_FREE] Popping local env (localSymbols=0x604000002c50)
[DEBUG_FREE]   Processing local symbol 'absy' at 0x604000002c50 (is_alias=0, is_local_var=1)
[DEBUG_FREE]     Skipping freeValue for symbol 'absy' (value=0x60b000005790, alias=0, local=1)
[DEBUG_FREE]     Freeing name 'absy' at 0x602000020590
[DEBUG_FREE]     Freeing Symbol* at 0x604000002c50
[DEBUG_FREE]   Processing local symbol 'absx' at 0x604000002c10 (is_alias=0, is_local_var=1)
[DEBUG_FREE]     Skipping freeValue for symbol 'absx' (value=0x60b0000056e0, alias=0, local=1)
[DEBUG_FREE]     Freeing name 'absx' at 0x602000020570
[DEBUG_FREE]     Freeing Symbol* at 0x604000002c10
[DEBUG_FREE]   Processing local symbol 'x' at 0x604000002bd0 (is_alias=0, is_local_var=0)
[DEBUG_FREE]     Freeing Value* at 0x60b000005630 for non-alias, non-local symbol 'x'
[DEBUG_FREE] freeValue called for Value* at 0x60b000005630, type=INTEGER
[DEBUG_FREE]   No heap data to free for type INTEGER
[DEBUG_FREE]     Freeing name 'x' at 0x602000020550
[DEBUG_FREE]     Freeing Symbol* at 0x604000002bd0
[DEBUG_FREE]   Processing local symbol 'y' at 0x604000002b90 (is_alias=0, is_local_var=0)
[DEBUG_FREE]     Freeing Value* at 0x60b000005580 for non-alias, non-local symbol 'y'
[DEBUG_FREE] freeValue called for Value* at 0x60b000005580, type=INTEGER
[DEBUG_FREE]   No heap data to free for type INTEGER
[DEBUG_FREE]     Freeing name 'y' at 0x602000020530
[DEBUG_FREE]     Freeing Symbol* at 0x604000002b90
[DEBUG_FREE] Finished popping local env
[DEBUG_FREE] Popping local env (localSymbols=0x0)
[DEBUG_FREE] Finished popping local env
>> Executing AST node: type=WRITELN, token='NULL'
[DEBUG] eval AST_STRING: token value='Testing Typed Array Constants:'
[DEBUG] eval AST_STRING: token value='Testing Typed Array Constants:'
Testing Typed Array Constants:
>> Executing AST node: type=WRITELN, token='NULL'
[DEBUG] eval AST_STRING: token value='------------------------------'
[DEBUG] eval AST_STRING: token value='------------------------------'
------------------------------
>> Executing AST node: type=WRITELN, token='NULL'
[DEBUG] eval AST_STRING: token value='Simple Const TestStr: '
[DEBUG] eval AST_STRING: token value='Simple Const TestStr: '
[DEBUG] lookupLocalSymbol: symbol 'teststr' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'teststr'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'teststr'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'teststr'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'teststr'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'teststr'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'teststr'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'teststr'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'teststr'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'teststr'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'teststr'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'teststr'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'teststr'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'teststr'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'teststr'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'teststr'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'teststr'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'teststr'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'teststr'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'teststr'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'teststr'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'teststr'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'teststr'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'teststr'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'teststr'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'teststr'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'teststr'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a50, name 'cardvalues' against 'teststr'. next=0x604000002a90
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a90, name 'intsequence' against 'teststr'. next=0x604000002ad0
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002ad0, name 'teststr' against 'teststr'. next=0x604000002b10
[DEBUG] lookupGlobalSymbol: found 'teststr', type=STRING, value_ptr=0x60b000005370
[DEBUG] lookupSymbol: 'teststr' found, type=STRING
Changing type of AST node from VOID to STRING
Simple Const TestStr: Simple
>> Executing AST node: type=WRITELN, token='NULL'

>> Executing AST node: type=WRITELN, token='NULL'
[DEBUG] eval AST_STRING: token value='Testing CardValues (String Array):'
[DEBUG] eval AST_STRING: token value='Testing CardValues (String Array):'
Testing CardValues (String Array):
>> Executing AST node: type=WRITELN, token='NULL'
[DEBUG] eval AST_STRING: token value='CardValues[1] = '
[DEBUG] eval AST_STRING: token value='CardValues[1] = '
[DEBUG] lookupLocalSymbol: symbol 'cardvalues' not found in local_env
[DEBUG] lookupGlobalSymbol: Searching for 'cardvalues'. Starting list walk (globalSymbols=0x604000002310).
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002310, name 'winbottom' against 'cardvalues'. next=0x604000002350
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002350, name 'winright' against 'cardvalues'. next=0x604000002390
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002390, name 'wintop' against 'cardvalues'. next=0x6040000023d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000023d0, name 'winleft' against 'cardvalues'. next=0x604000002410
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002410, name 'keypressed' against 'cardvalues'. next=0x604000002450
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002450, name 'wherey' against 'cardvalues'. next=0x604000002490
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002490, name 'wherex' against 'cardvalues'. next=0x6040000024d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000024d0, name 'blink' against 'cardvalues'. next=0x604000002510
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002510, name 'white' against 'cardvalues'. next=0x604000002550
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002550, name 'yellow' against 'cardvalues'. next=0x604000002590
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002590, name 'lightmagenta' against 'cardvalues'. next=0x6040000025d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000025d0, name 'lightred' against 'cardvalues'. next=0x604000002610
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002610, name 'lightcyan' against 'cardvalues'. next=0x604000002650
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002650, name 'lightgreen' against 'cardvalues'. next=0x604000002690
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002690, name 'lightblue' against 'cardvalues'. next=0x6040000026d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000026d0, name 'darkgray' against 'cardvalues'. next=0x604000002710
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002710, name 'lightgray' against 'cardvalues'. next=0x604000002750
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002750, name 'brown' against 'cardvalues'. next=0x604000002790
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002790, name 'magenta' against 'cardvalues'. next=0x6040000027d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000027d0, name 'red' against 'cardvalues'. next=0x604000002810
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002810, name 'cyan' against 'cardvalues'. next=0x604000002850
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002850, name 'green' against 'cardvalues'. next=0x604000002890
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002890, name 'blue' against 'cardvalues'. next=0x6040000028d0
[DEBUG] lookupGlobalSymbol: Checking node 0x6040000028d0, name 'black' against 'cardvalues'. next=0x604000002910
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002910, name 'esc' against 'cardvalues'. next=0x604000002a50
[DEBUG] lookupGlobalSymbol: Checking node 0x604000002a50, name 'cardvalues' against 'cardvalues'. next=0x604000002a90
[DEBUG] lookupGlobalSymbol: found 'cardvalues', type=ARRAY, value_ptr=0x60b0000050b0
[DEBUG] lookupSymbol: 'cardvalues' found, type=ARRAY
Changing type of AST node from VOID to ARRAY
AddressSanitizer:DEADLYSIGNAL
=================================================================
[1m[31m==86280==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x0001024e1fac bp 0x00016d93d430 sp 0x00016d93d320 T0)
[1m[0m==86280==The signal is caused by a READ memory access.
==86280==Hint: address points to the zero page.
    #0 0x0001024e1fac in computeFlatOffset interpreter.c:1860
    #1 0x0001024d4524 in eval interpreter.c:349
    #2 0x0001024decb0 in executeWithScope interpreter.c:1631
    #3 0x0001024dd4bc in executeWithScope interpreter.c:1446
    #4 0x0001024dd2d4 in executeWithScope interpreter.c:1436
    #5 0x0001024db248 in executeWithScope interpreter.c:1274
    #6 0x0001024ec4b8 in executeWithASTDump main.c:73
    #7 0x0001024eca74 in runProgram main.c:162
    #8 0x0001024ece68 in main main.c:241
    #9 0x000181b18270  (<unknown module>)

==86280==Register values:
 x[0] = 0x000000016d93d650   x[1] = 0x0000602000020610   x[2] = 0xfffffffffffffffc   x[3] = 0x000000702db478fc  
 x[4] = 0x000000702db47840   x[5] = 0x0000000000000001   x[6] = 0x000000016d150000   x[7] = 0x0000000000000001  
 x[8] = 0x0000007000020000   x[9] = 0x0000000000000000  x[10] = 0x0000000000000000  x[11] = 0x000000702db47adc  
x[12] = 0x0000000000000000  x[13] = 0x0000000000000002  x[14] = 0x0000fafafa02fafa  x[15] = 0x00000000ffffffd0  
x[16] = 0x0000000181ece740  x[17] = 0x0000000102ecc508  x[18] = 0x0000000000000000  x[19] = 0x000000016d93de60  
x[20] = 0x00000001eb56c0a0  x[21] = 0x00000001eb56c050  x[22] = 0x000000016d94b1f8  x[23] = 0x000000016d94b1f8  
x[24] = 0x0000000181b12000  x[25] = 0x0000000000000000  x[26] = 0x0000000000000000  x[27] = 0x0000000000000000  
x[28] = 0x0000000000000000     fp = 0x000000016d93d430     lr = 0x00000001024d4528     sp = 0x000000016d93d320  
AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV interpreter.c:1860 in computeFlatOffset
==86280==ABORTING
CardValues[1] = zsh: abort      ./dscal tac
[1m[7m%[27m[1m[0m                                                                                                                                                                                                                      ]7;file://MacBook-Pro-M1.local/Users/mke/Dropbox/Psc_Build/Build/int_pscal/int_pscal[0m[27m[24m[Jmke@MacBook-Pro-M1 int_pscal % [K[?2004heexit[?2004l

Saving session...completed.

Script done on Fri Apr 18 09:18:02 2025
