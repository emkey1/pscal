program NewCrtDemo;

uses CRT;

var
  i: integer;
  ch: char;

procedure Pause;
begin
  // Original incorrect line:
  // GotoXY(1, WindowRect.Y2 + 1); // Go below the current window

  // Corrected line: Use the global variable from CRTMac unit
  GotoXY(1, WinBottom + 1); // Go below the current window

  write('Press any key to continue...');
  ch := ReadKey;
  writeln; // Move to next line after key press
end;

// Overwrite WindowRect with the dimensions from CRTMac unit
// If CRTMac doesn't expose WindowRect, define local constants or vars
const
  // Assuming these defaults are set in CRTMac's initialization
  FullScreenX1 = 1;
  FullScreenY1 = 1;
  FullScreenX2 = 80;
  FullScreenY2 = 24;

var
  // Use CRTMac's internal window coords if possible, otherwise track locally
  CurrentX1, CurrentY1, CurrentX2, CurrentY2: integer;


begin
  ClrScr;
  HideCursor;

  // Store initial full screen settings (if not directly readable from CRT unit)
  CurrentX1 := FullScreenX1; CurrentY1 := FullScreenY1;
  CurrentX2 := FullScreenX2; CurrentY2 := FullScreenY2;


  TextColor(Yellow);
  GotoXY(5, 1); write('--- CRT Demo: Window, Attributes, Line Editing ---');

  // --- Define a Window ---
  TextColor(White);
  GotoXY(1, 3); write('Defining a window from (10, 5) to (70, 15)...');
  Window(10, 5, 70, 15); // Define the window
  // Update local coords if needed:
  CurrentX1 := 10; CurrentY1 := 5; CurrentX2 := 70; CurrentY2 := 15;
  Delay(3500);

  // --- Test writing within the window and attributes ---
  // Note: ClrScr now homes cursor to window top-left (1,1 relative to window)
  ClrScr;
  writeln('This text is inside the window.');
  writeln('Window coordinates are relative.');
  writeln('X runs from 1 to ', CurrentX2 - CurrentX1 + 1, ', Y from 1 to ', CurrentY2 - CurrentY1 + 1);
  writeln;

  write('Normal Text. ');      NormVideo; // Should reset to defaults
  write('High Intensity Text. '); HighVideo; // Should be bold
  write('Low Intensity Text. ');  LowVideo;  // Should be DarkGray
  NormVideo; // Reset
  writeln;
  writeln('Back to normal.');

  Pause;

  // --- Test DelLine and InsLine ---
  ClrScr;
  for i := 1 to 5 do
  begin
    GotoXY(5, i); // Position within the window
    write('This is line number ', i);
  end;

  GotoXY(1, 7); write('Will delete line 3...'); Delay(3500);
  GotoXY(1, 3); // Position cursor on line 3 (relative to window)
  DelLine;      // Delete it
  GotoXY(1, 7); ClrEol; write('Line 3 deleted. Lines below shifted up.');

  Pause;

  GotoXY(1, 8); write('Will insert a line at line 2...'); Delay(3500);
  GotoXY(1, 2); // Position cursor on line 2 (relative to window)
  InsLine;      // Insert blank line
  GotoXY(1, 8); ClrEol; write('Blank line inserted at line 2. Lines below shifted down.');

  Pause;

// --- Test KeyPressed (Now Functional) ---
  ClrScr;
  GotoXY(1, 3); writeln('Testing functional KeyPressed.');
  GotoXY(1, 4); writeln('The loop will run until you press any key.');
  GotoXY(1, 5); writeln('KeyPressed should report False, then True just before stopping.');

  i := 0;
  HideCursor;

  repeat
    Inc(i);
    GotoXY(1, 7); ClrEol; // Clear the line for status update
    // Display loop counter and the CURRENT state of KeyPressed
    // Note: KeyPressed is checked again in the 'until' condition immediately after
    write('Loop iteration: ', i, '. Checking KeyPressed...');
    Delay(100); // Short delay so the loop is visible, adjust as needed

  until KeyPressed; // The loop condition now correctly uses KeyPressed

  // --- Key was pressed, exit the loop ---
  ShowCursor;
  GotoXY(1, 9); ClrEol;
  TextColor(LightGreen);
  write('KeyPressed returned True! Press any key again to consume it...');

  ch := ReadKey; // Consume the key that made KeyPressed return True

  GotoXY(1, 10); ClrEol;
  write('Consumed key: ''', ch, ''' (Ord=', Ord(ch), ')');
  TextColor(White);
  writeln;

  // --- Reset and Exit ---
  Window(FullScreenX1, FullScreenY1, FullScreenX2, FullScreenY2); // Reset to full screen
  NormVideo;
  ClrScr;
  ShowCursor;
  writeln('Demo complete. Window reset to full screen.');

end.
