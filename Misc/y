program YahtzeeGame;

uses CRT; // Use the provided CRT unit

const
  NUM_DICE = 5;
  MAX_ROLLS = 3;
  NUM_CATEGORIES = 13;
  // Color constants (assuming CRT unit makes these available or maps them)
  Black        = 0;
  Blue         = 1;
  Green        = 2;
  Cyan         = 3;
  Red          = 4;
  Magenta      = 5;
  Brown        = 6;
  LightGray    = 7;
  DarkGray     = 8;
  LightBlue    = 9;
  LightGreen   = 10;
  LightCyan    = 11;
  LightRed     = 12;
  LightMagenta = 13;
  Yellow       = 14;
  White        = 15;


type
  TDiceArray = array[1..NUM_DICE] of integer;
  TKeepArray = array[1..NUM_DICE] of boolean;

  // Scorecard structure
  TScoreCategory = record
    name: string[20];
    score: integer;
    used: boolean;
  end;
  TScorecard = array[1..NUM_CATEGORIES] of TScoreCategory;

var
  dice: TDiceArray;
  keep: TKeepArray;
  rollsLeft: integer;
  turn: integer;
  scorecard: TScorecard;
  i, j, upperScore, lowerScore, bonusScore, totalScore: integer;
  gameOver: boolean;
  inputChar: char;       // Used for general key presses
  categoryChoice: integer;
  userChoice: char;        // Used specifically for Roll/Score choice from ToggleKeep
  turnStr: string[4];      // For converting turn number
  totalStr: string[4];     // For converting total categories number
  scoreStr: string[4];     // For converting scores for display
  k: integer;              // Loop variable for scorecard display


// --- CRT Helper Procedures ---

procedure ClearLine(y: integer);
// Clears a specific line using GotoXY and ClrEol
begin
  GotoXY(1, y);
  ClrEol;
end;

procedure Print(x, y: integer; s: string);
// Combines GotoXY and Write
begin
  GotoXY(x, y);
  Write(s);
end;

procedure PrintColor(x, y: integer; s: string; fg, bg: byte);
// Prints text with specified colors
begin
  TextColor(fg);
  TextBackground(bg);
  GotoXY(x, y);
  Write(s);
  NormVideo; // Reset colors to default
end;


// --- Game Logic Procedures ---

procedure InitializeScorecard;
begin
  scorecard[1].name := 'Ones';
  scorecard[2].name := 'Twos';
  scorecard[3].name := 'Threes';
  scorecard[4].name := 'Fours';
  scorecard[5].name := 'Fives';
  scorecard[6].name := 'Sixes';
  scorecard[7].name := '3 of a Kind';
  scorecard[8].name := '4 of a Kind';
  scorecard[9].name := 'Full House';
  scorecard[10].name := 'Sm Straight';
  scorecard[11].name := 'Lg Straight';
  scorecard[12].name := 'Yahtzee';
  scorecard[13].name := 'Chance';

  for i := 1 to NUM_CATEGORIES do
  begin
    scorecard[i].score := 0;
    scorecard[i].used := false;
  end;
  upperScore := 0;
  lowerScore := 0;
  bonusScore := 0;
  totalScore := 0;
end;

procedure RollDice;
var
  i: integer;
begin
  // Only roll dice that are not kept
  for i := 1 to NUM_DICE do
  begin
    if not keep[i] then
    begin
      // Assuming Random(N) returns 0..N-1, so +1 for 1..6
      dice[i] := Random(6) + 1;
    end;
  end;
  rollsLeft := rollsLeft - 1;
end;

procedure DisplayDice;
var
  i: integer;
  diceStr: string[2]; // String to hold single digit + null terminator
  rollsStr: string[2]; // String for rolls left
begin
  GotoXY(5, 5);
  Write('Dice: ');
  for i := 1 to NUM_DICE do
  begin
    // Display die value using function call assignment
    diceStr := IntToStr(dice[i]);
    Write(diceStr, ' ');

    // Indicate if kept
    if keep[i] then
      Write('[K] ')
    else
      Write('[ ] ');
  end;
  ClrEol; // Clear rest of the line

  GotoXY(5, 6);
  // Write Rolls Left using multiple writes
  Write('Rolls Left: ');
  rollsStr := IntToStr(rollsLeft);
  Write(rollsStr);
  ClrEol;
end;

procedure DisplayScorecard;
// Uses global k, scoreStr
begin
  GotoXY(40, 2); Write('Upper Section');
  for k := 1 to 6 do
  begin
    GotoXY(40, 2 + k);
    Write(k:2, '. ', scorecard[k].name:12); // Assuming formatted write works
    if scorecard[k].used then
    begin
       scoreStr := IntToStr(scorecard[k].score);
       Write(scoreStr:4); // Assuming formatted write works
    end
    else
       Write(' (-)');
  end;

  GotoXY(40, 10); Write('Upper Bonus:');
  if bonusScore > 0 then
  begin
     scoreStr := IntToStr(bonusScore);
     Write(scoreStr:4)
  end
  else Write('   -');

  GotoXY(40, 11); Write('Upper Total:');
  if upperScore > 0 then
  begin
    scoreStr := IntToStr(upperScore);
    Write(scoreStr:4)
  end
  else Write('   -');


  GotoXY(40, 13); Write('Lower Section');
   for k := 7 to NUM_CATEGORIES do
  begin
    GotoXY(40, 13 + (k-6));
    Write(k:2, '. ', scorecard[k].name:12);
    if scorecard[k].used then
    begin
       scoreStr := IntToStr(scorecard[k].score);
       Write(scoreStr:4);
    end
    else
       Write(' (-)');
  end;

  GotoXY(40, 22); Write('Lower Total:');
   if lowerScore > 0 then
   begin
      scoreStr := IntToStr(lowerScore);
      Write(scoreStr:4)
   end
   else Write('   -');

   GotoXY(40, 23); HighVideo; Write('GRAND TOTAL:'); NormVideo; Write(' ');
   if totalScore > 0 then
   begin
     scoreStr := IntToStr(totalScore);
     Write(scoreStr:4)
   end
   else Write('   -');
   NormVideo;
end;

// Modified to avoid Exit, takes var parameter to signal action
procedure ToggleKeep(var userAction: char);
var
  dieNum: integer;
  validDieInput: boolean; // Only tracks if a valid die number was entered this iteration
  // inputStr: string[10]; // Not needed with ReadKey
  // inputChar is now global
begin
  userAction := ' '; // Default action (continue loop)
  Print(5, 8, 'Enter dice number (1-5) to toggle keep, or (R)oll, (S)core: '); ClrEol;

  // Need to clear space where input will be echoed or error shown
  GotoXY(60, 8); ClrEol;
  GotoXY(60, 8); // Position for input

  validDieInput := false;
  repeat
    inputChar := ReadKey; // Get single character input

    if (UpCase(inputChar) = 'R') or (UpCase(inputChar) = 'S') then
    begin
       userAction := UpCase(inputChar); // Signal Roll or Score
       // Loop condition 'until (userAction = 'R') or (userAction = 'S')' will handle exit
    end
    else if (inputChar >= '1') and (inputChar <= '5') then
    begin
       dieNum := Ord(inputChar) - Ord('0');
       // No need to check range again, already done by (inputChar >= '1') etc.
       // if (dieNum >= 1) and (dieNum <= NUM_DICE) then
       // begin
         keep[dieNum] := not keep[dieNum];
         validDieInput := true; // Mark that a valid die toggle happened
         DisplayDice; // Update dice display immediately
         // Reprint prompt and reposition cursor for next input
         Print(5, 8, 'Enter dice number (1-5) to toggle keep, or (R)oll, (S)core: '); ClrEol;
         GotoXY(60, 8); // Reposition for next input
       // end; // End inner if dieNum in range - removed as redundant
       // No 'else' needed here for dieNum range check
    end
    else
    begin
       // Neither R, S, nor 1-5 was pressed
       Beep; // Indicate invalid input
       GotoXY(60, 8); // Ensure cursor is back for next input attempt
    end;

  until (userAction = 'R') or (userAction = 'S'); // Loop until R or S is pressed
  ClearLine(8); // Clear the prompt line after exiting

end; // End of revised ToggleKeep

// --- Scoring Functions ---

// Helper to count occurrences of each die value
procedure CountDice(var counts: array[1..6] of integer);
var i: integer;
begin
  for i := 1 to 6 do counts[i] := 0;
  for i := 1 to NUM_DICE do counts[dice[i]] := counts[dice[i]] + 1;
end;

function ScoreUpper(valueToScore: integer): integer;
var score: integer; counts: array[1..6] of integer; // removed i
begin
  CountDice(counts);
  ScoreUpper := counts[valueToScore] * valueToScore;
end;

function ScoreNOfAKind(n: integer): integer;
var i, score: integer; counts: array[1..6] of integer; found: boolean;
begin
  CountDice(counts);
  found := false;
  for i := 1 to 6 do
  begin
    if counts[i] >= n then found := true;
  end;

  if found then
  begin // Score is sum of all dice
    score := 0;
    for i := 1 to NUM_DICE do score := score + dice[i];
    ScoreNOfAKind := score;
  end
  else
    ScoreNOfAKind := 0;
end;

function ScoreFullHouse: integer;
var i: integer; counts: array[1..6] of integer; has2, has3: boolean;
begin
  CountDice(counts);
  has2 := false; has3 := false;
  for i := 1 to 6 do
  begin
    if counts[i] = 2 then has2 := true;
    if counts[i] = 3 then has3 := true;
  end;
  if has2 and has3 then ScoreFullHouse := 25 else ScoreFullHouse := 0;
end;

// Uses Break statement, assuming pscal now supports it correctly
function ScoreStraight(minLength: integer): integer;
var i, currentRun: integer; counts: array[1..6] of integer; score: integer;
begin
  CountDice(counts);
  score := 0;
  currentRun := 0;
  for i := 1 to 6 do
  begin
    if counts[i] > 0 then
      currentRun := currentRun + 1
    else
      currentRun := 0;

    if currentRun >= minLength then
    begin
       if minLength = 4 then score := 30; // Small Straight
       if minLength = 5 then score := 40; // Large Straight
       Break; // Found the required straight length
    end;
  end;
  ScoreStraight := score;
end;

function ScoreYahtzee: integer;
var i: integer; counts: array[1..6] of integer; found: boolean;
begin
  CountDice(counts);
  found := false;
  for i := 1 to 6 do if counts[i] >= 5 then found := true;
  if found then ScoreYahtzee := 50 else ScoreYahtzee := 0;
end;

function ScoreChance: integer;
var i, score: integer;
begin
  score := 0;
  for i := 1 to NUM_DICE do score := score + dice[i];
  ScoreChance := score;
end;

// Modified to use ReadKey for simplified input (1-9)
procedure ChooseCategory;
var
  validChoice: boolean;
  choiceChar: char;
  tempChoice: integer;
begin
  Print(5, 10, 'Choose category number (1-9): '); ClrEol; // Simplified prompt for now
  repeat
    validChoice := false;
    GotoXY(35, 10); ClrEol; // Clear previous input/error space
    GotoXY(35, 10); // Position for input echo

    choiceChar := ReadKey; // Read a single character

    // Check if it's a digit '1' through '9'
    if (choiceChar >= '1') and (choiceChar <= '9') then
    begin
       tempChoice := Ord(choiceChar) - Ord('0'); // Convert char '1'..'9' to integer 1..9

       // Check if the category is valid and not used
       if (tempChoice >= 1) and (tempChoice <= NUM_CATEGORIES) then // Still check range 1..13
       begin
          if scorecard[tempChoice].used then
          begin
             Print(5, 11, 'Category already used. Choose another.'); ClrEol; Beep;
             GotoXY(35, 10); // Position for next ReadKey attempt
          end
          else
          begin
             categoryChoice := tempChoice; // Store the valid choice
             validChoice := true;
             ClearLine(11); // Clear error message line
             Write(choiceChar); // Echo the chosen digit
          end;
       end
       else
       begin
         // Should not happen if input is '1'-'9'
         Print(5, 11, 'Invalid range (Internal Error). Enter 1-9.'); ClrEol; Beep;
         GotoXY(35, 10);
       end;
    end
    else // Not a digit '1'-'9'
    begin
        Print(5, 11, 'Invalid choice. Enter 1-9.'); ClrEol; Beep;
        GotoXY(35, 10); // Position for next ReadKey attempt
    end;

  until validChoice;
  // ClearLine(10); // Clear prompt line after valid choice is made
  // ClearLine(11); // Clear potential error message from previous loop
end;

procedure ScoreTurn;
var
  score: integer;
begin
  score := 0;
  case categoryChoice of
    1: score := ScoreUpper(1);
    2: score := ScoreUpper(2);
    3: score := ScoreUpper(3);
    4: score := ScoreUpper(4);
    5: score := ScoreUpper(5);
    6: score := ScoreUpper(6);
    7: score := ScoreNOfAKind(3);
    8: score := ScoreNOfAKind(4);
    9: score := ScoreFullHouse;
    10: score := ScoreStraight(4);
    11: score := ScoreStraight(5);
    12: score := ScoreYahtzee;
    13: score := ScoreChance;
  end;

  scorecard[categoryChoice].score := score;
  scorecard[categoryChoice].used := true;

  // Update totals
  if categoryChoice <= 6 then
    upperScore := upperScore + score
  else
    lowerScore := lowerScore + score;

  if (upperScore >= 63) and (bonusScore = 0) then // Award bonus only once
     bonusScore := 35;

  totalScore := upperScore + bonusScore + lowerScore;

  DisplayScorecard; // Update display
end;

// --- Main Game ---

begin // Main program execution start
  ClrScr;
  HideCursor;
  Randomize; // Seed the random number generator

  InitializeScorecard;
  turn := 0;
  gameOver := false;
  userChoice := ' '; // Initialize userChoice outside the loop

  repeat // Main game loop (one iteration per turn)
    turn := turn + 1;
    ClrScr; // Clear screen at start of turn

    // Display turn info using multiple writes
    GotoXY(5, 2);
    Write('--- Turn ');
    turnStr := IntToStr(turn);
    Write(turnStr);
    Write(' of ');
    totalStr := IntToStr(NUM_CATEGORIES);
    Write(totalStr);
    Write(' ---');
    ClrEol; // Clear rest of line 2

    // Display Scorecard
    DisplayScorecard;

    // Add extra clearing just in case ClrScr wasn't fully effective
    ClearLine(5);
    ClearLine(6);
    ClearLine(8);
    ClearLine(10);
    ClearLine(11);

    // Reset keep array for the new turn
    for i := 1 to NUM_DICE do keep[i] := false;
    rollsLeft := MAX_ROLLS;
    userChoice := ' '; // Reset userChoice for the new turn's rolling phase

    // --- Rolling Phase ---
    repeat
       RollDice;
       DisplayDice; // Writes to lines 5, 6

       if rollsLeft > 0 then
       begin
          ToggleKeep(userChoice); // Writes prompt to line 8; call has ()
       end
       else
       begin
          userChoice := 'S'; // Force scoring if out of rolls
       end;

    // Loop continues as long as the user chose 'R' AND there are rolls left
    until (userChoice = 'S') or (rollsLeft <= 0);

    // --- Scoring Phase ---
    ClearLine(8); // Clear toggle prompt line just in case
    DisplayDice; // Show final dice state
    ChooseCategory; // Gets input 1-9, prompts on line 10, errors on 11
    ScoreTurn;      // Scores the turn using categoryChoice, updates display

    // Check for game end
    if turn >= NUM_CATEGORIES then gameOver := true;

    // --- Wait for user before next turn ---
    if not gameOver then
    begin
      Print(5, 11, 'Press any key for next turn...'); ClrEol;
      inputChar := ReadKey; // Read the key press to continue

      // Clear Input Buffer
      while KeyPressed do // While there are still keys in the buffer...
      begin
        inputChar := ReadKey; // ...read and discard them
      end;

      // Clear relevant lines before next turn's ClrScr (optional redundancy)
      ClearLine(11);
      ClearLine(5);
      ClearLine(6);
      ClearLine(10); // Also clear category prompt line space
    end;

  until gameOver;

  // --- Game Over Display ---
  ClrScr; // Clear before final display
  DisplayScorecard; // Show final scores
  PrintColor(25, 12, '>>> GAME OVER <<<', Yellow, Black);
  GotoXY(25, 14);
  Write('Final Score: ');
  scoreStr := IntToStr(totalScore);
  Write(scoreStr);

  GotoXY(1, 24); // Move cursor to bottom
  ShowCursor; // Make cursor visible again
end.
