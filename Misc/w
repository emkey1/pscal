program DisplayWeather;

uses CRT; // Using CRT for ClrScr

const
  API_KEY = '633f6c4c95d54b8a6a96d3e365ffcfb8'; // Replace if needed
  ZIPCODE = '98672';  // Example: Washougal, WA - change to your desired zip code
  MAX_SUBSTR_LEN = 1024; // Max length for copy/pos substrings

type
  // No specific types needed here now

var
  response: string;        // Holds the raw JSON response
  ms: memorystream;      // Holds the memory stream handle
  url: string;           // API request URL
  location, description, tempStr, humidityStr, windStr: string; // Extracted values
  startPos, endPos, searchPos: integer; // Helper variables for parsing

// --- Min function MOVED TO GLOBAL SCOPE ---
function Min(a, b: integer): integer;
begin
  if a < b then Min := a else Min := b;
end;

// --- Helper function to extract a string value associated with a key ---
// ... (ExtractStringValue function as before) ...
function ExtractStringValue(jsonString: string; key: string; startSearchPos: integer): string;
var
  keyPos, valueStartPos, valueEndPos, relEndPos : integer;
  searchPattern, subStr, debugSubStr : string;
begin
  ExtractStringValue := '';
  searchPattern := '"' + key + '":"';


  subStr := copy(jsonString, startSearchPos, MAX_SUBSTR_LEN); // The copy call

  keyPos := pos(searchPattern, subStr);

  if keyPos > 0 then
  begin
    // ... rest of the function ...
    valueStartPos := startSearchPos + keyPos + length(searchPattern) - 1;
    // ... (keep other debug lines from before if you want) ...
    debugSubStr := copy(jsonString, valueStartPos, MAX_SUBSTR_LEN);
    relEndPos := pos('"', debugSubStr);
    if relEndPos > 0 then
    begin
      valueEndPos := valueStartPos + relEndPos - 1;
      ExtractStringValue := copy(jsonString, valueStartPos, valueEndPos - valueStartPos);
    end;
  end
  else
  begin
  end;
end;

// --- Helper function to extract a numeric value (as string) ---
// ... (ExtractNumericValueStr function as before) ...
function ExtractNumericValueStr(jsonString: string; key: string; startSearchPos: integer): string;
var
  keyPos, valueStartPos, relCommaPos, relBracePos, relEndPos, absEndPos : integer;
  searchPattern, subStr, tempResult : string;
  i: integer; // for loop counter
begin
  ExtractNumericValueStr := ''; // Default
  searchPattern := '"' + key + '":';
  subStr := copy(jsonString, startSearchPos, MAX_SUBSTR_LEN); // Search in substring
  keyPos := pos(searchPattern, subStr);

  if keyPos > 0 then
  begin
    // Calculate absolute start position of the value
    valueStartPos := startSearchPos + keyPos + length(searchPattern) - 1;

    // Skip potential leading whitespace after colon
    while (valueStartPos <= length(jsonString)) and (jsonString[valueStartPos] = ' ') do
    begin
       inc(valueStartPos);
    end;

    // Find the end of the numeric value (next comma or closing brace) relative to valueStartPos
    subStr := copy(jsonString, valueStartPos, MAX_SUBSTR_LEN);
    relCommaPos := pos(',', subStr);
    relBracePos := pos('}', subStr);

    // Determine the first delimiter found
    if (relCommaPos > 0) and (relBracePos > 0) then
       // *** Use the globally defined Min function ***
        relEndPos := Min(relCommaPos, relBracePos)
    else if relCommaPos > 0 then
        relEndPos := relCommaPos
    else if relBracePos > 0 then
        relEndPos := relBracePos
    else
        relEndPos := length(subStr) + 1; // Assume it goes to end if no delimiter found nearby


    // Copy the substring representing the number
    tempResult := copy(subStr, 1, relEndPos - 1);

    ExtractNumericValueStr := tempResult;
  end;
end;

// --- Main Program ---
begin
  ClrScr;
  writeln('Fetching weather data for Zip Code: ', ZIPCODE);
  writeln;

  // ... (Rest of the main program block remains the same) ...
  // Construct the request URL
  url := 'http://api.openweathermap.org/data/2.5/weather?zip=' + ZIPCODE + ',us&appid=' + API_KEY + '&units=metric';

  // Perform the API call
  ms := api_send(url, '');

  // Convert the memory stream response to a string
  response := api_receive(ms);

  // Free the memory stream - IMPORTANT if 'memorystreamfree' exists
  // memorystreamfree(ms);

  writeln('--- Current Weather ---');

  // Extract Location - Search from beginning
  location := ExtractStringValue(response, 'name', 1);
  if location <> '' then
    writeln('Location:     ', location)
  else
    writeln('Location:     Not Found');

  // Extract Description (nested)
  description := '';
  searchPos := pos('"weather":[{', response); // Find start of weather array object
  if searchPos > 0 then
  begin
     description := ExtractStringValue(response, 'description', searchPos);
  end;

  if description <> '' then
      writeln('Conditions:   ', description)
  else
      writeln('Conditions:   Not Found');

  // Extract Temperature (nested in "main")
  tempStr := '';
  searchPos := pos('"main":{', response); // Find start of main object
  if searchPos > 0 then
  begin
     tempStr := ExtractNumericValueStr(response, 'temp', searchPos);
  end;

  if tempStr <> '' then
    writeln('Temperature:  ', tempStr, ' C')
  else
    writeln('Temperature:  Not Found');

  // Extract Humidity (nested in "main")
  humidityStr := '';
  if searchPos > 0 then // Reuse searchPos from temp search
  begin
      humidityStr := ExtractNumericValueStr(response, 'humidity', searchPos);
  end;

  if humidityStr <> '' then
    writeln('Humidity:     ', humidityStr, '%')
  else
    writeln('Humidity:     Not Found');

  // Extract Wind Speed (nested in "wind")
  windStr := '';
  searchPos := pos('"wind":{', response); // Find start of wind object
  if searchPos > 0 then
  begin
      windStr := ExtractNumericValueStr(response, 'speed', searchPos);
  end;

  if windStr <> '' then
     writeln('Wind Speed:   ', windStr, ' m/s') // Metric units
  else
     writeln('Wind Speed:   Not Found');

  writeln;
  writeln('Raw JSON response length: ', length(response));

end.
