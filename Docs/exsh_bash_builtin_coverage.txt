Bash builtin coverage summary for exsh
=====================================

Bash builtins reported by `help`
--------------------------------
. : [ alias bg bind break builtin caller cd command compgen complete compopt continue declare disown echo enable eval exec exit export false fc fg getopts hash help history jobs kill let local logout mapfile printf pwd read readarray readonly return set shift shopt source suspend test times trap true type typeset ulimit umask unalias unset wait

Builtins currently implemented in exsh
--------------------------------------
cd pwd dirs pushd popd echo exit exec true false set unset export read printf test [ shift alias unalias history setenv unsetenv declare jobs disown fg bg wait builtin source . trap local let break continue : eval return logout finger help bind shopt command type getopts mapfile readarray

Bash builtins missing from exsh
-------------------------------
caller compgen complete compopt enable fc hash kill suspend ulimit

Plans to address missing builtins
---------------------------------
1) Directory stack builtins (pushd, popd, dirs): Completed.
   - Implemented via ShellRuntimeState directory stack support that persists the initial working directory across the session.
   - Helpers normalise paths, update PWD/OLDPWD, and mirror vmBuiltinShellCd error handling.
   - vmBuiltinShellPushd, vmBuiltinShellPopd, and vmBuiltinShellDirs are registered with kShellBuiltins and recognised by shellIsRuntimeBuiltin.
   - Documented in kShellHelpTopics with regression coverage matching Bash directory stack behaviour.

2) Programmable completion builtins (compgen, complete, compopt):
   - Introduce a completion registry in the interactive runtime near the tab completion helpers so programmable definitions can be consulted before globbing.
   - Implement handlers in src/backend_ast/shell.c that parse Bash style flags and mutate or query the registry using the option parsing approach from declare and shopt.
   - Register the builtins and their help topics, wiring them into kShellBuiltins and shellIsRuntimeBuiltin.
   - Extend the manifest driven tests with parity cases that exercise programmable completion against Bash.

3) Command lookup builtins (command, type, hash, enable):
   - Added lookup helpers that expose alias, function, builtin, and PATH resolution so command -v/-V and type can report matches.
   - Implemented command and type query modes with documentation and help topics covering -a/-p/-t/-v/-V.
   - Remaining work: extend command to handle execution, implement hash/enable, and add parity coverage for the outstanding features.

4) Job control builtins (disown, kill, suspend):
   - Disown: Implemented. The job registry tracks disowned entries so jobs listings, fg/bg, and wait ignore them while they continue running in the background.
   - Remaining work: implement kill and suspend, routing signals and integrating with shellJobControlRestoreForeground. Add parity tests for signalling behaviour.

5) getopts builtin: Completed.
   - Added vmBuiltinShellGetopts which keeps OPTIND/OPTARG in sync with gShellRuntime, supports clustered short options, consumes arguments that require parameters, and mirrors Bash error reporting for missing operands.
   - The builtin is registered with both the frontend and runtime tables so compiled scripts and the interactive shell share behaviour.
   - Regression coverage (`getopts_basic`) exercises option parsing alongside Bash to confirm parity for OPTARG and OPTIND updates.

6) fc history builtin:
   - Build history search and edit helpers on top of gShellHistory, matching Bash editor invocation and error handling.
   - Implement vmBuiltinShellFc beside vmBuiltinShellHistory, re running edited commands and updating history and status accordingly.
   - Register fc in the builtin tables and create parity tests that edit commands and verify output with Bash.

7) caller builtin:
   - Track function invocations by pushing frames that contain name and source location when shellInvokeFunction runs and pop them afterwards.
   - Implement vmBuiltinShellCaller to read the stack, honour optional depth arguments, and print frames in Bash compatible format.
   - Register the builtin, document it, and add regression scripts that call caller within nested functions for parity with Bash.

8) let arithmetic builtin: Completed.
   - Added vmBuiltinShellLet which evaluates each argument with shellEvaluateArithmetic, applying assignments via shellSetTrackedVariable and compound operators for +=, -=, *=, /=, and %= while tracking arithmetic errors.
   - Registered the builtin across kShellBuiltins, shellIsRuntimeBuiltin, the frontend registry, and documented it within kShellHelpTopics.
   - Parity tests remain to be added so Bash comparison coverage can exercise the new assignment semantics.

9) mapfile and readarray builtins: Completed.
   - Implemented vmBuiltinShellMapfile to slurp standard input into indexed arrays while honouring the `-t` flag for trimming trailing newlines and keeping results in the array registry/environment.
   - Registered both mapfile and its readarray alias with the frontend so scripts and interactive sessions can load data without launching external processes.
   - Added parity coverage (`mapfile_basic`) that validates array population against Bash for default and `-t` modes.

10) readonly and typeset builtins:
    - Extend the variable tracking layer to record read only flags when shellSetTrackedVariable mutates entries, rejecting writes to protected names.
    - Implement vmBuiltinShellReadonly and vmBuiltinShellTypeset alongside vmBuiltinShellDeclare, sharing option parsing and mapping typeset to the same handler through aliases.
    - Register both builtins with documentation and add parity tests for assignments, listing, and write failures.

11) printf builtin: Completed.
    - Added vmBuiltinShellPrintf with string parsing that honours width, precision, and numeric conversions while reporting errors without aborting the shell.
    - Registered printf across the runtime, frontend registry, builtin catalogue, and help topics so scripts and interactive sessions can invoke it.
    - Introduced regression coverage that exercises numeric, string, escape handling, and usage errors alongside Bash for parity.

12) times builtin: Completed.
    - Implemented vmBuiltinShellTimes using times(2) to gather cumulative shell and child CPU usage and format Bash-compatible minute/second output.
    - Registered the builtin with the runtime, frontend registry, builtin catalogue, and help topics so it appears in help and dispatch tables.
    - Added regression coverage that validates formatting and exit status while keeping behaviour aligned with Bash output expectations.

13) ulimit and umask builtins:
    - Implemented vmBuiltinShellUmask to parse octal modes, support -S symbolic output, register documentation, and add regression coverage for numeric and failure flows.
    - Remaining work: implement vmBuiltinShellUlimit using getrlimit and setrlimit, covering common flags and matching Bash diagnostics.

14) unalias builtin: Completed.
    - Added helpers that delete individual aliases or clear all entries and exposed them through vmBuiltinShellUnalias.
    - Registered the builtin with the shell frontend, runtime dispatch table, and help catalog so it is available interactively.
    - Added Bash parity coverage that removes specific aliases, clears every alias via -a, and validates error handling for missing names.

15) logout builtin: Completed.
    - Added vmBuiltinShellLogout which checks the login_shell shopt flag before exiting and reports errors otherwise.
    - Registered the builtin in the frontend and help catalog so it is available interactively.
    - Added regression coverage that exercises the non-login shell error handling alongside Bash for parity.

