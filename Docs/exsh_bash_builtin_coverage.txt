Bash builtin coverage summary for exsh
=====================================

Bash builtins reported by `help`
--------------------------------
. : [ alias bg bind break builtin caller cd command compgen complete compopt continue declare disown echo enable eval exec exit export false fc fg getopts hash help history jobs kill let local logout mapfile printf pwd read readarray readonly return set shift shopt source suspend test times trap true type typeset ulimit umask unalias unset wait

Builtins currently implemented in exsh
--------------------------------------
cd pwd dirs pushd popd echo exit exec true false set unset export read test [ shift alias unalias history setenv unsetenv declare jobs fg bg wait builtin source . trap local let break continue : eval return finger help bind shopt command type

Bash builtins missing from exsh
-------------------------------
caller compgen complete compopt disown enable fc getopts hash kill logout mapfile readarray printf suspend times ulimit

Plans to address missing builtins
---------------------------------
1) Directory stack builtins (pushd, popd, dirs): Completed.
   - Implemented via ShellRuntimeState directory stack support that persists the initial working directory across the session.
   - Helpers normalise paths, update PWD/OLDPWD, and mirror vmBuiltinShellCd error handling.
   - vmBuiltinShellPushd, vmBuiltinShellPopd, and vmBuiltinShellDirs are registered with kShellBuiltins and recognised by shellIsRuntimeBuiltin.
   - Documented in kShellHelpTopics with regression coverage matching Bash directory stack behaviour.

2) Programmable completion builtins (compgen, complete, compopt):
   - Introduce a completion registry in the interactive runtime near the tab completion helpers so programmable definitions can be consulted before globbing.
   - Implement handlers in src/backend_ast/shell.c that parse Bash style flags and mutate or query the registry using the option parsing approach from declare and shopt.
   - Register the builtins and their help topics, wiring them into kShellBuiltins and shellIsRuntimeBuiltin.
   - Extend the manifest driven tests with parity cases that exercise programmable completion against Bash.

3) Command lookup builtins (command, type, hash, enable):
   - Added lookup helpers that expose alias, function, builtin, and PATH resolution so command -v/-V and type can report matches.
   - Implemented command and type query modes with documentation and help topics covering -a/-p/-t/-v/-V.
   - Remaining work: extend command to handle execution, implement hash/enable, and add parity coverage for the outstanding features.

4) Job control builtins (disown, kill, suspend):
   - Extend the job registry to record disowned jobs and prevent later status reports or waits from touching them.
   - Implement builtin handlers near vmBuiltinShellJobs and vmBuiltinShellFg so disown updates jobs, kill routes signals, and suspend coordinates with shellJobControlRestoreForeground.
   - Register the new builtins and help entries, respecting job control availability, and add parity tests for signalling and disown semantics.

5) getopts builtin:
   - Track OPTIND and OPTARG in ShellRuntimeState, initialising defaults during startup.
   - Implement vmBuiltinShellGetopts to walk gParamValues, update OPTIND and OPTARG, and report errors via shellUpdateStatus using existing parameter expansion helpers.
   - Register the builtin, document it, and add regression tests that mirror Bash success and error flows.

6) fc history builtin:
   - Build history search and edit helpers on top of gShellHistory, matching Bash editor invocation and error handling.
   - Implement vmBuiltinShellFc beside vmBuiltinShellHistory, re running edited commands and updating history and status accordingly.
   - Register fc in the builtin tables and create parity tests that edit commands and verify output with Bash.

7) caller builtin:
   - Track function invocations by pushing frames that contain name and source location when shellInvokeFunction runs and pop them afterwards.
   - Implement vmBuiltinShellCaller to read the stack, honour optional depth arguments, and print frames in Bash compatible format.
   - Register the builtin, document it, and add regression scripts that call caller within nested functions for parity with Bash.

8) let arithmetic builtin: Completed.
   - Added vmBuiltinShellLet which evaluates each argument with shellEvaluateArithmetic, applying assignments via shellSetTrackedVariable and compound operators for +=, -=, *=, /=, and %= while tracking arithmetic errors.
   - Registered the builtin across kShellBuiltins, shellIsRuntimeBuiltin, the frontend registry, and documented it within kShellHelpTopics.
   - Parity tests remain to be added so Bash comparison coverage can exercise the new assignment semantics.

9) mapfile and readarray builtins:
   - Reuse array logic inside vmBuiltinShellRead to create a helper that reads from a stream into an array variable with Bash compatible flags such as -t, -u, and -n.
   - Expose the helper through mapfile and its alias readarray, registering both names in the builtin table and dispatcher and documenting the shared behaviour.
   - Add regression tests that read sample input into arrays and compare exsh output with Bash.

10) readonly and typeset builtins:
    - Extend the variable tracking layer to record read only flags when shellSetTrackedVariable mutates entries, rejecting writes to protected names.
    - Implement vmBuiltinShellReadonly and vmBuiltinShellTypeset alongside vmBuiltinShellDeclare, sharing option parsing and mapping typeset to the same handler through aliases.
    - Register both builtins with documentation and add parity tests for assignments, listing, and write failures.

11) printf builtin:
    - Implement a handler that parses format strings and arguments, using the VM string utilities to handle escape sequences and error reporting similar to vmBuiltinShellRead.
    - Register printf in the builtin tables and dispatcher and document its usage in the help topics.
    - Add parity tests covering numeric formatting, escapes, and failure cases compared to Bash.

12) times builtin:
    - Track cumulative user and system CPU times for the shell and child processes by sampling around shellSpawnProcess and storing totals in the runtime state.
    - Implement vmBuiltinShellTimes to format and print the totals in a Bash compatible format and add documentation.
    - Register the builtin and create tests that exercise it after running known workloads, comparing the results to Bash within tolerances.

13) ulimit and umask builtins:
    - Implemented vmBuiltinShellUmask to parse octal modes, support -S symbolic output, register documentation, and add regression coverage for numeric and failure flows.
    - Remaining work: implement vmBuiltinShellUlimit using getrlimit and setrlimit, covering common flags and matching Bash diagnostics.

14) unalias builtin: Completed.
    - Added helpers that delete individual aliases or clear all entries and exposed them through vmBuiltinShellUnalias.
    - Registered the builtin with the shell frontend, runtime dispatch table, and help catalog so it is available interactively.
    - Added Bash parity coverage that removes specific aliases, clears every alias via -a, and validates error handling for missing names.

15) logout builtin:
    - Implement vmBuiltinShellLogout to reuse the exit path while verifying the shell is marked as a login shell before terminating.
    - Register and document the builtin, ensuring history and status bookkeeping matches exit.
    - Add tests that confirm logout succeeds in login contexts and errors otherwise when compared with Bash.

