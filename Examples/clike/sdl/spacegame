#!/usr/bin/env clike
/*
 * Simple Space style shooter using SDL graphics and sound.  WIP
 */

str trimTrailingSlashes(str path) {
    int len = length(path);
    while (len > 1 && copy(path, len, 1) == "/") {
        path = copy(path, 1, len - 1);
        len = len - 1;
    }
    if (len == 0) return "";
    return path;
}

str stripLeadingCurrent(str path) {
    while (length(path) >= 2 && copy(path, 1, 2) == "./") {
        if (length(path) == 2) {
            return "";
        }
        path = copy(path, 3, length(path) - 2);
    }
    return path;
}

str normalizePath(str path) {
    if (strlen(path) == 0) return "";
    if (copy(path, 1, 1) == "/") return trimTrailingSlashes(path);
    str cleaned = stripLeadingCurrent(path);
    str pwd = getenv("PWD");
    if (strlen(pwd) == 0) {
        return trimTrailingSlashes(cleaned);
    }
    str base = trimTrailingSlashes(pwd);
    if (strlen(cleaned) == 0) {
        return base;
    }
    if (strlen(base) == 0) {
        return trimTrailingSlashes(cleaned);
    }
    if (strlen(base) == 1 && copy(base, 1, 1) == "/") {
        return trimTrailingSlashes(base + cleaned);
    }
    return trimTrailingSlashes(base + "/" + cleaned);
}

str pathDirname(str path) {
    if (strlen(path) == 0) return "";
    str cleaned = trimTrailingSlashes(path);
    int len = length(cleaned);
    if (len == 0) return "";
    if (len == 1 && copy(cleaned, 1, 1) == "/") return "/";
    int i = len;
    while (i > 0 && copy(cleaned, i, 1) != "/") i = i - 1;
    if (i <= 0) return "";
    if (i == 1) return "/";
    return trimTrailingSlashes(copy(cleaned, 1, i - 1));
}

str pathJoin(str base, str rel) {
    if (strlen(rel) == 0) return trimTrailingSlashes(base);
    if (strlen(base) == 0) return rel;
    str normalizedBase = trimTrailingSlashes(base);
    if (copy(rel, 1, 1) == "/") {
        if (strlen(normalizedBase) == 1 && copy(normalizedBase, 1, 1) == "/") {
            return rel;
        }
        return normalizedBase + rel;
    }
    if (strlen(normalizedBase) == 1 && copy(normalizedBase, 1, 1) == "/") {
        return normalizedBase + rel;
    }
    return normalizedBase + "/" + rel;
}

int isDirectory(str path) {
    int attr = getfattr(path);
    return (attr & 16) != 0 ? 1 : 0;
}

int pathExists(str path) {
    if (strlen(path) == 0) return 0;
    if (fileexists(path)) return 1;
    if (isDirectory(path)) return 1;
    return 0;
}

str ConfiguredInstallRoot = "@PSCAL_INSTALL_ROOT_RESOLVED@";

str defaultInstallRoot() {
    str scriptPath = normalizePath(paramstr(0));
    if (strlen(scriptPath) == 0) return "";
    str dir = pathDirname(scriptPath);
    if (strlen(dir) == 0) return "";
    dir = pathDirname(dir);
    if (strlen(dir) == 0) return "";
    dir = pathDirname(dir);
    if (strlen(dir) == 0) return "";
    dir = pathDirname(dir);
    return dir;
}

str resolveInstallRoot(str resourceRel) {
    str override = normalizePath(getenv("PSCAL_INSTALL_ROOT"));
    if (strlen(override) > 0) {
        if (strlen(resourceRel) == 0 || pathExists(pathJoin(override, resourceRel))) {
            return override;
        }
    }

    if (length(ConfiguredInstallRoot) > 0 && copy(ConfiguredInstallRoot, 1, 1) != "@") {
        str configured = normalizePath(ConfiguredInstallRoot);
        if (strlen(configured) > 0) {
            if (strlen(resourceRel) == 0 || pathExists(pathJoin(configured, resourceRel))) {
                return configured;
            }
        }
    }

    str candidate = defaultInstallRoot();
    if (strlen(candidate) > 0) {
        if (strlen(resourceRel) == 0 || pathExists(pathJoin(candidate, resourceRel))) {
            return candidate;
        }
    }

    str fallback = normalizePath("/opt/pscal");
    if (strlen(resourceRel) == 0 || pathExists(pathJoin(fallback, resourceRel))) {
        return fallback;
    }
    fallback = normalizePath("/usr/local/pscal");
    if (strlen(resourceRel) == 0 || pathExists(pathJoin(fallback, resourceRel))) {
        return fallback;
    }

    if (strlen(candidate) > 0) return candidate;
    if (strlen(override) > 0) return override;
    return fallback;
}

int main() {
#ifdef SDL_ENABLED
    int ScreenWidth;
    int ScreenHeight;
    int PlayerX;
    int PlayerY;
    int PlayerW;
    int PlayerH;
    int PlayerSpeed;

    int BulletX;
    int BulletY;
    int BulletW;
    int BulletH;
    int BulletSpeed;
    int BulletActive;

    const int AlienRows = 3;
    const int AlienCols = 6;
    int AlienW;
    int AlienH;
    int AlienPaddingX;
    int AlienPaddingY;
    int AlienDir;
    int AlienSpeed;
    int AliensAlive;
    int i;
    int j;
    int minAlienX;
    int maxAlienX;
    int ShotSound;
    int ExplodeSound;
    str assetBase;

    /* Arrays are 1-based to match the underlying Pascal VM. */
    int AlienX[AlienRows * AlienCols + 1];
    int AlienY[AlienRows * AlienCols + 1];
    int AlienAlive[AlienRows * AlienCols + 1];

    ScreenWidth = 800;
    ScreenHeight = 600;
    initgraph(ScreenWidth, ScreenHeight, "Space Shooter CLike(WIP)");

    str installRoot;
    installRoot = resolveInstallRoot("/lib/sounds/paddle_hit.wav");
    assetBase = pathJoin(installRoot, "/lib/sounds");
    initsoundsystem();
    ShotSound = loadsound(assetBase + "/paddle_hit.wav");
    ExplodeSound = loadsound(assetBase + "/wall_hit.wav");

    PlayerW = 40;
    PlayerH = 20;
    PlayerX = ScreenWidth / 2 - PlayerW / 2;
    PlayerY = ScreenHeight - PlayerH - 10;
    PlayerSpeed = 5;

    BulletW = 4;
    BulletH = 10;
    BulletSpeed = 8;
    BulletActive = 0;

    AlienW = 30;
    AlienH = 20;
    AlienPaddingX = 10;
    AlienPaddingY = 10;
    AlienSpeed = 2;
    AlienDir = 1;

    i = 1;
    while (i <= AlienRows) {
        j = 1;
        while (j <= AlienCols) {
            int idx;
            idx = (i - 1) * AlienCols + j;
            AlienX[idx] = 50 + (j - 1) * (AlienW + AlienPaddingX);
            AlienY[idx] = 50 + (i - 1) * (AlienH + AlienPaddingY);
            AlienAlive[idx] = 1;
            j = j + 1;
        }
        i = i + 1;
    }
    AliensAlive = AlienRows * AlienCols;

    while (!quitrequested() && AliensAlive > 0) {
        graphloop(16);

        int key;
        key = pollkey();
        while (key != 0) {
            if (key == 1073741904) {
                PlayerX = PlayerX - PlayerSpeed;
            } else if (key == 1073741903) {
                PlayerX = PlayerX + PlayerSpeed;
            } else if (key == 32) {
                if (!BulletActive) {
                    BulletActive = 1;
                    BulletX = PlayerX + PlayerW / 2 - BulletW / 2;
                    BulletY = PlayerY - BulletH;
                    if (ShotSound != -1) {
                        playsound(ShotSound);
                    }
                }
            }
            key = pollkey();
        }
        if (PlayerX < 0) { PlayerX = 0; }
        if (PlayerX > ScreenWidth - PlayerW) { PlayerX = ScreenWidth - PlayerW; }

        if (BulletActive) {
            BulletY = BulletY - BulletSpeed;
            if (BulletY < 0) {
                BulletActive = 0;
            }
        }

        minAlienX = ScreenWidth;
        maxAlienX = 0;
        i = 1;
        while (i <= AlienRows * AlienCols) {
            if (AlienAlive[i]) {
                if (AlienX[i] < minAlienX) { minAlienX = AlienX[i]; }
                if (AlienX[i] + AlienW > maxAlienX) { maxAlienX = AlienX[i] + AlienW; }
            }
            i = i + 1;
        }
        if (AlienDir == 1 && maxAlienX >= ScreenWidth - 10) {
            AlienDir = -1;
            i = 1;
            while (i <= AlienRows * AlienCols) {
                AlienY[i] = AlienY[i] + AlienH;
                i = i + 1;
            }
        } else if (AlienDir == -1 && minAlienX <= 10) {
            AlienDir = 1;
            i = 1;
            while (i <= AlienRows * AlienCols) {
                AlienY[i] = AlienY[i] + AlienH;
                i = i + 1;
            }
        }
        i = 1;
        while (i <= AlienRows * AlienCols) {
            if (AlienAlive[i]) {
                AlienX[i] = AlienX[i] + AlienSpeed * AlienDir;
            }
            i = i + 1;
        }

        if (BulletActive) {
            i = 1;
            while (i <= AlienRows * AlienCols) {
                if (AlienAlive[i]) {
                    if (BulletX < AlienX[i] + AlienW &&
                        BulletX + BulletW > AlienX[i] &&
                        BulletY < AlienY[i] + AlienH &&
                        BulletY + BulletH > AlienY[i]) {
                        AlienAlive[i] = 0;
                        BulletActive = 0;
                        AliensAlive = AliensAlive - 1;
                        if (ExplodeSound != -1) {
                            playsound(ExplodeSound);
                        }
                        break;
                    }
                }
                i = i + 1;
            }
        }

        cleardevice();
        setrgbcolor(0, 255, 0);
        /* fillrect expects top-left and bottom-right coordinates */
        fillrect(PlayerX, PlayerY, PlayerX + PlayerW - 1, PlayerY + PlayerH - 1);
        if (BulletActive) {
            setrgbcolor(255, 255, 0);
            fillrect(BulletX, BulletY, BulletX + BulletW - 1, BulletY + BulletH - 1);
        }
        setrgbcolor(255, 0, 0);
        i = 1;
        while (i <= AlienRows * AlienCols) {
            if (AlienAlive[i]) {
                fillrect(AlienX[i], AlienY[i], AlienX[i] + AlienW - 1, AlienY[i] + AlienH - 1);
            }
            i = i + 1;
        }
        updatescreen();
    }

    quitsoundsystem();
    closegraph();
    return 0;
#else
    printf("SDL support not enabled.\n");
    return 1;
#endif
}
