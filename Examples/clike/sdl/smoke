#!/usr/bin/env clike
#ifdef SDL_ENABLED
// Rotating cube demo showcasing the 3D SDL/OpenGL builtins exposed to CLike.
// Requires building Pscal with SDL support (`-DSDL=ON`).

const int WIDTH = 800;
const int HEIGHT = 600;

void draw_cube() {
    glbegin("quads");

    glnormal3f(0.0, 0.0, 1.0);
    glcolor3f(1.0, 0.0, 0.0);
    glvertex3f(-0.5, -0.5,  0.5);
    glvertex3f( 0.5, -0.5,  0.5);
    glvertex3f( 0.5,  0.5,  0.5);
    glvertex3f(-0.5,  0.5,  0.5);

    glnormal3f(0.0, 0.0, -1.0);
    glcolor3f(0.0, 1.0, 0.0);
    glvertex3f(-0.5, -0.5, -0.5);
    glvertex3f(-0.5,  0.5, -0.5);
    glvertex3f( 0.5,  0.5, -0.5);
    glvertex3f( 0.5, -0.5, -0.5);

    glnormal3f(-1.0, 0.0, 0.0);
    glcolor3f(0.0, 0.0, 1.0);
    glvertex3f(-0.5, -0.5, -0.5);
    glvertex3f(-0.5, -0.5,  0.5);
    glvertex3f(-0.5,  0.5,  0.5);
    glvertex3f(-0.5,  0.5, -0.5);

    glnormal3f(1.0, 0.0, 0.0);
    glcolor3f(1.0, 1.0, 0.0);
    glvertex3f(0.5, -0.5, -0.5);
    glvertex3f(0.5,  0.5, -0.5);
    glvertex3f(0.5,  0.5,  0.5);
    glvertex3f(0.5, -0.5,  0.5);

    glnormal3f(0.0, 1.0, 0.0);
    glcolor3f(0.0, 1.0, 1.0);
    glvertex3f(-0.5,  0.5, -0.5);
    glvertex3f(-0.5,  0.5,  0.5);
    glvertex3f( 0.5,  0.5,  0.5);
    glvertex3f( 0.5,  0.5, -0.5);

    glnormal3f(0.0, -1.0, 0.0);
    glcolor3f(1.0, 0.0, 1.0);
    glvertex3f(-0.5, -0.5, -0.5);
    glvertex3f( 0.5, -0.5, -0.5);
    glvertex3f( 0.5, -0.5,  0.5);
    glvertex3f(-0.5, -0.5,  0.5);

    glend();
}

void setup_lighting() {
    glcleardepth(1.0);
    gldepthtest(1);
    glenable("lighting");
    glenable("light0");
    glenable("color_material");
    glenable("normalize");
    glshademodel("smooth");
    glcolormaterial("front", "ambient_and_diffuse");

    gllightfv("light0", "ambient", 0.20, 0.22, 0.28, 1.0);
    gllightfv("light0", "diffuse", 0.85, 0.85, 0.92, 1.0);
    gllightfv("light0", "specular", 0.70, 0.70, 0.78, 1.0);

    glmaterialfv("front", "specular", 0.45, 0.45, 0.50, 1.0);
    glmaterialf("front", "shininess", 36.0);
}

int main() {
    int frame;
    double angle;
    int vsync_on = 1;

    initgraph3d(WIDTH, HEIGHT, "CLike SDL GL Cube", 24, 8);
    glviewport(0, 0, WIDTH, HEIGHT);
    setup_lighting();
    glsetswapinterval(1);

    for (frame = 0; frame < 600; frame = frame + 1) {
        angle = frame * 0.6;

        if (frame > 0 && frame % 180 == 0) {
            vsync_on = !vsync_on;
            glsetswapinterval(vsync_on ? 1 : 0);
        }

        glclearcolor(0.1, 0.1, 0.15, 1.0);
        glclear();

        glmatrixmode("projection");
        glloadidentity();
        glscalef(1.3, 1.3, 1.3);

        glmatrixmode("modelview");
        glloadidentity();
        gllightfv("light0", "position", 0.3, 0.7, 1.0, 0.0);
        gltranslatef(0.0, 0.0, -0.2);
        glrotatef(angle, 1.0, 1.0, 0.0);

        glpushmatrix();
        glrotatef(angle * 0.25, 0.0, 0.0, 1.0);
        draw_cube();
        glpopmatrix();

        glswapwindow();
        graphloop(1);
    }

    closegraph3d();
    return 0;
}
#else
int main() { printf("SDL not enabled\n"); return 0; }
#endif

