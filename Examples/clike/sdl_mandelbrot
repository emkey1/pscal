#!/usr/bin/env clike
/*
 * SDL Mandelbrot set renderer in clike.
 * Press Q in the console to quit after rendering.
 */

const int WindowWidth = 1024;
const int WindowHeight = 768;
const int MaxIterations = 128;
const float MinRe = -2.0;
const float MaxRe = 1.0;
const int ScreenUpdateInterval = 1;
const int MandelBytesPerPixel = 4;
const int FontSize = 18;

byte pixelData[WindowWidth * WindowHeight * MandelBytesPerPixel];

int main() {
#ifdef SDL_ENABLED
    float MinIm;
    float MaxIm;
    float ImRange;
    float ReFactor;
    float ImFactor;
    int MaxX;
    int MaxY;
    int x;
    int y;
    float c_re;
    float c_im;
    float Z_re;
    float Z_im;
    float Z_re2;
    float Z_im2;
    int n;
    int R;
    int G;
    int B;
    int quit;
    int textureID;
    int bufferBaseIdx;
    int TextReady;
    str systemFontPath;
    str repoFontPath1;
    str repoFontPath2;

    TextReady = 0;
    systemFontPath = "/usr/local/pscal/fonts/Roboto/static/Roboto-Regular.ttf";
    repoFontPath1 = "fonts/Roboto/static/Roboto-Regular.ttf";
    repoFontPath2 = "../../fonts/Roboto/static/Roboto-Regular.ttf";

    printf("Calculating Mandelbrot set. The window will update as rows are drawn...\n");
    initgraph(WindowWidth, WindowHeight, "Mandelbrot in CLike (No Acceleration)");
    if (fileexists(systemFontPath)) {
        inittextsystem(systemFontPath, FontSize);
        TextReady = 1;
    } else if (fileexists(repoFontPath1)) {
        inittextsystem(repoFontPath1, FontSize);
        TextReady = 1;
    } else if (fileexists(repoFontPath2)) {
        inittextsystem(repoFontPath2, FontSize);
        TextReady = 1;
    } else {
        printf("Warning: Unable to locate Roboto font. Text rendering disabled.\n");
    }
    textureID = createtexture(WindowWidth, WindowHeight);
    if (textureID < 0) {
        printf("Error: unable to create texture.\n");
        halt();
    }
    cleardevice();
    updatescreen();
    MaxX = getmaxx();
    MaxY = getmaxy();

    ImRange = (MaxRe - MinRe) * MaxY / MaxX;
    MinIm = -ImRange / 2.0;
    MaxIm = MinIm + ImRange;
    ReFactor = (MaxRe - MinRe) / (MaxX - 1);
    ImFactor = (MaxIm - MinIm) / (MaxY - 1);

    y = 0;
    while (y <= MaxY) {
        c_im = MaxIm - y * ImFactor;
        x = 0;
        while (x <= MaxX) {
            c_re = MinRe + x * ReFactor;
            Z_re = c_re;
            Z_im = c_im;
            n = 0;
            while (n < MaxIterations) {
                Z_re2 = Z_re * Z_re;
                Z_im2 = Z_im * Z_im;
                if (Z_re2 + Z_im2 > 4.0) {
                    break;
                }
                Z_im = 2.0 * Z_re * Z_im + c_im;
                Z_re = Z_re2 - Z_im2 + c_re;
                n = n + 1;
            }
            if (n == MaxIterations) {
                R = 0;
                G = 0;
                B = 0;
            } else {
                R = (n * 5) % 256;
                G = (n * 7 + 85) % 256;
                B = (n * 11 + 170) % 256;
            }
            bufferBaseIdx = (y * (MaxX + 1) + x) * MandelBytesPerPixel;
            pixelData[bufferBaseIdx + 0] = R;
            pixelData[bufferBaseIdx + 1] = G;
            pixelData[bufferBaseIdx + 2] = B;
            pixelData[bufferBaseIdx + 3] = 255;
            x = x + 1;
        }
        if (((y + 1) % ScreenUpdateInterval) == 0 || y == MaxY) {
            updatetexture(textureID, pixelData);
            cleardevice();
            rendercopy(textureID);
            if (TextReady) {
                outtextxy(8, 8, "Rendering...");
            }
            updatescreen();
            graphloop(0);
        }
        y = y + 1;
    }

    updatetexture(textureID, pixelData);
    cleardevice();
    rendercopy(textureID);
    updatescreen();
    printf("Mandelbrot rendered. Press Q in the console to quit.\n");
    quit = 0;
    while (!quit) {
        if (keypressed()) {
            char c;
            c = readkey();
            if (toupper(c) == 'Q') {
                quit = 1;
            }
        }
        graphloop(16);
    }
    destroytexture(textureID);
    if (TextReady) {
        quittextsystem();
    }
    closegraph();
    return 0;
#else
    printf("SDL support not enabled.\n");
    return 1;
#endif
}
