#!/usr/bin/env pascal
program HttpAsyncProgressCancelDemo;

var s, id, code: integer;
    ms: mstream;
    cwd, url: string;
    f: text;
    i: integer;
begin
  { Create a moderately large file (~1MB) }
  assign(f, 'big_src.txt');
  rewrite(f);
  for i := 1 to 65536 do writeln(f, 'xxxxxxxxxxxxxxxx');  { 16 bytes per line }
  close(f);

  cwd := GetEnv('PWD');
  url := 'file://' + cwd + '/big_src.txt';

  s := HttpSession();
  id := HttpRequestAsyncToFile(s, 'GET', url, nil, 'big_dst.txt');

  { Poll progress and cancel when some bytes have arrived }
  while HttpIsDone(id) = 0 do
  begin
    if HttpGetAsyncProgress(id) > 50000 then
    begin
      if HttpCancel(id) = 1 then
        break;
    end;
    Delay(1);
  end;

  ms := mstreamcreate();
  code := HttpTryAwait(id, ms);
  if code = -2 then code := HttpAwait(id, ms);
  writeln('Final status: ', code, ' (expect -1 when canceled)');

  mstreamfree(ms);
  HttpClose(s);
end.

