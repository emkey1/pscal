#!/usr/bin/env pascal
PROGRAM SDLPlasma256Color;

// USES System; // Implicitly used for Sin, Sqrt, Trunc if not global

CONST
  // Window dimensions - you can make these dynamic or fixed
  WindowWidth  = 1024; // Example width
  WindowHeight = 768; // Example height
  WindowTitle  = '256-Color Plasma Effect (SDL)';

VAR
  Row, Col      : Integer;
  // MaxX, MaxY will come from GetMaxX/GetMaxY
  x, y          : Real; // Use real for calculations
  val1, val2, val3, finalVal : Real;
  ColorIndex    : Byte; // Use Byte for 0-255 range
  InvWidth, InvHeight : Real; // For scaling coordinates
  CurrentMaxX, CurrentMaxY : Integer; // To store graphics dimensions

BEGIN
  // 1. Initialize Graphics
  InitGraph(WindowWidth, WindowHeight, WindowTitle); // Assumed signature
  ClearDevice; // Clear to default background (often black)

  CurrentMaxX := GetMaxX; // Get actual drawing width (0 to MaxX)
  CurrentMaxY := GetMaxY; // Get actual drawing height (0 to MaxY)

  // Pre-calculate scaling factors based on actual graphics dimensions
  // Note: MaxX/MaxY are 0-indexed, so drawable width/height is MaxX+1 / MaxY+1
  IF (CurrentMaxX + 1) > 0 THEN InvWidth := 1.0 / (CurrentMaxX + 1) ELSE InvWidth := 0;
  IF (CurrentMaxY + 1) > 0 THEN InvHeight := 1.0 / (CurrentMaxY + 1) ELSE InvHeight := 0;

  // No GotoXY or initial WriteLn needed directly on the graphics screen
  // Status messages would typically be in the window title or a separate console if your interpreter supports dual output.
  // For simplicity, we'll omit the "Generating..." message on the graphics screen.

  // 2. Loop through screen pixel coordinates (0-based)
  Writeln('Window must be fully rendered before it will display.  This might take a bit of time');
  FOR Row := 0 TO CurrentMaxY DO
  BEGIN
    FOR Col := 0 TO CurrentMaxX DO
    BEGIN
      // Scale coordinates for smoother patterns across screen size
      // Using (CurrentMaxX+1) and (CurrentMaxY+1) for total pixels
      x := Col * InvWidth * 16.0; // Multiply by factors to control wave frequency
      y := Row * InvHeight * 8.0;

      // Plasma calculation (same as original)
      val1 := Sin(x);
      val2 := Sin(y / 2.0);
      val3 := Sin(Sqrt(x*x + y*y) / 2.0); // Wave based on distance from corner

      finalVal := (val1 + val2 + val3) / 3.0; // Average waves
      finalVal := (finalVal + 1.0) * 127.5;   // Shift range to 0..2, scale to 0..255

      // Clamp the value to the valid Byte range [0..255]
      IF finalVal < 0 THEN
        ColorIndex := 0
      ELSE IF finalVal > 255 THEN
        ColorIndex := 255
      ELSE
        ColorIndex := Trunc(finalVal);

      // Optional: Avoid pure black if you want, or map specific indices
      // IF (ColorIndex = 0) THEN ColorIndex := 16; // Example: map black to dark grey

      // Set color and draw the pixel
      SetColor(ColorIndex);      // Assumed built-in
      PutPixel(Col, Row);        // Assumed built-in (Col=X, Row=Y)
    END; // End FOR Col
  END; // End FOR Row

  // 3. Update the screen to show the drawn plasma
  UpdateScreen; // Assumed built-in

  // 4. Wait for a key press before exiting
  // Writeln('Plasma complete. Press any key to exit.'); // This would go to console if interpreter supports it
  GraphLoop(100); // Process events for a short time to ensure window is responsive
  ReadKey;      // Wait for an actual key press

  // 5. Close graphics mode
  CloseGraph; // Assumed built-in

END.
