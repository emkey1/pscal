#!/usr/bin/env pascal
PROGRAM SDLTextureMandelbrotZoomFixed;

USES CRT;

CONST
  MandelWindowWidth   = 640;
  MandelWindowHeight  = 480;
  MandelWindowTitle   = 'Mandelbrot (Zoom Fixed - LMB:Zoom, RMB:Reset, Q:Quit)';
  MandelMaxIterations = 50;
  MandelZoomFactor    = 2.0;
  MandelBytesPerPixel = 4;
  MandelTextureUpdateIntervalRows = 1;

  InitialMinRe  = -2.0;
  InitialMaxRe  =  1.0;
  InitialMinIm  = -1.2;

  ButtonLeft   = 1;
  ButtonRight  = 4;

  ControlsStartY = 4;
  StatusLineY    = 10;

TYPE
  FlatPixelBuffer = ARRAY[0..(MandelWindowWidth * MandelWindowHeight * MandelBytesPerPixel) - 1] OF Byte;

VAR
  x0, y0, zx, zy, zxTemp : Real;
  Iteration           : Integer;
  R_calc, G_calc, B_calc : Byte;

  MinRe, MaxRe, MinIm, MaxIm : Real;
  ViewPixelWidth, ViewPixelHeight : Integer;
  ReRange, ImRange           : Real;
  ScaleRe, ScaleIm           : Real;

  MandelTextureID : Integer;
  PixelData       : FlatPixelBuffer;
  QuitProgram     : Boolean;
  RedrawNeeded    : Boolean;
  MouseX, MouseY, MouseButtons : Integer;

  NewCenterX, NewCenterY          : Real;
  CurrentViewWidthRe, CurrentViewHeightIm : Real;
  NewViewWidthRe, NewViewHeightIm     : Real;
  PercentDone : Integer;

// This procedure recalculates MaxIm and scaling factors based on CURRENT MinRe, MaxRe, MinIm
PROCEDURE UpdateScalingAndDependentViewParams;
BEGIN
  // GetMaxX/Y are based on InitGraph, which uses MandelWindowWidth/Height constants for texture too
  ViewPixelWidth  := MandelWindowWidth;  // Assuming texture matches window size
  ViewPixelHeight := MandelWindowHeight;

  ReRange := MaxRe - MinRe;
  IF ViewPixelWidth > 0 THEN
    MaxIm := MinIm + (ReRange * ViewPixelHeight) / ViewPixelWidth
  ELSE
    MaxIm := MinIm;
  ImRange := MaxIm - MinIm;

  IF ViewPixelWidth > 1 THEN ScaleRe := ReRange / (ViewPixelWidth - 1)
  ELSE IF ViewPixelWidth = 1 THEN ScaleRe := ReRange
  ELSE ScaleRe := 0;

  IF ViewPixelHeight > 1 THEN ScaleIm := ImRange / (ViewPixelHeight - 1)
  ELSE IF ViewPixelHeight = 1 THEN ScaleIm := ImRange
  ELSE ScaleIm := 0;

  // Update console display
  GotoXY(1, 2); ClrEol; Write('View: Re[', MinRe:0:4,'..',MaxRe:0:4,'], Im[',MinIm:0:4,'..',MaxIm:0:4,']');
  GotoXY(1, ControlsStartY + 4); ClrEol;
  Write('Max Iter: ', MandelMaxIterations, ', Zoom Factor: ', MandelZoomFactor:0:1, ', Texture ID: ', MandelTextureID); ClrEol;
END;

PROCEDURE ResetViewToInitial;
BEGIN
  MinRe := InitialMinRe;
  MaxRe := InitialMaxRe;
  MinIm := InitialMinIm;
  UpdateScalingAndDependentViewParams; // Now calculate MaxIm and scales for these initial values
END;

PROCEDURE UpdateAndDisplayTextureInProgress;
BEGIN
  UpdateTexture(MandelTextureID, PixelData);
  ClearDevice;
  RenderCopy(MandelTextureID);
  UpdateScreen;
  GraphLoop(0);
END;

PROCEDURE FillPixelDataAndDisplayProgressively;
VAR LocalPy, LocalPx, BufferBaseIdx : Integer;
BEGIN
  GotoXY(1, StatusLineY); ClrEol; Write('Calculating and rendering progressively...');
  FOR LocalPy := 0 TO ViewPixelHeight - 1 DO BEGIN
    FOR LocalPx := 0 TO ViewPixelWidth - 1 DO BEGIN
      x0 := MinRe + (LocalPx * ScaleRe); y0 := MaxIm - (LocalPy * ScaleIm);
      zx := 0.0; zy := 0.0; Iteration := 0;
      WHILE (zx*zx + zy*zy <= 4.0) AND (Iteration < MandelMaxIterations) DO
      BEGIN zxTemp := zx*zx - zy*zy + x0; zy := 2*zx*zy + y0; zx := zxTemp; Iteration := Iteration + 1; END;
      IF Iteration = MandelMaxIterations THEN BEGIN R_calc := 0; G_calc := 0; B_calc := 0; END
      ELSE BEGIN
        R_calc := ((Iteration * 12) MOD 256 + 256) MOD 256; G_calc := ((Iteration * 8 + 80) MOD 256 + 256) MOD 256; B_calc := ((Iteration * 5 + 160) MOD 256 + 256) MOD 256;
      END;
      BufferBaseIdx := (LocalPy * ViewPixelWidth + LocalPx) * MandelBytesPerPixel;
      PixelData[BufferBaseIdx + 0] := R_calc; PixelData[BufferBaseIdx + 1] := G_calc; PixelData[BufferBaseIdx + 2] := B_calc; PixelData[BufferBaseIdx + 3] := 255;
    END; // Px
    PercentDone := Trunc( (LocalPy + 1) * 100.0 / ViewPixelHeight );
    GotoXY(1, StatusLineY); ClrEol; Write('Processing: Row ', LocalPy + 1, '/', ViewPixelHeight, '. ~', PercentDone, '%');
    IF (((LocalPy + 1) MOD MandelTextureUpdateIntervalRows = 0) OR (LocalPy = ViewPixelHeight - 1)) THEN
    BEGIN UpdateAndDisplayTextureInProgress; END;
  END; // Py
  GotoXY(1, StatusLineY); ClrEol; Write('Render complete. Click, R-Click, or Q.');
END;

BEGIN // Main Program
  HideCursor; ClrScr;
  GotoXY(1, 1); Write('Pscal Texture Mandelbrot (Zoom Fixed)');
  GotoXY(1, ControlsStartY);     Write('Controls:');
  GotoXY(1, ControlsStartY + 1); Write('- LClick: Zoom In');
  GotoXY(1, ControlsStartY + 2); Write('- RClick: Reset View');
  GotoXY(1, ControlsStartY + 3); Write('- Q Key (in terminal): Quit');
  GotoXY(1, ControlsStartY + 5); Write('----------------------------------------------------------');

  InitGraph(MandelWindowWidth, MandelWindowHeight, MandelWindowTitle);
  MandelTextureID := CreateTexture(MandelWindowWidth, MandelWindowHeight);
  IF MandelTextureID < 0 THEN BEGIN GotoXY(1, StatusLineY); WriteLn('Error: No Texture! Halting.'); ReadKey; CloseGraph; NormVideo; ShowCursor; HALT; END;

  ResetViewToInitial; // Sets MinRe,MaxRe,MinIm to defaults AND calculates scales/MaxIm
  RedrawNeeded := True;
  QuitProgram  := False;

  WHILE NOT QuitProgram DO BEGIN
    IF RedrawNeeded THEN BEGIN
      FillPixelDataAndDisplayProgressively;
      RedrawNeeded := False;
    END ELSE BEGIN // If not redrawing, ensure screen is still updated and events processed
      ClearDevice; RenderCopy(MandelTextureID); UpdateScreen;
      GraphLoop(20);
    END;

    IF KeyPressed THEN BEGIN IF UpCase(ReadKey) = 'Q' THEN QuitProgram := True; END;
    GetMouseState(MouseX, MouseY, MouseButtons);

    IF (MouseButtons AND ButtonLeft) <> 0 THEN BEGIN
      IF NOT RedrawNeeded THEN BEGIN
        NewCenterX := MinRe + (MouseX * ScaleRe); NewCenterY := MaxIm - (MouseY * ScaleIm);
        CurrentViewWidthRe  := MaxRe - MinRe; CurrentViewHeightIm := MaxIm - MinIm;
        NewViewWidthRe  := CurrentViewWidthRe / MandelZoomFactor; NewViewHeightIm := CurrentViewHeightIm / MandelZoomFactor;
        MinRe := NewCenterX - (NewViewWidthRe / 2.0); MaxRe := NewCenterX + (NewViewWidthRe / 2.0);
        MinIm := NewCenterY - (NewViewHeightIm / 2.0);
        UpdateScalingAndDependentViewParams; // <<<< CALL THE CORRECT PROCEDURE HERE
        RedrawNeeded := True;
        GotoXY(1,StatusLineY); ClrEol; Write('Zooming... Click @ (', MouseX, ',', MouseY, ')');
      END;
    END
    ELSE IF (MouseButtons AND ButtonRight) <> 0 THEN BEGIN
      IF NOT RedrawNeeded THEN BEGIN
        ResetViewToInitial; // <<<< CALL THE CORRECT PROCEDURE HERE
        RedrawNeeded := True;
        GotoXY(1,StatusLineY); ClrEol; Write('Resetting view...');
      END;
    END;
  END; // WHILE

  DestroyTexture(MandelTextureID); CloseGraph;
  GotoXY(1, StatusLineY + 2); ClrEol; NormVideo; ShowCursor; WriteLn; WriteLn('Program terminated.');
END.
