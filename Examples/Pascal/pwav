#!/usr/bin/env pascal
program PlayWaveFile;

uses CRT;

{
  This program plays a specified WAV audio file.
  The filename must be provided as the first command-line argument
  when running the program with the pascal interpreter.

  Example usage (assuming the program is compiled to 'pwav'):
  pascal pwav my_sound.wav

  It assumes sound built-ins and command-line built-ins (ParamCount, ParamStr)
  and Delay are globally available.
}

var
  WaveFileName : String;        // Variable to store the filename from the command line
  SoundID : Integer;            // Variable to hold the ID of the loaded sound
  QuitRequested : Boolean;      // Flag to track if the user asked to quit early
  PlaybackFinished : Boolean;   // Flag set by the background playback thread when it exits
  PlaybackCompleted : Boolean;  // Tracks whether the sound played to completion
  PlaybackThreadID : Integer;   // Handle for the background playback thread
  InputChar : Char;             // Stores the last key pressed by the user when polling

procedure SoundPlaybackThread(UserData: Pointer);
begin
  PlaySound(SoundID);
  writeln('PlaySound called (background thread).');

  while True do
  begin
    if QuitRequested then
      break;

    if not IsSoundPlaying() then
    begin
      PlaybackCompleted := True;
      break;
    end;

    Delay(10);
  end;

  if (not PlaybackCompleted) and (not IsSoundPlaying()) then
  begin
    PlaybackCompleted := True;
  end;

  PlaybackFinished := True;
end;


begin
  writeln('Pscal WAV Player');
  writeln('-----------------');

  // Check if at least one command-line argument (the filename) was provided
  if ParamCount() < 1 then
  begin
    writeln('Error: No WAV filename provided on the command line.');
    writeln('Usage: pascal <program_name> <wave_file.wav>');
    writeln('Example: pascal pwav ding.wav');
    Halt(1); // Halt the program with an error code
  end;

  // Get the filename from the first command-line argument
  WaveFileName := ParamStr(1);
  writeln('Attempting to play: ', WaveFileName);

  // Initialize the Sound System
  InitSoundSystem;
  writeln('Sound system initialized.');

  // Load the sound file
  SoundID := LoadSound(WaveFileName);

  // Check if the sound loaded successfully
  if SoundID = -1 then
  begin
    writeln('Error loading sound file: ', WaveFileName);
    QuitSoundSystem; // Clean up sound system
    Halt(1); // Halt indicating failure
  end
  else // Sound loaded successfully (SoundID will be >= 1)
  begin
    writeln('Sound loaded successfully. Assigned SoundID: ', SoundID);

    // Prepare to play the sound once on a background thread while the main
    // thread remains responsive to keyboard input.
    writeln('Playing sound...');
    QuitRequested := False;
    PlaybackFinished := False;
    PlaybackCompleted := False;

    PlaybackThreadID := CreateThread(@SoundPlaybackThread, nil);

    if PlaybackThreadID = -1 then
    begin
      writeln('Warning: Unable to start playback thread. Falling back to single-threaded playback.');
      PlaySound(SoundID);
      writeln('PlaySound called.');
      writeln('Press Q to quit playback early.');

      while IsSoundPlaying() do
      begin
        if KeyPressed then
        begin
          InputChar := ReadKey;

          if UpCase(InputChar) = 'Q' then
          begin
            QuitRequested := True;
            writeln('Q pressed. Stopping playback early.');
            break;
          end;
        end;

        // Add a small delay to prevent the loop from consuming 100% CPU (busy-waiting).
        Delay(10);
      end;

      if (not QuitRequested) and (not IsSoundPlaying()) then
      begin
        PlaybackCompleted := True;
      end;

      PlaybackFinished := True;
    end
    else
    begin
      writeln('Playback thread started. Press Q to quit playback early.');

      while not PlaybackFinished do
      begin
        if KeyPressed then
        begin
          InputChar := ReadKey;

          if UpCase(InputChar) = 'Q' then
          begin
            QuitRequested := True;
            writeln('Q pressed. Requesting playback thread to stop...');
            break;
          end;
        end;

        if PlaybackFinished then
          break;

        Delay(10);
      end;

      if QuitRequested then
      begin
        writeln('Waiting for playback thread to stop...');
      end;

      WaitForThread(PlaybackThreadID);

      if (not PlaybackCompleted) and (not IsSoundPlaying()) then
      begin
        PlaybackCompleted := True;
      end;
    end;

    if QuitRequested and (not PlaybackCompleted) then
    begin
      writeln('Playback interrupted by user.');
    end
    else
    begin
      writeln('Sound finished playing.');
    end;

    // Free the loaded sound from memory when done.
    writeln('Freeing sound...');
    FreeSound(SoundID);
    writeln('Sound freed.');
  end; // end if/else checking SoundID

  // Shut down the Sound System.
  writeln('Quitting sound system.');
  QuitSoundSystem;
  writeln('Sound system quit.');

  writeln('Pscal WAV Player finished.');

end. // End of the program.
