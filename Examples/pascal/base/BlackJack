#!/usr/bin/env pascal
program BlackjackGame;

uses
  SysUtils; // For Randomize (compatible with Free Pascal/Turbo Pascal)

type
  THand = array of Integer; // Stores card ranks (2-14: 11=Jack, 12=Queen, 13=King, 14=Ace)

// Converts card rank (2-14) to user-friendly name
function GetCardName(rank: Integer): String;
begin
  case rank of
    2: Result := '2';     3: Result := '3';     4: Result := '4';
    5: Result := '5';     6: Result := '6';     7: Result := '7';
    8: Result := '8';     9: Result := '9';    10: Result := '10';
    11: Result := 'Jack'; 12: Result := 'Queen';13: Result := 'King';
    14: Result := 'Ace';
  else Result := 'ERROR'; // Should never occur
  end;
end;

// Calculates optimal hand value (handles Aces as 1 or 11)
function CalculateHandValue(hand: THand): Integer;
var
  sum, aces: Integer;
  i: Integer;
begin
  sum := 0;
  aces := 0;

  // Sum non-Ace cards and count Aces
  for i := 0 to High(hand) do
  begin
    case hand[i] of
      11, 12, 13: sum += 10; // Jack/Queen/King = 10
      14:         begin sum += 11; aces += 1; end; // Ace starts as 11
      else        sum += hand[i]; // Number cards (2-10) = face value
    end;
  end;

  // Convert Aces to 1 if sum exceeds 21
  while (sum > 21) and (aces > 0) do
  begin
    sum -= 10;
    aces -= 1;
  end;

  Result := sum;
end;

// Displays a hand (hides dealer's second card initially)
procedure DisplayHand(hand: THand; isDealer: Boolean; showAll: Boolean);
var
  i: Integer;
begin
  if isDealer then Write('Dealer: ') else Write('You:     ');

  for i := 0 to High(hand) do
  begin
    if isDealer and (i = 1) and not showAll then
      Write('[Hidden]') // Fixed: No trailing space
    else
      Write(GetCardName(hand[i]), ' ');
  end;

  if showAll then Write('(Value: ', CalculateHandValue(hand), ')');
  Writeln;
end;

// Deals a random card (2-14)
function DealCard: Integer;
begin
  Result := Random(13) + 2; // 0-12 → 2-14
end;

var
  humanHand, dealerHand: THand;
  input: String; // Fixed: Use String for input (avoids buffer leaks)
  playAgain: String;
  humanVal, dealerVal: Integer;
  hasBlackjack: Boolean;

begin
  Randomize; // Seed random number generator (critical for fairness)

  repeat
    // Reset hands for new game
    SetLength(humanHand, 0);
    SetLength(dealerHand, 0);

    // Initialize hands with explicit length (Fixed: Portable for all Pascals)
    SetLength(humanHand, 2);
    humanHand[0] := DealCard;
    humanHand[1] := DealCard;

    SetLength(dealerHand, 2);
    dealerHand[0] := DealCard;
    dealerHand[1] := DealCard;

    // Check for INSTANT BLACKJACK (21 on first two cards)
    humanVal := CalculateHandValue(humanHand);
    dealerVal := CalculateHandValue(dealerHand);
    hasBlackjack := (humanVal = 21) or (dealerVal = 21);

    if hasBlackjack then
    begin
      DisplayHand(humanHand, False, True);
      DisplayHand(dealerHand, True, True);

      if (humanVal = 21) and (dealerVal = 21) then
        Writeln('Push! Both have Blackjack.')
      else if humanVal = 21 then
        Writeln('YOU WIN with Blackjack!')
      else
        Writeln('Dealer wins with Blackjack.');

      goto EndGame; // Skip to play-again prompt
    end;

    // ===== NORMAL GAME FLOW =====
    Writeln(#13#10'===== Initial Deal ====='); // Fixed: CR+LF for all OS
    DisplayHand(humanHand, False, True); // Show your full hand
    DisplayHand(dealerHand, True, False); // Show dealer's up card only

    // ===== YOUR TURN: Hit or Stand =====
    while True do
    begin
      Write('Hit (h) or Stand (s)? ');
      ReadLn(input); // Read entire line (avoids buffer leaks)
      input := Trim(UpCase(input)); // Clean input: trim whitespace + uppercase

      if Length(input) = 0 then
      begin
        Writeln('Empty input! Please try again.');
        Continue;
      end;

      case UpCase(input[1]) of // Check first character (handles "hit"/"stand")
        'H': begin
          // Add a card to your hand
          SetLength(humanHand, Length(humanHand) + 1);
          humanHand[High(humanHand)] := DealCard;

          // Show new hand and check for bust
          Writeln(#13#10'You hit:');
          DisplayHand(humanHand, False, True);
          humanVal := CalculateHandValue(humanHand);

          if humanVal > 21 then
          begin
            Writeln('YOU BUST! Dealer wins.');
            goto EndGame;
          end;
        end;
        'S': Break; // Stand: end your turn, move to dealer
      else
        Writeln('Invalid input! Enter "h" (hit) or "s" (stand).');
      end;
    end;

    // ===== DEALER'S TURN: Play by rules (hit until ≥17) =====
    Writeln(#13#10'===== Dealer is Playing =====');
    while CalculateHandValue(dealerHand) < 17 do
    begin
      // Deal another card to dealer
      SetLength(dealerHand, Length(dealerHand) + 1);
      dealerHand[High(dealerHand)] := DealCard;
      DisplayHand(dealerHand, True, True); // Show hand after each hit
    end;

    dealerVal := CalculateHandValue(dealerHand);
    if dealerVal > 21 then
    begin
      Writeln('Dealer busts! YOU WIN.');
      goto EndGame;
    end;

    // ===== COMPARE HANDS =====
    Writeln(#13#10'===== Final Results =====');
    DisplayHand(humanHand, False, True);
    DisplayHand(dealerHand, True, True);

    if humanVal > dealerVal then
      Writeln('YOU WIN!')
    else if humanVal < dealerVal then
      Writeln('Dealer wins.')
    else
      Writeln('Push! It''s a tie.');

EndGame:
    // Ask to play again (fixed: no buffer leaks now)
    Write(#13#10'Play again? (y/n): ');
    ReadLn(playAgain);
    playAgain := LowerCase(playAgain);
  until playAgain <> 'y';

  Writeln(#13#10'Thanks for playing Blackjack!');
end.
