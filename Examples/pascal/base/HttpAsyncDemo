#!/usr/bin/env pascal
program HttpAsyncDemo;

uses SysUtils;

var s, id, code: integer;
    ms: mstream;
    workDir, srcPath, dstPath, url, line: string;
    f: text;

function ResolveWorkDir: string;
begin
  Result := GetEnv('TMPDIR');
  if Result = '' then Result := GetEnv('TEMP');
  if Result = '' then Result := GetEnv('TMP');
  if Result = '' then Result := GetEnv('PWD');
  if Result = '' then Result := GetCurrentDir;
end;

function NormalizeForUrl(const path: string): string;
begin
  Result := StringReplace(path, '\', '/', [rfReplaceAll]);
end;
begin
  workDir := IncludeTrailingPathDelimiter(ResolveWorkDir);
  srcPath := workDir + 'http_async_src.txt';
  dstPath := workDir + 'http_async_dst.txt';

  { Create local file to fetch via file:// }
  assign(f, srcPath);
  rewrite(f);
  writeln(f, 'HelloAsync');
  close(f);

  url := 'file://' + NormalizeForUrl(srcPath);

  s := HttpSession();
  id := HttpRequestAsyncToFile(s, 'GET', url, nil, dstPath);
  while HttpIsDone(id) = 0 do Delay(10);

  ms := mstreamcreate();
  code := HttpAwait(id, ms);
  writeln('Status: ', code);

  assign(f, dstPath);
  reset(f); readln(f, line); close(f);
  writeln('File: ', line);

  mstreamfree(ms);
  HttpClose(s);
  DeleteFile(dstPath);
  DeleteFile(srcPath);
end.

