program LinkedListDemo;

type
  PNode = ^Node; { Forward declaration for pointer type }
  Node = record
    data: Integer;
    next: PNode; { Pointer to the next node }
  end;

var
  head, tail, tempPtr, traversePtr : PNode;
  i : Integer;
  val : Integer;

{---------------------------------------------------------------------
  Assertion Procedures (Simplified)
---------------------------------------------------------------------}

procedure AssertTrue(condition: boolean; testName: string);
begin
  write('START: ', testName, ': ');
  if condition then
    writeln('PASS')
  else
    writeln('FAIL (condition was false)');
end;

procedure AssertEqualInt(expected, actual: integer; testName: string);
begin
  write('START: ', testName, ': ');
  if expected = actual then
    writeln('PASS')
  else
    writeln('FAIL (expected: ', expected, ', got: ', actual, ')');
end;

{---------------------------------------------------------------------
  Linked List Procedures
---------------------------------------------------------------------}

procedure AppendNode(var listHead, listTail: PNode; value: Integer);
var
  newNode: PNode;
begin
  write('Appending node with value: ', value, ' ... ');
  new(newNode);       { Allocate memory for the new node }
  newNode^.data := value; { Assign data }
  newNode^.next := nil;   { New node is the last, so its next is nil }

  if listHead = nil then  { Check if the list is currently empty }
  begin
    listHead := newNode;  { New node is the first and only node }
    listTail := newNode;  { New node is also the last node }
    writeln('OK (List was empty)');
  end
  else
  begin
    listTail^.next := newNode; { Link the previous last node to the new node }
    listTail := newNode;       { Update the tail pointer to the new node }
    writeln('OK');
  end;
end;

procedure PrintList(listHead: PNode);
var
  current: PNode;
begin
  write('List contents: ');
  current := listHead;
  if current = nil then
  begin
    write('(empty)');
  end
  else
  begin
    while current <> nil do
    begin
      write(current^.data);
      current := current^.next; { Move to the next node }
      if current <> nil then
        write(' -> ');
    end;
  end;
  writeln;
end;

procedure DisposeList(var listHead, listTail: PNode);
var
  current, nextNode: PNode;
begin
  writeln('Disposing list...');
  current := listHead;
  while current <> nil do
  begin
    nextNode := current^.next; { Store pointer to the next node }
    write('  Disposing node with value: ', current^.data, ' ... ');
    dispose(current);        { Dispose the current node }
    writeln('OK');
    current := nextNode;       { Move to the next node }
  end;
  listHead := nil;             { Reset head pointer }
  listTail := nil;             { Reset tail pointer }
  writeln('List disposed.');
end;

{---------------------------------------------------------------------
  Main Program
---------------------------------------------------------------------}
begin
  writeln('===== Linked List Pointer/Memory Test =====');
  writeln;

  // 1. Initialize
  writeln('1. Initializing...');
  head := nil;
  tail := nil;
  AssertTrue(head = nil, 'Initial head is nil');
  AssertTrue(tail = nil, 'Initial tail is nil');
  PrintList(head);

  // 2. Append Nodes
  writeln;
  writeln('2. Appending Nodes...');
  AppendNode(head, tail, 10);
  AssertTrue(head <> nil, 'Head not nil after append');
  AssertTrue(tail <> nil, 'Tail not nil after append');
  AssertTrue(head = tail, 'Head = Tail for single node');
  AssertEqualInt(10, head^.data, 'Head data check');
  AssertTrue(head^.next = nil, 'Head next is nil');
  PrintList(head);

  AppendNode(head, tail, 20);
  AssertTrue(head <> tail, 'Head <> Tail for two nodes');
  AssertEqualInt(10, head^.data, 'Head data check (still 10)');
  AssertEqualInt(20, tail^.data, 'Tail data check');
  AssertTrue(head^.next = tail, 'Head next points to Tail');
  AssertTrue(tail^.next = nil, 'Tail next is nil');
  PrintList(head);

  AppendNode(head, tail, 30);
  AssertEqualInt(10, head^.data, 'Head data check (still 10)');
  AssertEqualInt(30, tail^.data, 'Tail data check (new)');
  AssertEqualInt(20, head^.next^.data, 'Middle node data check');
  AssertTrue(head^.next^.next = tail, 'Middle node next points to Tail');
  AssertTrue(tail^.next = nil, 'Tail next is nil (new)');
  PrintList(head);

  // 3. Traverse and Verify
  writeln;
  writeln('3. Traversing and Verifying...');
  traversePtr := head;
  val := 10;
  i := 1;
  while traversePtr <> nil do
  begin
    AssertEqualInt(val, traversePtr^.data, 'Traversal check node ' + IntToStr(i));
    traversePtr := traversePtr^.next;
    val := val + 10;
    i := i + 1;
  end;
  AssertEqualInt(40, val, 'Traversal final value check'); // Should be 40 after checking 30

  // 4. Dispose List
  writeln;
  DisposeList(head, tail);
  AssertTrue(head = nil, 'Head is nil after DisposeList');
  AssertTrue(tail = nil, 'Tail is nil after DisposeList');
  PrintList(head); // Should print (empty)

  // 5. Test dispose on already nil list
  writeln;
  writeln('5. Disposing empty list...');
  DisposeList(head, tail); // Should do nothing gracefully
  AssertTrue(head = nil, 'Head still nil after disposing empty list');

  writeln;
  writeln('===== Pointer Test Completed =====');
end.
