program SierpinskiTriangle;

uses CRT; // Assuming your CRT unit provides GotoXY, ClrScr, Write, ReadKey

const
  MaxLevel = 13;  // Adjust for more/less detail (higher levels take longer)
  CharToDraw = '+';

procedure DrawPoint(x, y: integer);
begin
  GotoXY(x, y);
  Write(CharToDraw);
end;

// Recursive procedure to draw the triangle
procedure DrawSierpinski(x1, y1, x2, y2, x3, y3: integer; level: integer);
var
  mx1, my1, mx2, my2, mx3, my3: integer; // Midpoints
begin
  if level = 0 then
  begin
    // Base case: Draw the vertices of the current triangle
    // (Alternatively, could draw lines, but points are simpler for basic CRT)
    DrawPoint(x1, y1);
    DrawPoint(x2, y2);
    DrawPoint(x3, y3);
  end
  else
  begin
    // Calculate midpoints of the sides
    mx1 := (x1 + x2) div 2;
    my1 := (y1 + y2) div 2;
    mx2 := (x2 + x3) div 2;
    my2 := (y2 + y3) div 2;
    mx3 := (x3 + x1) div 2;
    my3 := (y3 + y1) div 2;

    // Recursively draw the three smaller triangles
    DrawSierpinski(x1, y1, mx1, my1, mx3, my3, level - 1); // Top/Left triangle
    DrawSierpinski(mx1, my1, x2, y2, mx2, my2, level - 1); // Right triangle
    DrawSierpinski(mx3, my3, mx2, my2, x3, y3, level - 1); // Bottom triangle
  end;
end;

// --- Main Program ---
var
  maxX, maxY: integer;
  ch: char; // For pausing at the end

begin
  ClrScr;
  HideCursor; // Optional, if available

  // Use screen dimensions (assuming typical 80x24 or similar)
  // These could be read using WhereX/WhereY if available, or set manually
  maxY := ScreenRows;
  maxX := ScreenCols; 

  writeln('Drawing Sierpinski Triangle (Level ', MaxLevel, ')...');
  Delay(1000); // Pause briefly before drawing

  // Define the initial large triangle corners
  // Centered horizontally, near the top/bottom vertically
  DrawSierpinski(maxX div 2, 2,          // Top vertex
                 2, maxY - 1,          // Bottom-left vertex
                 maxX - 1, maxY - 1,   // Bottom-right vertex
                 MaxLevel);

  // Pause to view the result
  GotoXY(1, maxY); // Move cursor to bottom line
  ShowCursor; // Optional, if available
  Write('Done. Press any key to exit.');
  ch := ReadKey; // Wait for user input

  ClrScr; // Clean up screen on exit
end.
