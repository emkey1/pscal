#!/usr/bin/env rea
// Rotating cube demo for the Rea front end. Exercises the 3D SDL/OpenGL
// builtins (`InitGraph3D`, `GL*` helpers, `GraphLoop`) that were recently added
// to the runtime. Requires building with SDL enabled (`-DSDL=ON`).

void DrawCube() {
  GLBegin("quads");

  GLColor3f(1.0, 0.0, 0.0);
  GLVertex3f(-0.5, -0.5,  0.5);
  GLVertex3f( 0.5, -0.5,  0.5);
  GLVertex3f( 0.5,  0.5,  0.5);
  GLVertex3f(-0.5,  0.5,  0.5);

  GLColor3f(0.0, 1.0, 0.0);
  GLVertex3f(-0.5, -0.5, -0.5);
  GLVertex3f(-0.5,  0.5, -0.5);
  GLVertex3f( 0.5,  0.5, -0.5);
  GLVertex3f( 0.5, -0.5, -0.5);

  GLColor3f(0.0, 0.0, 1.0);
  GLVertex3f(-0.5, -0.5, -0.5);
  GLVertex3f(-0.5, -0.5,  0.5);
  GLVertex3f(-0.5,  0.5,  0.5);
  GLVertex3f(-0.5,  0.5, -0.5);

  GLColor3f(1.0, 1.0, 0.0);
  GLVertex3f(0.5, -0.5, -0.5);
  GLVertex3f(0.5,  0.5, -0.5);
  GLVertex3f(0.5,  0.5,  0.5);
  GLVertex3f(0.5, -0.5,  0.5);

  GLColor3f(0.0, 1.0, 1.0);
  GLVertex3f(-0.5,  0.5, -0.5);
  GLVertex3f(-0.5,  0.5,  0.5);
  GLVertex3f( 0.5,  0.5,  0.5);
  GLVertex3f( 0.5,  0.5, -0.5);

  GLColor3f(1.0, 0.0, 1.0);
  GLVertex3f(-0.5, -0.5, -0.5);
  GLVertex3f( 0.5, -0.5, -0.5);
  GLVertex3f( 0.5, -0.5,  0.5);
  GLVertex3f(-0.5, -0.5,  0.5);

  GLEnd();
}

int main() {
  const int Width = 800;
  const int Height = 600;
  bool vsyncOn = true;
  float angle;

  InitGraph3D(Width, Height, "Rea SDL GL Cube", 24, 8);
  GLViewport(0, 0, Width, Height);
  GLClearDepth(1.0);
  GLDepthTest(true);
  GLSetSwapInterval(1);

  for (int frame = 0; frame < 600; frame = frame + 1) {
    angle = frame * 0.6;

    if (frame > 0 && frame % 180 == 0) {
      vsyncOn = !vsyncOn;
      if (vsyncOn) {
        GLSetSwapInterval(1);
      } else {
        GLSetSwapInterval(0);
      }
    }

    GLClearColor(0.1, 0.1, 0.15, 1.0);
    GLClear();

    GLMatrixMode("projection");
    GLLoadIdentity();
    GLScalef(1.3, 1.3, 1.3);

    GLMatrixMode("modelview");
    GLLoadIdentity();
    GLTranslatef(0.0, 0.0, -0.2);
    GLRotatef(angle, 1.0, 1.0, 0.0);

    GLPushMatrix();
    GLRotatef(angle * 0.25, 0.0, 0.0, 1.0);
    DrawCube();
    GLPopMatrix();

    GLSwapWindow();
    GraphLoop(1);
  }

  CloseGraph3D();
  return 0;
}

