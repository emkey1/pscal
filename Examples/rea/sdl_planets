#!/usr/bin/env rea
// SDL Solar System Simulation in Rea using OOP and threads.
// Each planet runs in its own thread and the frame rate is throttled.

const int NumPlanets = 8;
const int NumAsteroids = 200;

bool quit = false;
int posMutex = mutex();
float earthMonths = 0.0;

class Planet {
  int orbit;
  int size;

  float speed; // radians per update

  int r;
  int g;
  int b;
  float angle;
  float posX;
  float posY;
  int centerX;
  int centerY;
  int tid;
  int isEarth;

    Planet init(int o, int s, float spdDeg, int red, int green, int blue, int cx, int cy) {
      myself.orbit = o;
      myself.size = s;
      // Store angular speed in radians for precise updates even below 1 degree
      myself.speed = spdDeg * 0.017453292519943295; // degrees -> radians
      myself.r = red;
      myself.g = green;
      myself.b = blue;
      myself.centerX = cx;
      myself.centerY = cy;
      myself.isEarth = 0;
      // Initialize angle in radians as well
      myself.angle = random(360) * 0.017453292519943295;
      myself.posX = cx + cos(myself.angle) * o;
      myself.posY = cy + sin(myself.angle) * o;
      return myself;
    }

    void updateWorker() {
      while (!quit) {
        myself.angle = myself.angle + myself.speed;
        if (myself.angle >= 6.283185307179586) myself.angle = myself.angle - 6.283185307179586; // 2*pi
        float px = myself.centerX + cos(myself.angle) * myself.orbit;
        float py = myself.centerY + sin(myself.angle) * myself.orbit;
        lock(posMutex);
        myself.posX = px;
        myself.posY = py;
        if (myself.isEarth) {
          earthMonths = earthMonths + (myself.speed / 6.283185307179586) * 12;
        }
        unlock(posMutex);
        delay(16);
      }
    }

    void start() {
      myself.tid = spawn myself.updateWorker();
    }

    // Wait for the worker thread to finish. "join" is a reserved keyword in
    // Rea, so give the method a more explicit name to avoid confusion with the
    // built-in thread operation.
    void joinThread() {
      join myself.tid;
    }

  }

void Planet p.draw() {
  setrgbcolor(p.r, p.g, p.b);
  fillcircle(trunc(p.posX), trunc(p.posY), p.size);
}

class SolarSystemApp {
  const int WindowWidth = 1280;
  const int WindowHeight = 1024;
  const int TargetFPS = 60;
  const float AUScale = 15.7; // pixels per astronomical unit
  const int AUOffset = 20;    // base offset so Mercury clears the sun
  const int OrbitSpacing = 2; // extra padding between successive orbits

    int FrameDelay;
    int centerX;
    int centerY;
    Planet planets[NumPlanets + 1];
    float asteroidAngle[NumAsteroids + 1];
    float asteroidSpeed[NumAsteroids + 1];
    int asteroidRadius[NumAsteroids + 1];

  void SolarSystemApp() {
    // no special initialization needed beyond defaults
  }

  void initPlanets() {
    int orbit;
    int extra = 0;
    // Mercury - 0.39 AU
    orbit = trunc(AUOffset + AUScale * 0.39 + extra);
    myself.planets[1] = new Planet(); myself.planets[1].init(orbit, 1, 4.7, 169, 169, 169, myself.centerX, myself.centerY);
    extra = extra + OrbitSpacing;
    // Venus - 0.72 AU
    orbit = trunc(AUOffset + AUScale * 0.72 + extra);
    myself.planets[2] = new Planet(); myself.planets[2].init(orbit, 2, 3.5, 218, 165,  32, myself.centerX, myself.centerY);
    extra = extra + OrbitSpacing;
    // Earth - 1.00 AU
    orbit = trunc(AUOffset + AUScale * 1.00 + extra);
    myself.planets[3] = new Planet(); myself.planets[3].init(orbit, 3, 3.0,   0, 102, 255, myself.centerX, myself.centerY);
    myself.planets[3].isEarth = 1;
    extra = extra + OrbitSpacing;
    // Mars - 1.52 AU
    orbit = trunc(AUOffset + AUScale * 1.52 + extra);
    myself.planets[4] = new Planet(); myself.planets[4].init(orbit, 2, 2.4, 188,  39,  50, myself.centerX, myself.centerY);
    extra = extra + OrbitSpacing;
    // Jupiter - 5.20 AU
    orbit = trunc(AUOffset + AUScale * 5.20 + extra);
    myself.planets[5] = new Planet(); myself.planets[5].init(orbit,18, 1.3, 205, 133,  63, myself.centerX, myself.centerY);
    extra = extra + OrbitSpacing;
    // Saturn - 9.58 AU
    orbit = trunc(AUOffset + AUScale * 9.58 + extra);
    myself.planets[6] = new Planet(); myself.planets[6].init(orbit,16, 0.9, 210, 180, 140, myself.centerX, myself.centerY);
    extra = extra + OrbitSpacing;
    // Uranus - 19.20 AU
    orbit = trunc(AUOffset + AUScale * 19.20 + extra);
    myself.planets[7] = new Planet(); myself.planets[7].init(orbit,12, 0.7, 173, 216, 230, myself.centerX, myself.centerY);
    extra = extra + OrbitSpacing;
    // Neptune - 30.05 AU
    orbit = trunc(AUOffset + AUScale * 30.05 + extra);
    myself.planets[8] = new Planet(); myself.planets[8].init(orbit,12, 0.5,  65, 105, 225, myself.centerX, myself.centerY);
  }

  void initAsteroids() {
    int i = 1;
    while (i <= NumAsteroids) {
      // Asteroid belt spans approximately 2.2 to 3.2 astronomical units
      // from the Sun, so pick a radius within that AU range scaled to
      // screen coordinates.
      int inner = trunc(AUOffset + AUScale * 2.2);
      int outer = trunc(AUOffset + AUScale * 3.2);
      myself.asteroidRadius[i] = inner + random(outer - inner);
      myself.asteroidAngle[i] = random(360) * 0.017453292519943295;
      myself.asteroidSpeed[i] = (0.1 + random(5) * 0.05) * 0.017453292519943295;
      i = i + 1;
    }
  }

  void startThreads() {
    int i = 1;
    while (i <= NumPlanets) {
      myself.planets[i].start();
      i = i + 1;
    }
  }

  void draw() {
    lock(posMutex);
    cleardevice();
    setrgbcolor(255, 255, 0); // Sun
    fillcircle(myself.centerX, myself.centerY, 12);
    setrgbcolor(169, 169, 169);
    int a = 1;
    while (a <= NumAsteroids) {
      myself.asteroidAngle[a] = myself.asteroidAngle[a] + myself.asteroidSpeed[a];
      if (myself.asteroidAngle[a] >= 6.283185307179586) {
        myself.asteroidAngle[a] = myself.asteroidAngle[a] - 6.283185307179586;
      }
      int ax = trunc(myself.centerX + cos(myself.asteroidAngle[a]) * myself.asteroidRadius[a]);
      int ay = trunc(myself.centerY + sin(myself.asteroidAngle[a]) * myself.asteroidRadius[a]);
      fillcircle(ax, ay, 1);
      a = a + 1;
    }
    int i = 1;
    while (i <= NumPlanets) {
      myself.planets[i].draw();
      i = i + 1;
    }
    str monthStr = "Earth months elapsed: " + inttostr(trunc(earthMonths));
    outtextxy(getmaxx() - 220, 16, monthStr);
    unlock(posMutex);
    updatescreen();
  }

  void joinThreads() {
    int i = 1;
    while (i <= NumPlanets) {
      myself.planets[i].joinThread();
      i = i + 1;
    }
  }

  void run() {
    initgraph(WindowWidth, WindowHeight, "Rea SDL Solar System");
    myself.centerX = getmaxx() / 2;
    myself.centerY = getmaxy() / 2;
    inittextsystem("../../fonts/Roboto/static/Roboto-Regular.ttf", 16);
    randomize();
    myself.FrameDelay = trunc(1000 / TargetFPS);
    myself.initPlanets();
    myself.initAsteroids();
    // Start planet worker threads using the current object instance
    myself.startThreads();
    writeln("Solar system simulation running. Press Q to quit.");
    while (!quit) {
      if (keypressed()) {
        char c = readkey();
        if (toupper(c) == 'Q') quit = true;
      }
      // Draw all planets based on their updated positions
      myself.draw();
      // Use the object's frame delay to pace the main loop and yield time to
      // planet worker threads, ensuring smooth motion.
      graphloop(myself.FrameDelay);
    }
    // Wait for all planet worker threads to finish before shutting down
    myself.joinThreads();
    closegraph();
    writeln("Simulation finished.");
  }
}

SolarSystemApp app = new SolarSystemApp();
app.run();
