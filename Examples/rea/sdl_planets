#!/usr/bin/env rea
// SDL Solar System Simulation in Rea using OOP and threads.
// Each planet runs in its own thread and the frame rate is throttled.

const int NumPlanets = 9;

bool quit = false;
int posMutex = mutex();

class Planet {
  int orbit;
  int size;
  float speed;
  int r;
  int g;
  int b;
  float angle;
  float posX;
  float posY;
  int centerX;
  int centerY;
  int tid;

  Planet init(int o, int s, float spd, int red, int green, int blue, int cx, int cy) {
    my.orbit = o;
    my.size = s;
    my.speed = spd;
    my.r = red;
    my.g = green;
    my.b = blue;
    my.centerX = cx;
    my.centerY = cy;
    my.angle = random(360);
    my.posX = cx + cos(my.angle) * o;
    my.posY = cy + sin(my.angle) * o;
    return my;
  }

  void updateWorker() {
    while (!quit) {
      my.angle = my.angle + my.speed;
      if (my.angle >= 360.0) my.angle = my.angle - 360.0;
      float px = my.centerX + cos(my.angle) * my.orbit;
      float py = my.centerY + sin(my.angle) * my.orbit;
      lock(posMutex);
      my.posX = px;
      my.posY = py;
      unlock(posMutex);
      delay(16);
    }
  }

  void start() {
    my.tid = spawn Planet_updateWorker(my);
  }

  void join() {
    join my.tid;
  }

  void draw() {
    setrgbcolor(my.r, my.g, my.b);
    fillcircle(trunc(my.posX), trunc(my.posY), my.size);
  }
}

class SolarSystemApp {
  const int WindowWidth = 800;
  const int WindowHeight = 600;
  const int TargetFPS = 60;

  int FrameDelay;
  int centerX;
  int centerY;
  Planet planets[NumPlanets + 1];

  void SolarSystemApp() {
    // no special initialization needed beyond defaults
  }

  void initPlanets() {
    my.planets[1] = (new Planet()).init( 40, 3, 4.7, 200, 200, 200, my.centerX, my.centerY); // Mercury
    my.planets[2] = (new Planet()).init( 60, 5, 3.5, 255, 165,   0, my.centerX, my.centerY); // Venus
    my.planets[3] = (new Planet()).init( 80, 5, 3.0,   0,   0, 255, my.centerX, my.centerY); // Earth
    my.planets[4] = (new Planet()).init(100, 4, 2.4, 255,   0,   0, my.centerX, my.centerY); // Mars
    my.planets[5] = (new Planet()).init(130, 9, 1.3, 210, 105,  30, my.centerX, my.centerY); // Jupiter
    my.planets[6] = (new Planet()).init(160, 8, 1.0, 210, 180, 140, my.centerX, my.centerY); // Saturn
    my.planets[7] = (new Planet()).init(190, 7, 0.7, 135, 206, 235, my.centerX, my.centerY); // Uranus
    my.planets[8] = (new Planet()).init(220, 7, 0.5,  65, 105, 225, my.centerX, my.centerY); // Neptune
    my.planets[9] = (new Planet()).init(250, 3, 0.4, 169, 169, 169, my.centerX, my.centerY); // Pluto
  }

  void startThreads() {
    int i = 1;
    while (i <= NumPlanets) {
      my.planets[i].start();
      i = i + 1;
    }
  }

  void draw() {
    lock(posMutex);
    cleardevice();
    setrgbcolor(255, 255, 0); // Sun
    fillcircle(my.centerX, my.centerY, 12);
    int i = 1;
    while (i <= NumPlanets) {
      my.planets[i].draw();
      i = i + 1;
    }
    unlock(posMutex);
    updatescreen();
  }

  void joinThreads() {
    int i = 1;
    while (i <= NumPlanets) {
      my.planets[i].join();
      i = i + 1;
    }
  }

  void run() {
    initgraph(WindowWidth, WindowHeight, "Rea SDL Solar System");
    my.centerX = getmaxx() / 2;
    my.centerY = getmaxy() / 2;
    randomize();
    my.FrameDelay = trunc(1000 / TargetFPS);
    my.initPlanets();
    my.startThreads();
    writeln("Solar system simulation running. Press Q to quit.");
    while (!quit) {
      if (keypressed()) {
        char c = readkey();
        if (toupper(c) == 'Q') quit = true;
      }
      my.draw();
      graphloop(my.FrameDelay);
    }
    my.joinThreads();
    closegraph();
    writeln("Simulation finished.");
  }
}

SolarSystemApp app = new SolarSystemApp();
SolarSystemApp_run(app);

