#!/usr/bin/env rea
// Interactive Mandelbrot demo for the Rea front end (extended builtin version).
// Left click to zoom in, right click to zoom out, Q to quit.
// Uses the extended builtin MandelbrotRow. Requires SDL support.

class MandelbrotApp {
  const int Width = 1024;
  const int Height = 768;
  const int MaxIterations = 100;
  const int BytesPerPixel = 4;
  const int ScreenUpdateInterval = 1;
  const int UpdateQuantum = 4;
  const double ZoomFactor = 2.0;
  const int ButtonLeft = 1;
  const int ButtonRight = 4;
  const int ThreadCount = 8;
  const int KEY_LEFT = 1073741904;
  const int KEY_RIGHT = 1073741903;
  const int KEY_UP = 1073741906;
  const int KEY_DOWN = 1073741905;

  byte pixels[Width * Height * BytesPerPixel];
  double minRe;
  double maxRe;
  double minIm;
  double maxIm;
  double reFactor;
  double imFactor;
  int textureID;
  bool quit;
  bool cancel;
  bool computing;
  int prevButtons;
  bool rowDone[Height];
  int threadStart[ThreadCount];
  int threadEnd[ThreadCount];
  int rowMutex;
  int quitMutex;
  int tids[ThreadCount];
  int lastUpdatedRows;
  int lastUpdateMs;
  const int UpdateIntervalMs = 33;

  int nowMs() {
    int hh, mm, ss, hs;
    gettime(hh, mm, ss, hs);
    int ms = (((hh * 60) + mm) * 60 + ss) * 1000 + (hs * 10);
    return ms;
  }

  void init() {
    myself.minRe = -2.0;
    myself.maxRe = 1.0;
    myself.minIm = -1.2;
    myself.maxIm = myself.minIm + (myself.maxRe - myself.minRe) * myself.Height / myself.Width;
    initgraph(myself.Width, myself.Height, "Rea Mandelbrot (ext)");
    myself.textureID = createtexture(myself.Width, myself.Height);
    if (myself.textureID < 0) { printf("Error: unable to create texture.\n"); halt(); }
    myself.quit = false;
    myself.cancel = false;
    myself.computing = false;
    myself.prevButtons = 0;
    myself.rowMutex = mutex();
    myself.quitMutex = mutex();
    int i;
    for (i = 0; i < myself.ThreadCount; i = i + 1) { myself.tids[i] = -1; }
    myself.lastUpdatedRows = 0;
    myself.lastUpdateMs = 0;
  }

  int getQuit() { bool q; lock(myself.quitMutex); q = myself.quit; unlock(myself.quitMutex); return q; }
  void setQuit(bool v) { lock(myself.quitMutex); myself.quit = v; unlock(myself.quitMutex); }
  bool getCancel() { bool c; lock(myself.rowMutex); c = myself.cancel; unlock(myself.rowMutex); return c; }
  void setCancel(bool v) { lock(myself.rowMutex); myself.cancel = v; unlock(myself.rowMutex); }

  void computeRows(int startY, int endY) {
    int row[Width];
    int x, y, n, R, G, B, idx;
    double c_im;
    for (y = startY; y <= endY && !myself.getQuit() && !myself.getCancel(); y = y + 1) {
      c_im = myself.maxIm - y * myself.imFactor;
      // Extended builtin call
      MandelbrotRow(myself.minRe, myself.reFactor, c_im, myself.MaxIterations, myself.Width - 1, row);
      idx = y * myself.Width * myself.BytesPerPixel;
      lock(myself.rowMutex);
      for (x = 0; x < myself.Width; x = x + 1) {
        n = row[x];
        if (n == myself.MaxIterations) { R = G = B = 0; }
        else { R = (n * 5) % 256; G = (n * 7 + 85) % 256; B = (n * 11 + 170) % 256; }
        myself.pixels[idx + 0] = char(R);
        myself.pixels[idx + 1] = char(G);
        myself.pixels[idx + 2] = char(B);
        myself.pixels[idx + 3] = char(255);
        idx = idx + myself.BytesPerPixel;
      }
      myself.rowDone[y] = true;
      unlock(myself.rowMutex);
    }
  }

  void computeRowsWorker(int idx) {
    if (idx < 0 || idx >= myself.ThreadCount) return;
    myself.computeRows(myself.threadStart[idx], myself.threadEnd[idx]);
  }

  void startCompute() {
    int i;
    for (i = 0; i < myself.Width * myself.Height * myself.BytesPerPixel; i = i + 1) { myself.pixels[i] = char(0); }
    myself.maxIm = myself.minIm + (myself.maxRe - myself.minRe) * myself.Height / myself.Width;
    myself.reFactor = (myself.maxRe - myself.minRe) / (myself.Width - 1);
    myself.imFactor = (myself.maxIm - myself.minIm) / (myself.Height - 1);
    for (i = 0; i < myself.Height; i = i + 1) { myself.rowDone[i] = false; }
    int rowsPerThread = myself.Height / myself.ThreadCount;
    int extra = myself.Height % myself.ThreadCount;
    int startY = 0;
    for (i = 0; i < myself.ThreadCount; i = i + 1) {
      int endY = startY + rowsPerThread - 1;
      if (extra > 0) { endY = endY + 1; extra = extra - 1; }
      myself.threadStart[i] = startY;
      myself.threadEnd[i] = endY;
      startY = endY + 1;
    }
    for (i = 0; i < myself.ThreadCount; i = i + 1) {
      myself.tids[i] = spawn myself.computeRowsWorker(i);
    }
    myself.computing = true;
    myself.lastUpdatedRows = 0;
  }

  void pollCompute() {
    if (!myself.computing) return;
    int y;
    int doneCount = 0;
    for (y = 0; y < myself.Height; y = y + 1) {
      bool done;
      lock(myself.rowMutex);
      done = myself.rowDone[y];
      unlock(myself.rowMutex);
      if (done) doneCount = doneCount + 1;
    }
    int adaptiveQuantum = (myself.Height / (myself.ThreadCount * 8));
    if (adaptiveQuantum < myself.UpdateQuantum) adaptiveQuantum = myself.UpdateQuantum;
    int now = myself.nowMs();
    int delta = now - myself.lastUpdateMs;
    if (delta < 0) delta = delta + 86400000;

    bool initialFrame = (doneCount > 0 && myself.lastUpdatedRows == 0);
    bool enoughProgress = (doneCount - myself.lastUpdatedRows >= adaptiveQuantum);
    bool timeElapsed = (delta >= myself.UpdateIntervalMs);
    if (initialFrame || (timeElapsed && (doneCount > myself.lastUpdatedRows)) || (doneCount == myself.Height)) {
      updatetexture(myself.textureID, myself.pixels);
      cleardevice(); rendercopy(myself.textureID); updatescreen();
      myself.lastUpdatedRows = doneCount;
      myself.lastUpdateMs = now;
    }
    bool allDone = (doneCount == myself.Height);
    if (allDone || myself.getCancel()) {
      if (doneCount > myself.lastUpdatedRows) {
        updatetexture(myself.textureID, myself.pixels);
        cleardevice(); rendercopy(myself.textureID); updatescreen();
        myself.lastUpdatedRows = doneCount;
        myself.lastUpdateMs = myself.nowMs();
      }
      int i;
      for (i = 0; i < myself.ThreadCount; i = i + 1) { if (myself.tids[i] >= 0) { join myself.tids[i]; myself.tids[i] = -1; } }
      myself.computing = false;
      myself.lastUpdatedRows = 0;
    }
  }

  bool handleInput() {
    graphloop(0);
    bool changed = false;
    int key = pollkey();
    if (key != 0) {
      if (key == 'q' || key == 'Q') { myself.setQuit(true); return false; }
      double widthRe = (myself.maxRe - myself.minRe);
      double heightIm = (myself.maxIm - myself.minIm);
      double dx = widthRe * 0.5; double dy = heightIm * 0.5;
      if (key == myself.KEY_LEFT) { myself.minRe -= dx; myself.maxRe -= dx; changed = true; }
      else if (key == myself.KEY_RIGHT) { myself.minRe += dx; myself.maxRe += dx; changed = true; }
      else if (key == myself.KEY_UP) { myself.minIm += dy; myself.maxIm += dy; changed = true; }
      else if (key == myself.KEY_DOWN) { myself.minIm -= dy; myself.maxIm -= dy; changed = true; }
    }
    int x = 0, y = 0, b = 0; getmousestate(x, y, b);
    int winW = getmaxx() + 1; int winH = getmaxy() + 1;
    if (winW > 0 && winH > 0) {
      if (x >= winW) x = winW - 1; if (y >= winH) y = winH - 1;
      if (winW != myself.Width) { x = (x * myself.Width) / winW; if (x >= myself.Width) x = myself.Width - 1; }
      if (winH != myself.Height) { y = (y * myself.Height) / winH; if (y >= myself.Height) y = myself.Height - 1; }
    }
    if ((b & myself.ButtonLeft) != 0 && (myself.prevButtons & myself.ButtonLeft) == 0) { myself.zoom(x, y, 1.0 / myself.ZoomFactor); changed = true; }
    else if ((b & myself.ButtonRight) != 0 && (myself.prevButtons & myself.ButtonRight) == 0) { myself.zoom(x, y, myself.ZoomFactor); changed = true; }
    myself.prevButtons = b; return changed;
  }

  void zoom(int px, int py, double factor) {
    double reFactor = (myself.maxRe - myself.minRe) / (myself.Width - 1);
    double imFactor = (myself.maxIm - myself.minIm) / (myself.Height - 1);
    double centerRe = myself.minRe + (px + 0.5) * reFactor;
    double centerIm = myself.maxIm - (py + 0.5) * imFactor;
    double widthRe = (myself.maxRe - myself.minRe) * factor;
    double heightIm = (myself.maxIm - myself.minIm) * factor;
    myself.minRe = centerRe - widthRe / 2.0;
    myself.maxRe = centerRe + widthRe / 2.0;
    myself.minIm = centerIm - heightIm / 2.0;
    myself.maxIm = centerIm + heightIm / 2.0;
  }

  void run() {
    myself.init();
    bool needRender = true;
    while (!myself.getQuit()) {
      if (needRender && !myself.computing) { myself.startCompute(); needRender = false; }
      myself.pollCompute();
      delay(1);
      if (myself.handleInput()) {
        myself.setCancel(true);
        if (myself.computing) { int i; for (i = 0; i < myself.ThreadCount; i = i + 1) { if (myself.tids[i] >= 0) { join myself.tids[i]; myself.tids[i] = -1; } } myself.computing = false; }
        myself.setCancel(false);
        needRender = true;
        updatetexture(myself.textureID, myself.pixels); cleardevice(); rendercopy(myself.textureID); updatescreen();
      }
    }
    if (myself.computing) { int i; for (i = 0; i < myself.ThreadCount; i = i + 1) { if (myself.tids[i] >= 0) { join myself.tids[i]; myself.tids[i] = -1; } } }
    destroytexture(myself.textureID); closegraph();
  }
}

MandelbrotApp app = new MandelbrotApp();
app.run();
