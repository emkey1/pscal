#!/usr/bin/env rea
// Procedural landscape demo for the Rea front end. Generates a deterministic
// height field from a seed, renders it with the SDL/OpenGL helpers, and lets
// the user walk with W/S while steering the camera with the mouse.

const int WindowWidth = 640;
const int WindowHeight = 480;
const int TerrainSize = 128
const int VertexStride = TerrainSize + 1;
const int VertexCount = VertexStride * VertexStride;
const float TileScale = 1.2;
const int NoiseOctaves = 5;
const float HeightScale = 16.0;
const float EyeHeight = 6.5;
const float MoveSpeed = 18.0;
const float MaxPitch = 75.0;
const float MouseYawSensitivity = 0.30;
const float MousePitchSensitivity = 0.15;
const float DegreesToRadians = 0.017453292519943295;
const int ScanCodeW = 26; // SDL_SCANCODE_W
const int ScanCodeS = 22; // SDL_SCANCODE_S

bool hasDigit(str s) {
  int i = 1;
  while (i <= length(s)) {
    char ch = s[i];
    if (ch >= '0' && ch <= '9') return true;
    i = i + 1;
  }
  return false;
}

int parseIntegerFromString(str s, int fallback) {
  int len = length(s);
  int idx = 1;
  while (idx <= len) {
    char ch = s[idx];
    if ((ch >= '0' && ch <= '9') || ch == '+' || ch == '-') break;
    idx = idx + 1;
  }
  if (idx > len) return fallback;
  int sign = 1;
  if (s[idx] == '+') {
    idx = idx + 1;
  } else if (s[idx] == '-') {
    sign = -1;
    idx = idx + 1;
  }
  int value = 0;
  bool any = false;
  while (idx <= len) {
    char ch = s[idx];
    if (ch >= '0' && ch <= '9') {
      any = true;
      value = value * 10 + (ch - '0');
    } else {
      break;
    }
    idx = idx + 1;
  }
  if (!any) return fallback;
  return value * sign;
}

int extractSeedFromArgs(int fallback) {
  int count = paramcount();
  if (count == 0) return fallback;
  int i = 1;
  while (i <= count) {
    str arg = paramstr(i);
    if (hasDigit(arg)) {
      return parseIntegerFromString(arg, fallback);
    }
    i = i + 1;
  }
  return fallback;
}

class TerrainField {
  float heights[VertexCount];
  float minHeight;
  float maxHeight;
  float normalizationScale;
  int seed;

  void TerrainField() {
    my.seed = 0;
    my.minHeight = 0.0;
    my.maxHeight = 0.0;
    my.normalizationScale = 0.0;
    int total = VertexCount;
    int i = 0;
    while (i < total) {
      my.heights[i] = 0.0;
      i = i + 1;
    }
  }

  int index(int x, int z) { return z * (TerrainSize + 1) + x; }

  float baseNoise(int x, int z) {
    int n = x * 374761393 + z * 668265263 + my.seed * 362437;
    n = n % 2147483647;
    if (n < 0) n = n + 2147483647;
    float value = n / 2147483647.0;
    return value * 2.0 - 1.0;
  }

  float fade(float t) { return t * t * (3.0 - 2.0 * t); }

  float valueNoise(float x, float z) {
    int xi = floor(x);
    int zi = floor(z);
    float xf = x - xi;
    float zf = z - zi;
    float v00 = my.baseNoise(xi, zi);
    float v10 = my.baseNoise(xi + 1, zi);
    float v01 = my.baseNoise(xi, zi + 1);
    float v11 = my.baseNoise(xi + 1, zi + 1);
    float u = my.fade(xf);
    float v = my.fade(zf);
    float i1 = v00 + (v10 - v00) * u;
    float i2 = v01 + (v11 - v01) * u;
    return i1 + (i2 - i1) * v;
  }

  float fbm(float x, float z) {
    float amplitude = 1.0;
    float frequency = 1.0;
    float sum = 0.0;
    float total = 0.0;
    int octave = 0;
    while (octave < NoiseOctaves) {
      sum = sum + my.valueNoise(x * frequency, z * frequency) * amplitude;
      total = total + amplitude;
      amplitude = amplitude * 0.5;
      frequency = frequency * 2.0;
      octave = octave + 1;
    }
    if (total == 0.0) return 0.0;
    return sum / total;
  }

  void build(int s) {
    my.seed = s;
    my.minHeight = 1e9;
    my.maxHeight = -1e9;
    float baseFrequency = 0.035;
    int z = 0;
    while (z <= TerrainSize) {
      int x = 0;
      while (x <= TerrainSize) {
        float sampleX = (x + s * 0.13) * baseFrequency;
        float sampleZ = (z + s * 0.29) * baseFrequency;
        float h = my.fbm(sampleX, sampleZ) * HeightScale;
        int idx = my.index(x, z);
        my.heights[idx] = h;
        if (h < my.minHeight) my.minHeight = h;
        if (h > my.maxHeight) my.maxHeight = h;
        x = x + 1;
      }
      z = z + 1;
    }
    float span = my.maxHeight - my.minHeight;
    if (span <= 0.0001) {
      my.maxHeight = my.minHeight + 0.001;
      span = my.maxHeight - my.minHeight;
    }
    if (span <= 0.0001) {
      my.normalizationScale = 0.0;
    } else {
      my.normalizationScale = 1.0 / span;
    }
  }

  float rawHeight(int x, int z) {
    if (x < 0) x = 0;
    if (x > TerrainSize) x = TerrainSize;
    if (z < 0) z = 0;
    if (z > TerrainSize) z = TerrainSize;
    return my.heights[my.index(x, z)];
  }

  float heightByFlatIndex(int idx) {
    return my.heights[idx];
  }

  float normalized(float h) {
    if (my.normalizationScale <= 0.0) return 0.0;
    float t = (h - my.minHeight) * my.normalizationScale;
    if (t < 0.0) t = 0.0;
    if (t > 1.0) t = 1.0;
    return t;
  }

  float heightAt(float gx, float gz) {
    if (gx < 0.0) gx = 0.0;
    if (gx > TerrainSize) gx = TerrainSize;
    if (gz < 0.0) gz = 0.0;
    if (gz > TerrainSize) gz = TerrainSize;
    int x0 = floor(gx);
    int z0 = floor(gz);
    int x1 = x0 + 1;
    int z1 = z0 + 1;
    if (x1 > TerrainSize) x1 = TerrainSize;
    if (z1 > TerrainSize) z1 = TerrainSize;
    float h00 = my.rawHeight(x0, z0);
    float h10 = my.rawHeight(x1, z0);
    float h01 = my.rawHeight(x0, z1);
    float h11 = my.rawHeight(x1, z1);
    float tx = gx - x0;
    float tz = gz - z0;
    float hx0 = h00 + (h10 - h00) * tx;
    float hx1 = h01 + (h11 - h01) * tx;
    return hx0 + (hx1 - hx0) * tz;
  }
}

class LandscapeDemo {
  TerrainField field;
  int seed;
  float camX;
  float camZ;
  float camY;
  float yaw;
  float pitch;
  int lastTicks;
  bool running;
  int lastMouseX;
  int lastMouseY;
  bool hasMouseSample;
  float vertexHeights[VertexCount];
  float vertexColorR[VertexCount];
  float vertexColorG[VertexCount];
  float vertexColorB[VertexCount];
  float vertexNormalX[VertexCount];
  float vertexNormalY[VertexCount];
  float vertexNormalZ[VertexCount];
  float worldXCoords[VertexStride];
  float worldZCoords[VertexStride];
  float waterPhaseOffset[VertexCount];
  float waterSecondaryOffset[VertexCount];
  float waterSparkleOffset[VertexCount];
  float sunDirX;
  float sunDirY;
  float sunDirZ;
  float waterHeight;
  float waterNormalizedLevel;
  float elapsedSeconds;

  void LandscapeDemo(int initialSeed) {
    my.field = new TerrainField();
    my.seed = initialSeed;
    my.precomputeWorldCoordinates();
    my.precomputeWaterOffsets();
    my.elapsedSeconds = 0.0;
    my.waterNormalizedLevel = 0.36;
    float sunX = 0.45;
    float sunY = 0.82;
    float sunZ = 0.33;
    float invLen = 1.0 / sqrt(sunX * sunX + sunY * sunY + sunZ * sunZ);
    my.sunDirX = sunX * invLen;
    my.sunDirY = sunY * invLen;
    my.sunDirZ = sunZ * invLen;
    my.field.build(initialSeed);
    my.updateVertexData();
    my.camX = TerrainSize * 0.5;
    my.camZ = TerrainSize * 0.5;
    my.camY = my.field.heightAt(my.camX, my.camZ) + EyeHeight;
    my.yaw = 135.0;
    my.pitch = -20.0;
    my.lastTicks = getticks();
    my.running = true;
    my.lastMouseX = 0;
    my.lastMouseY = 0;
    my.hasMouseSample = false;
  }

  void precomputeWorldCoordinates() {
    float half = TerrainSize * 0.5;
    int i = 0;
    while (i < VertexStride) {
      float world = (i - half) * TileScale;
      my.worldXCoords[i] = world;
      my.worldZCoords[i] = world;
      i = i + 1;
    }
  }

  void precomputeWaterOffsets() {
    int z = 0;
    while (z <= TerrainSize) {
      int rowIndex = z * VertexStride;
      float zPhase = z * 0.12;
      float zSecondary = z * 0.21;
      float zSparkle = z * 0.22;
      int x = 0;
      while (x <= TerrainSize) {
        int idx = rowIndex + x;
        my.waterPhaseOffset[idx] = x * 0.18 + zPhase;
        my.waterSecondaryOffset[idx] = x * 0.05 + zSecondary;
        my.waterSparkleOffset[idx] = x * 0.22 + zSparkle;
        x = x + 1;
      }
      z = z + 1;
    }
  }

  float saturate(float value) {
    if (value < 0.0) return 0.0;
    if (value > 1.0) return 1.0;
    return value;
  }

  float lerp(float a, float b, float t) { return a + (b - a) * t; }

  void computeVertexNormals() {
    int z = 0;
    while (z <= TerrainSize) {
      int x = 0;
      while (x <= TerrainSize) {
        float left = my.field.rawHeight(x - 1, z);
        float right = my.field.rawHeight(x + 1, z);
        float down = my.field.rawHeight(x, z - 1);
        float up = my.field.rawHeight(x, z + 1);
        float dx = (right - left) / (2.0 * TileScale);
        float dz = (up - down) / (2.0 * TileScale);
        float nx = -dx;
        float ny = 1.0;
        float nz = -dz;
        float length = sqrt(nx * nx + ny * ny + nz * nz);
        if (length <= 0.0001) length = 1.0;
        nx = nx / length;
        ny = ny / length;
        nz = nz / length;
        int idx = z * VertexStride + x;
        my.vertexNormalX[idx] = nx;
        my.vertexNormalY[idx] = ny;
        my.vertexNormalZ[idx] = nz;
        x = x + 1;
      }
      z = z + 1;
    }
  }

  void updateVertexData() {
    my.computeVertexNormals();
    float span = my.field.maxHeight - my.field.minHeight;
    if (span <= 0.0001) span = 1.0;
    my.waterHeight = my.field.minHeight + span * my.waterNormalizedLevel;
    int idx = 0;
    while (idx < VertexCount) {
      float h = my.field.heightByFlatIndex(idx);
      my.vertexHeights[idx] = h;
      float t = my.field.normalized(h);
      float r;
      float g;
      float b;
      bool underwater = t < my.waterNormalizedLevel;
      if (underwater) {
        float depth = (my.waterNormalizedLevel - t) / my.waterNormalizedLevel;
        if (depth < 0.0) depth = 0.0;
        if (depth > 1.0) depth = 1.0;
        float shore = 1.0 - depth;
        r = 0.05 + 0.08 * depth + 0.10 * shore;
        g = 0.32 + 0.36 * depth + 0.18 * shore;
        b = 0.52 + 0.40 * depth + 0.12 * shore;
      } else if (t < my.waterNormalizedLevel + 0.06) {
        float w = (t - my.waterNormalizedLevel) / 0.06;
        r = 0.36 + 0.14 * w;
        g = 0.34 + 0.20 * w;
        b = 0.20 + 0.09 * w;
      } else if (t < 0.62) {
        float w = (t - (my.waterNormalizedLevel + 0.06)) / 0.16;
        r = 0.24 + 0.18 * w;
        g = 0.46 + 0.32 * w;
        b = 0.22 + 0.12 * w;
      } else if (t < 0.82) {
        float w = (t - 0.62) / 0.20;
        r = 0.46 + 0.26 * w;
        g = 0.40 + 0.22 * w;
        b = 0.30 + 0.20 * w;
      } else {
        float w = (t - 0.82) / 0.18;
        if (w < 0.0) w = 0.0;
        if (w > 1.0) w = 1.0;
        float base = 0.84 + 0.14 * w;
        r = base;
        g = base;
        b = base;
        float frost = my.saturate((t - 0.88) / 0.12);
        float sunSpark = 0.75 + 0.25 * frost;
        r = my.lerp(r, sunSpark, frost * 0.4);
        g = my.lerp(g, sunSpark, frost * 0.4);
        b = my.lerp(b, sunSpark, frost * 0.6);
      }

      if (!underwater) {
        float nx = my.vertexNormalX[idx];
        float ny = my.vertexNormalY[idx];
        float nz = my.vertexNormalZ[idx];
        float sunDot = nx * my.sunDirX + ny * my.sunDirY + nz * my.sunDirZ;
        if (sunDot < 0.0) sunDot = 0.0;
        float slope = 1.0 - ny;
        if (slope < 0.0) slope = 0.0;
        if (slope > 1.0) slope = 1.0;
        float shade = (0.38 + sunDot * 0.62) * (1.0 - 0.28 * slope);
        if (shade < 0.25) shade = 0.25;
        if (shade > 1.1) shade = 1.1;
        r = r * shade;
        g = g * shade;
        b = b * (shade + 0.05 * sunDot);
        float cool = my.saturate((0.58 - t) * 3.5);
        g = g + cool * 0.05;
        b = b + cool * 0.07;
        float alpine = my.saturate((t - 0.68) * 2.2);
        r = my.lerp(r, r * 0.9, alpine * 0.4);
        g = my.lerp(g, g * 0.88, alpine * 0.3);
        b = my.lerp(b, b * 1.08, alpine * 0.3);
      }

      r = my.saturate(r);
      g = my.saturate(g);
      b = my.saturate(b);

      my.vertexColorR[idx] = r;
      my.vertexColorG[idx] = g;
      my.vertexColorB[idx] = b;
      idx = idx + 1;
    }
  }

  void initGraphics() {
    InitGraph3D(WindowWidth, WindowHeight, "Rea Terrain", 24, 8);
    GLViewport(0, 0, WindowWidth, WindowHeight);
    GLClearDepth(1.0);
    GLDepthTest(true);
    GLSetSwapInterval(1);
    writeln("Controls: W/S to move, use the mouse to look around. N/P change seed, R randomizes, Q or Esc exits.");
    int mouseX = 0;
    int mouseY = 0;
    int mouseButtons = 0;
    getmousestate(mouseX, mouseY, mouseButtons);
    my.lastMouseX = mouseX;
    my.lastMouseY = mouseY;
    my.hasMouseSample = true;
  }

  void regenerate(int newSeed) {
    my.seed = newSeed;
    my.field.build(newSeed);
    my.updateVertexData();
    my.camX = TerrainSize * 0.5;
    my.camZ = TerrainSize * 0.5;
    my.camY = my.field.heightAt(my.camX, my.camZ) + EyeHeight;
    my.elapsedSeconds = 0.0;
    writeln("Generated landscape for seed ", my.seed, ".");
  }

  void handleDiscreteInput() {
    int key = pollkey();
    while (key != 0) {
      if (key == 'q' || key == 'Q' || key == 27) {
        my.running = false;
        return;
      } else if (key == 'n' || key == 'N') {
        my.regenerate(my.seed + 1);
      } else if (key == 'p' || key == 'P') {
        my.regenerate(my.seed - 1);
      } else if (key == 'r' || key == 'R') {
        int tickSeed = getticks();
        if (tickSeed == 0) tickSeed = my.seed + 7;
        my.regenerate(tickSeed);
      }
      key = pollkey();
    }
  }

  void drawTerrain() {
    int z = 0;
    while (z < TerrainSize) {
      GLBegin("triangle_strip");
      float worldZ0 = my.worldZCoords[z];
      float worldZ1 = my.worldZCoords[z + 1];
      int rowIndex = z * VertexStride;
      int nextRowIndex = (z + 1) * VertexStride;
      int x = 0;
      while (x <= TerrainSize) {
        int idx0 = rowIndex + x;
        int idx1 = nextRowIndex + x;
        float worldX = my.worldXCoords[x];
        GLColor3f(my.vertexColorR[idx0], my.vertexColorG[idx0], my.vertexColorB[idx0]);
        GLVertex3f(worldX, my.vertexHeights[idx0], worldZ0);
        GLColor3f(my.vertexColorR[idx1], my.vertexColorG[idx1], my.vertexColorB[idx1]);
        GLVertex3f(worldX, my.vertexHeights[idx1], worldZ1);
        x = x + 1;
      }
      GLEnd();
      z = z + 1;
    }
  }

  void emitWaterVertex(int idx,
                       int gridX,
                       int gridZ,
                       float groundHeight,
                       float basePhase,
                       float baseSecondary,
                       float baseSparkle) {
    float depth = my.waterHeight - groundHeight;
    if (depth < 0.0) depth = 0.0;
    if (depth > 6.0) depth = 6.0;
    float depthFactor = depth / 6.0;
    float shallow = 1.0 - depthFactor;
    float ripple = sin(basePhase + my.waterPhaseOffset[idx]) *
                   (0.08 + 0.04 * depthFactor);
    float ripple2 = cos(baseSecondary + my.waterSecondaryOffset[idx]) *
                    (0.05 + 0.05 * depthFactor);
    float surfaceHeight = my.waterHeight + 0.05 + ripple + ripple2;
    float worldX = my.worldXCoords[gridX];
    float worldZ = my.worldZCoords[gridZ];
    float foam = my.saturate(1.0 - depth * 0.45);
    float sparkle = 0.02 + 0.06 * sin(baseSparkle + my.waterSparkleOffset[idx]);
    float r = 0.05 + 0.08 * depthFactor + 0.18 * foam + sparkle * shallow * 0.4;
    float g = 0.34 + 0.30 * depthFactor + 0.26 * foam + sparkle * shallow * 0.5;
    float b = 0.55 + 0.32 * depthFactor + 0.22 * foam + sparkle * 0.6;
    r = my.saturate(r);
    g = my.saturate(g);
    b = my.saturate(b);
    GLColor3f(r, g, b);
    GLVertex3f(worldX, surfaceHeight, worldZ);
  }

  void drawWater(float timeSeconds) {
    float allowance = 0.18;
    float maxWaterHeight = my.waterHeight + allowance;
    float basePhase = timeSeconds * 0.7;
    float baseSecondary = timeSeconds * 1.6;
    float baseSparkle = timeSeconds * 2.4;
    GLBegin("triangles");
    int z = 0;
    while (z < TerrainSize) {
      int rowIndex = z * VertexStride;
      int nextRowIndex = (z + 1) * VertexStride;
      int x = 0;
      while (x < TerrainSize) {
        int idx00 = rowIndex + x;
        int idx10 = rowIndex + x + 1;
        int idx01 = nextRowIndex + x;
        int idx11 = nextRowIndex + x + 1;
        float h00 = my.vertexHeights[idx00];
        float h10 = my.vertexHeights[idx10];
        float h01 = my.vertexHeights[idx01];
        float h11 = my.vertexHeights[idx11];
        if (h00 <= maxWaterHeight &&
            h10 <= maxWaterHeight &&
            h01 <= maxWaterHeight) {
          my.emitWaterVertex(idx00, x, z, h00, basePhase, baseSecondary, baseSparkle);
          my.emitWaterVertex(idx10, x + 1, z, h10, basePhase, baseSecondary, baseSparkle);
          my.emitWaterVertex(idx01, x, z + 1, h01, basePhase, baseSecondary, baseSparkle);
        }
        if (h10 <= maxWaterHeight &&
            h11 <= maxWaterHeight &&
            h01 <= maxWaterHeight) {
          my.emitWaterVertex(idx10, x + 1, z, h10, basePhase, baseSecondary, baseSparkle);
          my.emitWaterVertex(idx11, x + 1, z + 1, h11, basePhase, baseSecondary, baseSparkle);
          my.emitWaterVertex(idx01, x, z + 1, h01, basePhase, baseSecondary, baseSparkle);
        }
        x = x + 1;
      }
      z = z + 1;
    }
    GLEnd();
  }

  void updateCamera(float dt) {
    if (dt > 0.1) dt = 0.1;
    int mouseX = 0;
    int mouseY = 0;
    int mouseButtons = 0;
    getmousestate(mouseX, mouseY, mouseButtons);
    if (!my.hasMouseSample) {
      my.lastMouseX = mouseX;
      my.lastMouseY = mouseY;
      my.hasMouseSample = true;
    } else {
      int deltaX = mouseX - my.lastMouseX;
      int deltaY = mouseY - my.lastMouseY;
      my.lastMouseX = mouseX;
      my.lastMouseY = mouseY;
      if (deltaX != 0 || deltaY != 0) {
        int maxDeltaX = WindowWidth / 2;
        int maxDeltaY = WindowHeight / 2;
        if (deltaX >= -maxDeltaX && deltaX <= maxDeltaX &&
            deltaY >= -maxDeltaY && deltaY <= maxDeltaY) {
          my.yaw = my.yaw - deltaX * MouseYawSensitivity;
          my.pitch = my.pitch - deltaY * MousePitchSensitivity;
        }
      }
    }

    bool forward = IsKeyDown(ScanCodeS);
    bool backward = IsKeyDown(ScanCodeW);

    float moveForward = 0.0;
    if (forward) moveForward = moveForward + 1.0;
    if (backward) moveForward = moveForward - 1.0;
    if (moveForward != 0.0) {
      float speed = MoveSpeed * dt * moveForward;
      float yawRadians = my.yaw * DegreesToRadians;
      float forwardX = sin(yawRadians);
      float forwardZ = cos(yawRadians);
      float deltaX = forwardX * (speed / TileScale);
      float deltaZ = forwardZ * (speed / TileScale);
      my.camX = my.camX + deltaX;
      my.camZ = my.camZ + deltaZ;
    }

    if (my.yaw >= 360.0) my.yaw = my.yaw - 360.0;
    if (my.yaw < 0.0) my.yaw = my.yaw + 360.0;
    if (my.pitch > MaxPitch) my.pitch = MaxPitch;
    if (my.pitch < -MaxPitch) my.pitch = -MaxPitch;

    if (my.camX < 1.0) my.camX = 1.0;
    if (my.camX > TerrainSize - 1) my.camX = TerrainSize - 1;
    if (my.camZ < 1.0) my.camZ = 1.0;
    if (my.camZ > TerrainSize - 1) my.camZ = TerrainSize - 1;

    my.camY = my.field.heightAt(my.camX, my.camZ) + EyeHeight;
  }

  void drawFrame() {
    GLClearColor(0.36, 0.55, 0.78, 1.0);
    GLClear();

    GLMatrixMode("projection");
    GLLoadIdentity();
    float aspect = WindowWidth / float(WindowHeight);
    GLPerspective(68.0, aspect, 0.1, 320.0);

    GLMatrixMode("modelview");
    GLLoadIdentity();
    GLRotatef(-my.pitch, 1.0, 0.0, 0.0);
    GLRotatef(-my.yaw, 0.0, 1.0, 0.0);
    float half = TerrainSize * 0.5;
    float worldX = (my.camX - half) * TileScale;
    float worldZ = (my.camZ - half) * TileScale;
    GLTranslatef(-worldX, -my.camY, -worldZ);

    my.drawTerrain();
    my.drawWater(my.elapsedSeconds);
    GLSwapWindow();
  }

  void run() {
    my.initGraphics();
    my.lastTicks = getticks();
    while (my.running) {
      my.handleDiscreteInput();
      if (QuitRequested()) break;
      int now = getticks();
      float dt = (now - my.lastTicks) / 1000.0;
      my.lastTicks = now;
      if (dt < 0.0) dt = 0.0;
      my.updateCamera(dt);
      my.elapsedSeconds = my.elapsedSeconds + dt;
      my.drawFrame();
      GraphLoop(1);
    }
    CloseGraph3D();
  }
}

int main() {
  int defaultSeed = 1337;
  int seed = extractSeedFromArgs(defaultSeed);
  LandscapeDemo demo = new LandscapeDemo(seed);
  demo.run();
  return 0;
}
