// Interactive Mandelbrot demo for the Rea front end.
// Left click to zoom in, right click to zoom out, Q to quit.
// Requires SDL support in the Pscal build.

class MandelbrotApp {
  const int Width = 1200;
  const int Height = 900;
  const int MaxIterations = 200;
  const int BytesPerPixel = 4;
  const double ZoomFactor = 2.0;
  const int ButtonLeft = 1;
  const int ButtonRight = 4;
  const int KEY_LEFT = 1073741904;
  const int KEY_RIGHT = 1073741903;
  const int KEY_UP = 1073741906;
  const int KEY_DOWN = 1073741905;

  byte pixels[Width * Height * BytesPerPixel];
  double minRe;
  double maxRe;
  double minIm;
  double maxIm;
  int textureID;
  bool quit;
  int prevButtons;

  void init() {
    my.minRe = -2.0;
    my.maxRe = 1.0;
    my.minIm = -1.2;
    my.maxIm = my.minIm + (my.maxRe - my.minRe) * my.Height / my.Width;
    initgraph(my.Width, my.Height, "Mandelbrot in Rea");
    my.textureID = createtexture(my.Width, my.Height);
    if (my.textureID < 0) {
      printf("Error: unable to create texture.\n");
      halt();
    }
    my.quit = false;
    my.prevButtons = 0;
  }

  void compute() {
    int row[Width];
    double reFactor = (my.maxRe - my.minRe) / (my.Width - 1);
    double imFactor = (my.maxIm - my.minIm) / (my.Height - 1);
    int idx, x, y, n;
    int R, G, B;
    double c_im;
    for (y = 0; y < my.Height; y = y + 1) {
      c_im = my.maxIm - y * imFactor;
      mandelbrotrow(my.minRe, reFactor, c_im, my.MaxIterations, my.Width - 1, row);
      idx = y * my.Width * my.BytesPerPixel;
      for (x = 0; x < my.Width; x = x + 1) {
        n = row[x];
        if (n == my.MaxIterations) { R = G = B = 0; }
        else {
          R = (n * 5) % 256;
          G = (n * 7 + 85) % 256;
          B = (n * 11 + 170) % 256;
        }
        my.pixels[idx + 0] = char(R);
        my.pixels[idx + 1] = char(G);
        my.pixels[idx + 2] = char(B);
        my.pixels[idx + 3] = char(255);
        idx = idx + my.BytesPerPixel;
      }
    }
    updatetexture(my.textureID, my.pixels);
    cleardevice();
    rendercopy(my.textureID);
    updatescreen();
  }

  void zoom(int px, int py, double factor) {
    double reFactor = (my.maxRe - my.minRe) / (my.Width - 1);
    double imFactor = (my.maxIm - my.minIm) / (my.Height - 1);
    double centerRe = my.minRe + (px + 0.5) * reFactor;
    double centerIm = my.maxIm - (py + 0.5) * imFactor;
    double widthRe = (my.maxRe - my.minRe) * factor;
    double heightIm = (my.maxIm - my.minIm) * factor;
    my.minRe = centerRe - widthRe / 2.0;
    my.maxRe = centerRe + widthRe / 2.0;
    my.minIm = centerIm - heightIm / 2.0;
    my.maxIm = centerIm + heightIm / 2.0;
  }

  void handleInput() {
    graphloop(1);
    int key = pollkey();
    if (key != 0) {
      if (key == 'q' || key == 'Q') { my.quit = true; return; }
      double widthRe = (my.maxRe - my.minRe);
      double heightIm = (my.maxIm - my.minIm);
      double dx = widthRe * 0.5;
      double dy = heightIm * 0.5;
      if (key == my.KEY_LEFT) { my.minRe -= dx; my.maxRe -= dx; }
      else if (key == my.KEY_RIGHT) { my.minRe += dx; my.maxRe += dx; }
      else if (key == my.KEY_UP) { my.minIm += dy; my.maxIm += dy; }
      else if (key == my.KEY_DOWN) { my.minIm -= dy; my.maxIm -= dy; }
    }
    int x = 0, y = 0, b = 0;
    getmousestate(x, y, b);
    if ((b & my.ButtonLeft) != 0 && (my.prevButtons & my.ButtonLeft) == 0) {
      my.zoom(x, y, 1.0 / my.ZoomFactor);
    } else if ((b & my.ButtonRight) != 0 && (my.prevButtons & my.ButtonRight) == 0) {
      my.zoom(x, y, my.ZoomFactor);
    }
    my.prevButtons = b;
  }

  void run() {
    my.init();
    while (!my.quit) {
      my.compute();
      my.handleInput();
    }
    destroytexture(my.textureID);
    closegraph();
  }
}

MandelbrotApp app = new MandelbrotApp();
app.run();

