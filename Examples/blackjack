{*******************************************}
{*       Simple Blackjack  card game       *}
{* (based on my BlackJack GUI application) *}
{*******************************************}

program blckjack;

uses
  SysUtils, Crt;

type
  TSuit  = (diamond, club, heart, spade);
  TSuitColors = array[diamond .. spade] of Byte;
  TCard  = record
    Suit: TSuit;
    Value: string;
    BJValue: Integer;
  end;
  TCardDeck = array[1..52] of TCard;
  TCards = array[1..6] of record
    Card  : TCard;
    FaceUp: Boolean;
  end;

const
  Version = 'v1.0, (c) allu, September 2022';
  CardValues: array[1..13] of string = (
    'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'
  );
  SuitColors: TSuitColors = (
    Red, Black, Red, Black
  );

var
  DealerBJValue1, PlayerBJValue1, DealerBJValue2, PlayerBJValue2, NCard, Rank, N: Integer;
  NDealerCards, NPlayerCards, DealerDoneValue, PlayerDoneValue, DealerScore, PlayerScore: Integer;
  Winner: string;
  Key: Char;
  DealEnabled, HitEnabled, StayEnabled: Boolean;
  Suit: TSuit;
  CardDeck: TCardDeck;
  DealerCards, PlayerCards: TCards;

{ Display program title }

procedure DisplayTitle(Version: string);

var
  S: string;

begin
  ClrScr;
  S := 'Simple Blackjack game for 1 player';
  if Version <> '' then
    S := S + ' - ' + Version;
  S := S + '.';
  TextColor(LightCyan);
  Writeln(S); Writeln;
  TextColor(LightGray);
end;

{ Display Blackjack rules (for this version of the game) }

procedure DisplayRules(Version: string);

begin
  DisplayTitle(Version);
  Writeln('Aim of the game: The aim in Blackjack is to get closer to 21 than the dealer');
  Writeln('without exceeding this value. Value of the individual cards: the spot cards');
  Writeln('from 2 to 10 count at Face value, while the court cards each count as 10 and');
  Writeln('the Ace can be 1 or 11.');
  Writeln;
  Writeln('The game: The player receives two cards and the dealer deals himself one Face');
  Writeln('up. The player can now request additional cards ("hit") until he thinks he');
  Writeln('is close enough to 21 and then decide to "stay". If he exceeds 21 and "goes');
  Writeln('bust", he loses his stake. If the player is done, the dealer draws a second');
  Writeln('card. If he has 16 or less, he has to draw another. Once he has 17 or more,');
  Writeln('he cannot draw anymore. If the dealer exceeds 21 with his cards, the player');
  Writeln('has won. If the player and the dealer have the same value, there is a "stand-');
  Writeln('off", and the playerâ€™s stake is returned.');
  Writeln;
  Writeln('Blackjack: Officially, you''ve got a Blackjack if you reached a total of 21');
  Writeln('with the first two cards (e.g. an Ace and a King). In my version of the game,');
  Writeln('however, a Blackjack is considered to be two Aces. The Blackjack always beats');
  Writeln('all other card combinations. If normally you win the same amount as you bet');
  Writeln('(1:1), with a Blackjack, you receive one and a half times your stake (3:2).');
  Writeln;
  Writeln('In this simplified version of the game, there are no bets. There is only a');
  Writeln('count, of the games, the dealer resp. the player wins.');
  Writeln;
  Write('Hit ENTER to start the game... '); Readln;
end;

{ Remove cards from the table }

procedure RemoveCards;

var
  Y0, I, J: Integer;

begin
  // Clear cards areas
  for I := 1 to 2 do begin
    for J := 0 to 8 do begin
      if I = 1 then
        Y0 := 5
      else
        Y0 := 17;
      GotoXY(1, Y0 + J);
      ClrEoL;
    end;
  end;
  // Clear game evaluation message
  GotoXY(50, 3); ClrEoL;
  GotoXY(50, 15); ClrEoL;
end;

{ Display cards (for given player) }

procedure DisplayCards(var Cards: TCards; N: Integer; DP: string; var SuitColors: TSuitColors);

var
  X0, Y0, X, Y, I, J: Integer;
  Card: TCard;

begin
  X0 := 2;                                                                     // x-position of first card
  if DP = 'dealer' then
    Y0 := 5                                                                    // y-position of dealer cards
  else
    Y0 := 17;                                                                  // y-position of player cards
  TextBackground(LightGray);
  Y := Y0; X := X0;
  for I := 1 to N do begin
    // Draw all cards for dealer resp. player
    TextColor(Black);
    GotoXY(X, Y);
    Write('-----------');
    for J := 1 to 7 do begin
      Inc(Y);
      GotoXY(X, Y);
      Write('|         |');
    end;
    Inc(Y);
    GotoXY(X, Y);
    Write('-----------');
    if Cards[I].FaceUp then begin
      // If the card is put face up, display suit and value
      Card := Cards[I].Card;
      TextColor(SuitColors[Card.Suit]);
      GotoXY(X + 1, Y0 + 1);  Write(Card.Value);
      GotoXY(X + 10 - Length(Card.Value), Y0 + 7); Write(Card.Value);
      GotoXY(X + 1, Y0 + 4);
      case Card.Suit of
        diamond: Write(' Diamond');
        club: Write('  Club');
        heart: Write('  Heart');
        spade: Write('  Spade');
      end;
    end;
    // x- and y-positions for next card
    Y := Y0; X := X + 13;
  end;
  TextBackground(Black); TextColor(LightGray);
end;

{ Display game status (actual Blackjack values sum and actual game scores) }

procedure DisplayGameStatus(DealerBJ, PlayerBJ1, PlayerBJ2, DealerScore, PlayerScore: Integer);

begin
  // Dealer information
  GotoXY(1, 3); Write('Dealer:           '); GotoXY(9, 3);
  if DealerBJ = -1 then begin
    // This is before dealer has got resp. shown his cards
    if PlayerBJ1 = -1 then
      Write('-')
    else
      Write('?');
  end
  else begin
    // This is normal situation
    if DealerBJ = -21 then                                                     // this -21 codes for Blackjack (2 Aces in my verasion of the game)
      Write('Blackjack!')
    else begin
      Write(DealerBJ);
    end;
  end;
  GotoXY(25, 3);
  Write('Game score: ', DealerScore);
  // Player
  GotoXY(1, 15); Write('Player:           '); GotoXY(9, 15);
  if PlayerBJ1 = -1 then begin
    // This is before player has got his cards
    Write('-');
  end
  else begin
    // This is normal situation
    if PlayerBJ1 = -21 then
      Write('Blackjack!')
    else begin
      Write(PlayerBJ1);
      if PlayerBJ2 <> PlayerBJ1 then                                           // if there are two possible BJ values, display them both
        Write('/', PlayerBJ2);
    end;
  end;
  GotoXY(25, 15);
  Write('Game score: ', PlayerScore);
end;

{ Shuffle the card deck }

procedure Shuffle(var CardDeck: TCardDeck);

var
  R1, R2, I: Integer;
  Card: TCard;

begin
  for I := 1 TO 50 do begin
    R1 := Random(52) + 1; R2 := Random(52) + 1;
    Card := CardDeck[R1]; CardDeck[R1] := CardDeck[R2]; CardDeck[R2] := Card;
  end;
end;

{ Get next card from the deck }

function NextDeckCard(N: Integer): Integer;

begin
  Inc(N);
  if N > 52 then begin
    // If all cards have been done, reshuffle the deck
    Shuffle(CardDeck);
    N := 1;
  end;
  Result := N;
end;

{ Start a new Blackjack game (reset counters) }

procedure NewGame(var DealerScore, PlayerScore, NCard: Integer; var CardDeck: TCardDeck);

begin
  DealerScore := 0; PlayerScore := 0;                                          // reset scores
  Shuffle(CardDeck);                                                           // shuffle the card deck
  NCard := 0;                                                                  // next card will be 1 = first of the deck
  DisplayTitle('');                                                            // display program title
  DisplayGameStatus(-1, -1, -1, DealerScore, PlayerScore);                 // these -1 code for "no Blackjack values available"
  RemoveCards;                                                                 // remove cards from the table
  GotoXY(1, 27);
  TextColor(LightCyan);
  Writeln('To play the game, push one of the following keyboard keys:');       // display command shortcuts
  Write('  N = New game - D = Deal - H = Hit - S = Stay - X = Exit');
  TextColor(LightGray);
  DealEnabled := True; HitEnabled := False; StayEnabled := False;              // enable the "Deal" command
end;

{ Calculate Blackjack values for actual dealer or player cards}

procedure BJValue(Cards: TCards; NCards: Integer; var V1, V2: Integer);

// The procedure is used for both the dealer and the player, the TCards array given
// as argument being the dealer's or the player's cards. NCards is the number of
// cards the dealer/player actually has taken.
// There are 2 Blackjack values, as the Ace can count 1 or 11 (not really true; there
// could be even more if there are two or three Aces...)

var
  I: Integer;

begin
  V1 := 0; V2 := 0;
  for I := 1 to NCards do begin
    if Cards[I].FaceUp then begin
      V1 := V1 + Cards[I].Card.BJValue;
      // The Ace may be counted as 1 or as 11
      if Cards[I].Card.Value = 'A' then
        V2 := V2 + 11
      else
        V2 := V2 + Cards[I].Card.BJValue;
    end;
  end;
  // Blackjack (2 Aces)
  if (V1 = 2) and (V2 = 22) then begin
    V1 := -21; V2 := -21;                                                      // use -21 to code for Blackjack
  end;
end;

{ Get dealer's hold Blackjack value }

function GetDealerDoneValue(var Cards: TCards; NCards: Integer; var BJValue1, BJValue2: Integer): Integer;

var
  DoneValue: Integer;

begin
  DoneValue := 0;
  BJValue(Cards, NCards, BJValue1, BJValue2);
  if (BJValue1 = -21) and (BJValue2 = -21) then begin                          // Blackjack
    DoneValue := -21;
  end
  else begin
    // Dealer always holds at 17!
    if (BJValue2 >= 17) and (BJValue2 <= 21) then
      DoneValue := BJValue2
    else if (BJValue1 >= 17) and (BJValue1 <= 21) then
      DoneValue := BJValue1
    else if (BJValue1 > 21) and (BJValue2 > 21) then begin
      if BJValue1 < BJValue2 then
        DoneValue := BJValue1
      else
        DoneValue := BJValue2;
    end;
  end;
  Result := DoneValue;
end;

{* Main program *}

begin
  DisplayRules(Version);
  CursorOff;
  Randomize;
  N := 0;
  // Initialize the card deck
  for Suit := diamond to spade do begin
    for Rank := 1 to 13 do begin
      Inc(N);
      CardDeck[N].Suit := Suit;
      CardDeck[N].Value := CardValues[Rank];
      if Rank <= 10 then // A=1, 2-10 count as face value
        CardDeck[N].BJValue := Rank
      else // J, Q, K count as 10
        CardDeck[N].BJValue := 10;
    end;
  end;
  // Start a new game
  NewGame(DealerScore, PlayerScore, NCard, CardDeck);

  // Main Game Loop - Loop around until user pushes X to exit the program
  repeat
    // Inner Input Loop - Loop around until user pushes one of the command shortcut keys
    repeat
      Key := ReadKey;
      if Key = #0 then // Handle potential extended key codes
        Key := ReadKey;

      // *** FIX: Convert to uppercase *before* the until check ***
      if Key <> #0 then // Avoid processing null from potential special key sequence
         InputKeyUpper := UpperCase(Key) // Assign to temp var
      else
         InputKeyUpper := #0; // Assign a non-matching value if key was null

    // *** FIX: Use the temporary variable in the condition ***
    until InputKeyUpper in ['N', 'D', 'H', 'S', 'X'];

    // --- Process Validated Input using InputKeyUpper ---

    // N: Start a new game
    if InputKeyUpper = 'N' then begin
      NewGame(DealerScore, PlayerScore, NCard, CardDeck);
    end
    // D: Deal the first 4 cards
    else if DealEnabled and (InputKeyUpper = 'D') then begin
      NCard := NextDeckCard(NCard); PlayerCards[1].Card := CardDeck[NCard];    // first player card
      NCard := NextDeckCard(NCard); DealerCards[1].Card := CardDeck[NCard];    // first dealer card
      NCard := NextDeckCard(NCard); PlayerCards[2].Card := CardDeck[NCard];    // second player card
      NCard := NextDeckCard(NCard); DealerCards[2].Card := CardDeck[NCard];    // second dealer card
      NDealerCards := 2; NPlayerCards := 2;
      PlayerCards[1].FaceUp := True; DealerCards[1].FaceUp := True;
      PlayerCards[2].FaceUp := True; DealerCards[2].FaceUp := False;           // second dealer card is face down
      // Display the dealer and player cards
      RemoveCards;
      DisplayCards(DealerCards, NDealerCards, 'dealer', SuitColors);
      DisplayCards(PlayerCards, NPlayerCards, 'player', SuitColors);
      // Calculate the dealer and player Blackjack values
      BJValue(DealerCards, NDealerCards, DealerBJValue1, DealerBJValue2);
      BJValue(PlayerCards, NPlayerCards, PlayerBJValue1, PlayerBJValue2);
      // Display the game status (dealer Blackjack value will appear as a ?)
      DisplayGameStatus(-1, PlayerBJValue1, PlayerBJValue2, DealerScore, PlayerScore);
      GotoXY(50, 15); ClrEoL;
      // Enable the Hit and Stay commands
      DealEnabled := False;
      HitEnabled := True;
      StayEnabled := True;
    end
    // H: Hit (player takes another card)
    else if HitEnabled and (InputKeyUpper = 'H') then begin
      NCard := NextDeckCard(NCard);
      Inc(NPlayerCards);
      PlayerCards[NPlayerCards].FaceUp := True;
      PlayerCards[NPlayerCards].Card := CardDeck[NCard];
      // Display the player's cards
      DisplayCards(PlayerCards, NPlayerCards, 'player', SuitColors);
      // Calculate player's new Blackjack value(s)
      BJValue(PlayerCards, NPlayerCards, PlayerBJValue1, PlayerBJValue2);
      if PlayerBJValue1 > 21 then begin
        // If player busted (> 21) this round is over
        GotoXY(50, 15);
        TextColor(LightRed);
        Write('You busted!');
        TextColor(LightGray);
        Inc(DealerScore);
        DealEnabled := True;
        HitEnabled := False;
        StayEnabled := False;
      end;
      // Display new game status
      DisplayGameStatus(-1, PlayerBJValue1, PlayerBJValue2, DealerScore, PlayerScore);
    end
    // S: Stay (player stays and dealer hits until he gets 17 or more)
    else if StayEnabled and (InputKeyUpper = 'S') then begin
      DealerCards[2].FaceUp := True;
      // Calculate dealer Blackjack value (with 2nd card now face up)
      BJValue(DealerCards, NDealerCards, DealerBJValue1, DealerBJValue2);
      // Determine if dealer stays with these two cards
      DealerDoneValue := GetDealerDoneValue(DealerCards, NDealerCards, DealerBJValue1, DealerBJValue2);
      if DealerDoneValue = 0 then begin
        // If these two cards don't give 17 or more, dealer continues hitting
        repeat
          Inc(NDealerCards);
          NCard := NextDeckCard(NCard);
          DealerCards[NDealerCards].FaceUp := True;
          DealerCards[NDealerCards].Card := CardDeck[NCard];
          BJValue(DealerCards, NDealerCards, DealerBJValue1, DealerBJValue2);
          DealerDoneValue := GetDealerDoneValue(DealerCards, NDealerCards, DealerBJValue1, DealerBJValue2);
        until DealerDoneValue <> 0;
      end;
      // Determine player's stay value
      if PlayerBJValue2 > 21 then
        PlayerDoneValue := PlayerBJValue1
      else
        PlayerDoneValue := PlayerBJValue2;
      // Round evaluation: Determine the winner
      if DealerDoneValue = PlayerDoneValue then
        Winner := '' // Stand-off
      else if DealerDoneValue = -21 then
        Winner := 'dealer' // Dealer Blackjack
      else if PlayerDoneValue = -21 then
        Winner := 'player' // Player Blackjack
      else begin
        if (DealerDoneValue > 21) or (PlayerDoneValue > DealerDoneValue) then
          Winner := 'player' // Dealer busted or player higher
        else
          Winner := 'dealer'; // Dealer higher or equal (but not stand-off)
      end;
      // Display round winner and update game scores
      if Winner = 'player' then begin
        GotoXY(50, 15); TextColor(LightGreen); Write('You win!'); Inc(PlayerScore);
      end
      else if Winner = 'dealer' then begin
        GotoXY(50, 3); TextColor(LightRed); Write('Dealer wins'); Inc(DealerScore);
      end
      else begin
        GotoXY(50, 3); TextColor(Yellow); Write('Stand-off');
      end;
      TextColor(LightGray);
      // Display dealer's cards (all face up now)
      DisplayCards(DealerCards, NDealerCards, 'dealer', SuitColors);
      // Display final game status for the round
      DisplayGameStatus(DealerDoneValue, PlayerBJValue1, PlayerBJValue2, DealerScore, PlayerScore);
      // Enable the Deal command for next round
      DealEnabled := True;
      HitEnabled := False;
      StayEnabled := False;
    end
    // X: Exit the program
    else if InputKeyUpper = 'X' then begin
      TextBackground(Black); TextColor(LightCyan);
      ClrScr;
    end;

  // *** FIX: Use the temporary variable for main loop exit condition ***
  until InputKeyUpper = 'X';

end.
